/*
  This class has been generated by the Code Generator
*/

package com.laiyifen.bpc.core;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.cordys.cpc.bsf.busobject.StoredProcedure;
import com.eibus.xml.nom.Document;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.NodeSet;
import com.eibus.xml.xpath.ResultNode;
import com.eibus.xml.xpath.XPath;
import com.eibus.xml.xpath.XPathMetaInfo;
import com.laiyifen.common.ConnectorManager;


public class BPC_BUDGET_ECC extends BPC_BUDGET_ECCBase
{
	public static final String BPC_BUDGET_NAMESPACE = "http://tempuri.org/OSoft.Services.Webservice.MetaDataWSExt/MetaDataWSExt";
	
    public BPC_BUDGET_ECC()
    {
        this((BusObjectConfig)null);
    }

    public BPC_BUDGET_ECC(BusObjectConfig config)
    {
        super(config);
    }

    public static boolean SycnBpcBudgetEccByParams(String strP_CC, String strTIME, String strP_ACCT) throws Exception
    {
        // TODO implement body
    	if(strP_CC==null || "".equals(strP_CC)){
    		BusObjectIterator<BPC_BUDGET_COSTCENTER> bpcBugetCostcenterObjects = BPC_BUDGET_COSTCENTER.getAllBpcBudgetCostcenter();
    		if (bpcBugetCostcenterObjects!=null){
    			while(bpcBugetCostcenterObjects.hasMoreElements()){
    				BPC_BUDGET_COSTCENTER bpcBugetCostcenterObject = bpcBugetCostcenterObjects.nextElement();
    				SycnBpcBudgetEccByParamsByOne(bpcBugetCostcenterObject.getCOSTCENTER_CODE(),strTIME,strP_ACCT);
    			}
    		}
    	}else {
    		String[] arrP_cc = strP_CC.split(",");
    		for(int i=0;i<arrP_cc.length;i++){
    			SycnBpcBudgetEccByParamsByOne(arrP_cc[i],strTIME,strP_ACCT);
    		}
    	}
        return true;
    }

    
    public static boolean SycnBpcBudgetEccByParamsByOne(String strP_CC, String strTIME, String strP_ACCT) throws Exception{
      	 // TODO implement body
      	String organization = BSF.getOrganization();
   		String workspaceID = "__Organization Staging__";
   		
   		if(strTIME==null || "".equals(strTIME)){
   			strTIME = "2012.Q1,2012.Q2,2012.Q3,2012.Q4";
   		}
   		if(strP_ACCT==null || "".equals(strP_ACCT)){
   			strP_ACCT= BPC_BUDGET_SUBJECT_MAPPING.getBpcBudgetAllSubjectCodeNoProject();
   		}
   		int params = getBudgetDimensionList(strP_CC,strTIME,strP_ACCT);
   		int response = ConnectorManager._callSoapMethod(organization,
   				BPC_BUDGET_NAMESPACE, "GetCellValueEx", null,
   				null,params);
   		try {
   			int teamIDNode = 0; 
   			if (response > 0) {
   				XPathMetaInfo metaInfo = new XPathMetaInfo();
   				metaInfo.addNamespaceBinding("", BPC_BUDGET_NAMESPACE);
   				XPath opath = XPath.getXPathInstance(".//DATA/CORDS");

   				NodeSet oNodeSet = opath.selectNodeSet(response, metaInfo);

   				if (oNodeSet != null) {
   					String temp = null;
   					while (oNodeSet.hasNext()) {
   						
   						long iResultNode = oNodeSet.next();
   						int iNode = ResultNode.getElementNode(iResultNode);
   						temp = Node.getData(iNode);
   						String[] tmpArray = temp.split("!");
   						String year = tmpArray[9].split("\\.")[0];
   						String month = tmpArray[9].split("\\.")[1];
   						//insertBudget(year,month,tmpArray[6],tmpArray[5],tmpArray[11]);
   						insertOrUpdateBudgetEcc(year,month,tmpArray[6],tmpArray[5],tmpArray[11],tmpArray[7]);
   						Node.delete(iNode);
   						iNode = 0;
   					}
   				}
   			}
   		} finally {
   			Node.delete(response);
   			response = 0;
   		}
          return true;
      	
      }
    
    public static boolean SycnBpcBudgetEccProjectByParams(String strP_CC, String strTIME, String strP_ACCT) throws Exception
    {
        // TODO implement body
		if(strP_CC==null || "".equals(strP_CC)){
			BusObjectIterator<BPC_PROJECT> bpcBugetCostcenterObjects = BPC_PROJECT.getBpcProjectCostcenterAllObjects(null);
			if (bpcBugetCostcenterObjects!=null){
				while(bpcBugetCostcenterObjects.hasMoreElements()){
					BPC_PROJECT bpcBugetCostcenterObject = bpcBugetCostcenterObjects.nextElement();
					SycnBpcBudgetEccProjectByParamsByOne(bpcBugetCostcenterObject.getCOSTCENTER_CODE(),strTIME,strP_ACCT,bpcBugetCostcenterObject.getPROJECT_CODE());
				}
			}
    	}else {
    		String[] arrP_cc = strP_CC.split(",");
    		for(int i=0;i<arrP_cc.length;i++){
    			BusObjectIterator<BPC_PROJECT> bpcBugetCostcenterObjects = BPC_PROJECT.getBpcProjectCostcenterAllObjects("costcenter_code ='"+arrP_cc[i]+"'");
    			if (bpcBugetCostcenterObjects!=null){
    				while(bpcBugetCostcenterObjects.hasMoreElements()){
    					BPC_PROJECT bpcBugetCostcenterObject = bpcBugetCostcenterObjects.nextElement();
    					SycnBpcBudgetEccProjectByParamsByOne(bpcBugetCostcenterObject.getCOSTCENTER_CODE(),strTIME,strP_ACCT,bpcBugetCostcenterObject.getPROJECT_CODE());
    				}
    			}
    		}
    	}
        return true;
    }
    
    
    public static boolean SycnBpcBudgetEccProjectByParamsByOne(String strP_CC, String strTIME, String strP_ACCT , String P_DATASRC) throws Exception{
     	 // TODO implement body
     	String organization = BSF.getOrganization();
  		String workspaceID = "__Organization Staging__";
  		
  		if(strTIME==null || "".equals(strTIME)){
  			strTIME = "2012.Q1,2012.Q2,2012.Q3,2012.Q4";
  		}
  		if(strP_ACCT==null || "".equals(strP_ACCT)){
  			strP_ACCT= BPC_BUDGET_SUBJECT_MAPPING.getBpcBudgetAllSubjectCodeProject();
  		}
  		int params = getBudgetProjectDimensionList(strP_CC,strTIME,strP_ACCT,P_DATASRC);
  		int response = ConnectorManager._callSoapMethod(organization,
  				BPC_BUDGET_NAMESPACE, "GetCellValueEx", null,
  				null,params);
  		try {
  			int teamIDNode = 0; 
  			if (response > 0) {
  				XPathMetaInfo metaInfo = new XPathMetaInfo();
  				metaInfo.addNamespaceBinding("", BPC_BUDGET_NAMESPACE);
  				XPath opath = XPath.getXPathInstance(".//DATA/CORDS");

  				NodeSet oNodeSet = opath.selectNodeSet(response, metaInfo);

  				if (oNodeSet != null) {
  					String temp = null;
  					while (oNodeSet.hasNext()) {
  						
  						long iResultNode = oNodeSet.next();
  						int iNode = ResultNode.getElementNode(iResultNode);
  						temp = Node.getData(iNode);
  						String[] tmpArray = temp.split("!");
  						String year = tmpArray[9].split("\\.")[0];
  						String month = tmpArray[9].split("\\.")[1];
  						//insertBudget(year,month,tmpArray[6],tmpArray[5],tmpArray[11]);
  						insertOrUpdateBudgetEcc(year,month,tmpArray[6],tmpArray[5],tmpArray[11],tmpArray[7]);
  						Node.delete(iNode);
  						iNode = 0;
  					}
  				}
  			}
  		} finally {
  			Node.delete(response);
  			response = 0;
  		}
         return true;
     	
     }
    
   
       
       public static boolean UpdateBpcBudgetEccByParamsByOne(String strP_CC, String strTIME, String strP_ACCT) throws Exception{
         	 // TODO implement body
         	String organization = BSF.getOrganization();
      		String workspaceID = "__Organization Staging__";
      		
      		if(strTIME==null || "".equals(strTIME)){
      			strTIME = "2012.Q1,2012.Q2,2012.Q3,2012.Q4";
      		}
      		if(strP_ACCT==null || "".equals(strP_ACCT)){
      			strP_ACCT="ACCT_0066010306_SUM,ACCT_0066010600,ACCT_0066010700_SUM,ACCT_0066010800,ACCT_0066010901,ACCT_0066010902_SUM,ACCT_0066010903,ACCT_0066010904,ACCT_0066011001_1SUM,ACCT_0066011001_2,ACCT_0066011001_3SUM,ACCT_0066011002,ACCT_0066011100,ACCT_0066011201,ACCT_0066011202,ACCT_0066011203,ACCT_0066011204,ACCT_0066011301,ACCT_0066011302,ACCT_0066011400,ACCT_0066011501,ACCT_0066011502,ACCT_0066011503,ACCT_0066011600,ACCT_0066011701,ACCT_0066011702,ACCT_0066011703,ACCT_0066011800_SUM,ACCT_0066011900,ACCT_0066012000,ACCT_0066012100,ACCT_0066012201,ACCT_0066012202,ACCT_0066012203,ACCT_0066012204,ACCT_0066012205,ACCT_0066012300_SUM,ACCT_0066012501,ACCT_0066012502,ACCT_0066012503,ACCT_0066012600,ACCT_0066012700,ACCT_0066012802,ACCT_0066012900,ACCT_0066013002,ACCT_0066013003,ACCT_0066013004,ACCT_0066013005,ACCT_0066013100_SUM,ACCT_0066013500,ACCT_0066013700,ACCT_0066013900_SUM,ACCT_0066014000_SUM,ACCT_0066014200,ACCT_0066014100_SUM,ACCT_0066014300,ACCT_0066014400,ACCT_0066014500,ACCT_0066014600,ACCT_0066014700,ACCT_0066015100";
      		}
      		int params = getBudgetDimensionList(strP_CC,strTIME,strP_ACCT);
      		int response = ConnectorManager._callSoapMethod(organization,
      				BPC_BUDGET_NAMESPACE, "GetCellValueEx", null,
      				null,params);
      		try {
      			int teamIDNode = 0; 
      			if (response > 0) {
      				XPathMetaInfo metaInfo = new XPathMetaInfo();
      				metaInfo.addNamespaceBinding("", BPC_BUDGET_NAMESPACE);
      				XPath opath = XPath.getXPathInstance(".//DATA/CORDS");

      				NodeSet oNodeSet = opath.selectNodeSet(response, metaInfo);

      				if (oNodeSet != null) {
      					String temp = null;
      					while (oNodeSet.hasNext()) {
      						
      						long iResultNode = oNodeSet.next();
      						int iNode = ResultNode.getElementNode(iResultNode);
      						temp = Node.getData(iNode);
      						String[] tmpArray = temp.split("!");
      						String year = tmpArray[9].split("\\.")[0];
      						String month = tmpArray[9].split("\\.")[1];
      						insertOrUpdateBudgetEcc(year,month,tmpArray[6],tmpArray[5],tmpArray[11],tmpArray[7]);
      						Node.delete(iNode);
      						iNode = 0;
      					}
      				}
      			}
      		} finally {
      			Node.delete(response);
      			response = 0;
      		}
             return true;
         	
         }

      
    
    public static void insertOrUpdateBudgetEcc(String year,String month,String costcenter ,String subject_code,String budget,String projectCode){
    	BPC_BUDGET_ECC bpc_budget_ecc = getBpcBudgetEccInfoObject(year,month,costcenter,subject_code,projectCode);
    	if(bpc_budget_ecc==null){
    		insertBudgetEcc(year,month,costcenter,subject_code,budget,projectCode);
    	}else{
    		bpc_budget_ecc.setCOSTCENTER_CODE(costcenter);
    		bpc_budget_ecc.setBUDGET_STANDARD(Double.parseDouble(budget));
    		bpc_budget_ecc.setBUDGET_SURPLUS(Double.parseDouble(budget)-bpc_budget_ecc.getBUDGET_FREESE()-bpc_budget_ecc.getBUDGET_USED());
    		bpc_budget_ecc.setEXT1(projectCode);
    		bpc_budget_ecc.setSTATUS("1");
    	}
    }
    
    public static void insertBudgetEcc(String year,String month,String costcenter ,String subject_code,String budget,String projectCode){
    	BPC_BUDGET_ECC bpc_budget_ecc = new BPC_BUDGET_ECC();
    	bpc_budget_ecc.setYEAR(year);
    	bpc_budget_ecc.setMONTH(month);
    	bpc_budget_ecc.setCOSTCENTER_CODE(costcenter);
    	bpc_budget_ecc.setSUBJECT_CODE(subject_code);
    	bpc_budget_ecc.setSUBJECT_CODE_SAP(subject_code.substring(7, 15));
    	bpc_budget_ecc.setBUDGET_STANDARD(Double.parseDouble(budget));
    	bpc_budget_ecc.setBUDGET_SUM(Double.parseDouble(budget));
    	bpc_budget_ecc.setBUDGET_FREESE(0.0);
    	bpc_budget_ecc.setBUDGET_RATIO(0.0);
    	bpc_budget_ecc.setBUDGET_SURPLUS(Double.parseDouble(budget));
    	bpc_budget_ecc.setBUDGET_USED(0.0);
    	bpc_budget_ecc.setEXT1(projectCode);
    	bpc_budget_ecc.setSTATUS("1");
    }
    
 public static int getBudgetDimensionList(String strP_CC,String strTIME,String strP_ACCT) throws Exception{
    	
    	String Param1 ="<APPSET>LYF_BPC</APPSET><APP>LYF_PLANNING</APP>"
        + "<DIMENSIONS>CATEGORY!CUSTOMER_VENDOR!ITEM!JOB_LVL!PRO_CATEGORY!P_ACCT!P_CC!P_DATASRC!RPTCURRENCY!TIME!MEASURES</DIMENSIONS>";
    	String Param2 =   "<DimensionFilters><DimensionCode>MEASURES</DimensionCode><DimensionCodeValue>PERIODIC</DimensionCodeValue></DimensionFilters>"
    		            + "<DimensionFilters><DimensionCode>CATEGORY</DimensionCode><DimensionCodeValue>YZ00</DimensionCodeValue></DimensionFilters>"
    					+ "<DimensionFilters><DimensionCode>CUSTOMER_VENDOR</DimensionCode><DimensionCodeValue>V_NONE</DimensionCodeValue></DimensionFilters>"
    					+ "<DimensionFilters><DimensionCode>PRO_CATEGORY</DimensionCode><DimensionCodeValue>P_NONE</DimensionCodeValue></DimensionFilters>"
    					+ "<DimensionFilters><DimensionCode>ITEM</DimensionCode><DimensionCodeValue>DUMMY</DimensionCodeValue></DimensionFilters>"
    					+ "<DimensionFilters><DimensionCode>JOB_LVL</DimensionCode><DimensionCodeValue>DUMMY</DimensionCodeValue></DimensionFilters>"
    					+ "<DimensionFilters><DimensionCode>P_DATASRC</DimensionCode><DimensionCodeValue>D_NONE</DimensionCodeValue></DimensionFilters>";
    	
    	String root = "<param><Query>" +Param1 + "<DataFilters>" + Param2 + "</DataFilters></Query></param>";
		String item = "<DimensionFilters>" + "<DimensionCode/>" + "<DimensionCodeValue/>" + "</DimensionFilters>";
    	
		Document doc = new Document();
		int rootNode = doc.parseString(root);
		int queryNode = Node.getElement(rootNode, "Query");
		int listNode = Node.getElement(queryNode,"DataFilters");
		int itemNode = doc.parseString(item);
		
		int tempNode1 = Node.duplicate(itemNode);
		Node.setDataElement(tempNode1, "DimensionCode", "P_CC");
		Node.setDataElement(tempNode1, "DimensionCodeValue", strP_CC);
		Node.appendToChildren(tempNode1, listNode);
		
		int tempNode2 = Node.duplicate(itemNode);
		Node.setDataElement(tempNode2, "DimensionCode", "P_ACCT");
		Node.setDataElement(tempNode2, "DimensionCodeValue", strP_ACCT);
		Node.appendToChildren(tempNode2, listNode);
		
		int tempNode3 = Node.duplicate(itemNode);
		Node.setDataElement(tempNode3, "DimensionCode", "TIME");
		Node.setDataElement(tempNode3, "DimensionCodeValue", strTIME);
		Node.appendToChildren(tempNode3, listNode);
		
    	return rootNode;
    	
    }
    
 public static int getBudgetProjectDimensionList(String strP_CC,String strTIME,String strP_ACCT,String P_DATASRC) throws Exception{
 	
 	String Param1 ="<APPSET>LYF_BPC</APPSET><APP>LYF_PLANNING</APP>"
     + "<DIMENSIONS>CATEGORY!CUSTOMER_VENDOR!ITEM!JOB_LVL!PRO_CATEGORY!P_ACCT!P_CC!P_DATASRC!RPTCURRENCY!TIME!MEASURES</DIMENSIONS>";
 	String Param2 =   "<DimensionFilters><DimensionCode>MEASURES</DimensionCode><DimensionCodeValue>PERIODIC</DimensionCodeValue></DimensionFilters>"
 		            + "<DimensionFilters><DimensionCode>CATEGORY</DimensionCode><DimensionCodeValue>YZ00</DimensionCodeValue></DimensionFilters>"
 					+ "<DimensionFilters><DimensionCode>CUSTOMER_VENDOR</DimensionCode><DimensionCodeValue>V_NONE</DimensionCodeValue></DimensionFilters>"
 					+ "<DimensionFilters><DimensionCode>PRO_CATEGORY</DimensionCode><DimensionCodeValue>P_NONE</DimensionCodeValue></DimensionFilters>"
 					+ "<DimensionFilters><DimensionCode>ITEM</DimensionCode><DimensionCodeValue>YSHB_ZXXM</DimensionCodeValue></DimensionFilters>"
 					+ "<DimensionFilters><DimensionCode>JOB_LVL</DimensionCode><DimensionCodeValue>DUMMY</DimensionCodeValue></DimensionFilters>";
 	
 		String root = "<param><Query>" +Param1 + "<DataFilters>" + Param2 + "</DataFilters></Query></param>";
			String item = "<DimensionFilters>" + "<DimensionCode/>" + "<DimensionCodeValue/>" + "</DimensionFilters>";
 	
		Document doc = new Document();
		int rootNode = doc.parseString(root);
		int queryNode = Node.getElement(rootNode, "Query");
		int listNode = Node.getElement(queryNode,"DataFilters");
		int itemNode = doc.parseString(item);
		
		int tempNode1 = Node.duplicate(itemNode);
		Node.setDataElement(tempNode1, "DimensionCode", "P_CC");
		Node.setDataElement(tempNode1, "DimensionCodeValue", strP_CC);
		Node.appendToChildren(tempNode1, listNode);
		
		int tempNode2 = Node.duplicate(itemNode);
		Node.setDataElement(tempNode2, "DimensionCode", "P_ACCT");
		Node.setDataElement(tempNode2, "DimensionCodeValue", strP_ACCT);
		Node.appendToChildren(tempNode2, listNode);
		
		int tempNode3 = Node.duplicate(itemNode);
		Node.setDataElement(tempNode3, "DimensionCode", "TIME");
		Node.setDataElement(tempNode3, "DimensionCodeValue", strTIME);
		Node.appendToChildren(tempNode3, listNode);
		
		int tempNode4 = Node.duplicate(itemNode);
		Node.setDataElement(tempNode4, "DimensionCode", "P_DATASRC");
		Node.setDataElement(tempNode4, "DimensionCodeValue", P_DATASRC);
		Node.appendToChildren(tempNode4, listNode);
		
 	return rootNode;
 	
 }
 
 
    public static com.laiyifen.bpc.core.BPC_BUDGET_ECC getBpcBudgetEccInfoObject(String year, String month, String costcenter, String subjectcode,String porjectcode)
    {
    	String queryText = "select * from BPC_BUDGET_ECC where YEAR = '"+year+"' AND MONTH= '"+month+"' AND COSTCENTER_CODE= '"+costcenter +"' AND EXT1 = '"+porjectcode+"' ";
    	if(!"".equals(subjectcode)){
    		if(subjectcode.length()>8){
    			queryText += " AND SUBJECT_CODE = '"+subjectcode+"'";
    		}else{
    			queryText += " AND SUBJECT_CODE_SAP = '"+subjectcode+"'";
    		}
    	}
    
        QueryObject query = new QueryObject(queryText);
        query.setResultClass(BPC_BUDGET_ECC.class);
        return (BPC_BUDGET_ECC)query.getObject();
    }
    //调用function  合并budget
    public static String SycnBpcBudgetInitMerge(String year,String month){
    	String value = null;
    	StoredProcedure sp = new StoredProcedure("BPC_BUDGET_INIT");
    	sp.prepareCall("BPC_BUDGET_INIT(:PARAM1,:PARAM2)");
		//sp.setReturnParameter("RETURN_RESULT");
		sp.setParameter("PARAM1", year);
		sp.setParameter("PARAM2", month);
		sp.execute();
		//value = String.valueOf(sp.getBoolean("RESULT"));
		return value;
    }

}
