/*
  This class has been generated by the Code Generator
*/

package com.laiyifen.bpc.core;

import java.util.ArrayList;
import java.util.List;

import com.cordys.cpc.bsf.busobject.BsfContext;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.laiyifen.common.util.AssignmentUtils;


public class BPC_WORKFLOW extends BPC_WORKFLOWBase
{

	public BPC_WORKFLOW()
    {
        this((BusObjectConfig)null);
    }

    

	public BPC_WORKFLOW(BusObjectConfig config)
    {
        super(config);
    }

    public static String getBpcWorkflowByFormID(String tableName, String formID)
    {
    	String tmpRet = "";
    	BsfContext mycontext=AssignmentUtils.initBSF();
    	tmpRet = getWorkFlowByCondition(tableName, formID);
    	//tmpRet = BPC_WORKFLOW.getWorkFlowInfo("BM08", 38000, tableName, formID,"");
    	AssignmentUtils.release(mycontext);
    	return tmpRet;
    }
    
    public static String getWorkFlowByCondition(String tableName, String formID) {
    	String is_approval = ""; 	//是否有报批
    	String is_overBudget = "";	//是否超预算
    	String is_first =""; 		//是否首款
    	String workflow_code = "";	//业务编码，选择流程
    	double total_amount =0.0;	//报销金额
    	String userLevel = "";		//起草人级别
    	if("BPC_FEE".equals(tableName)){
    		BPC_FEE bpc_fee = BPC_FEE.getBpcFeeObjectByFormID(formID);
    		is_approval = bpc_fee.getIS_APPROVAL()==null?"0":bpc_fee.getIS_APPROVAL();
    		workflow_code = BPC_BUDGET_WORKFLOW_MAPPING.getBpcWorkflowCodeByBusiness(bpc_fee.getBUSINESS_CODE(), bpc_fee.getBUSINESS_TYPE());
    		is_first = bpc_fee.getIS_FIRSTEND();
    		if(bpc_fee.getBUDGET_SURPLUS()< 0){
    			is_overBudget="1";	//超预算
    		}else{
    			is_overBudget="0";	//预算内
    		}
    		total_amount = bpc_fee.getTOTAL_AMOUNT();
    		userLevel = bpc_fee.getUSER_RANK();
    	}   
    	if("BPC_LOAN".equals(tableName)){
    		BPC_LOAN bpc_loan = BPC_LOAN.getBpcLoanObjectByFormID(formID);
    		is_approval = bpc_loan.getIS_APPROVAL()==null?"0":bpc_loan.getIS_APPROVAL();
    		workflow_code = BPC_BUDGET_WORKFLOW_MAPPING.getBpcWorkflowCodeByBusiness(bpc_loan.getBUSINESS_CODE(), bpc_loan.getBUSINESS_TYPE());
    		if(bpc_loan.getBUDGET_SURPLUS()< 0){
    			is_overBudget="1";	//超预算
    		}else{
    			is_overBudget="0";	//预算内
    		}
    		total_amount = bpc_loan.getTOTAL_AMOUNT();
    		userLevel = bpc_loan.getUSER_RANK();
    	}
    	if("BPC_TRAVEL".equals(tableName)){
    		BPC_TRAVEL bpc_travel = BPC_TRAVEL.getBpcTravelObjectByFormID(formID);
    		is_approval = bpc_travel.getIS_APPROVAL()==null?"0":bpc_travel.getIS_APPROVAL();
    		workflow_code = BPC_BUDGET_WORKFLOW_MAPPING.getBpcWorkflowCodeByBusiness(bpc_travel.getBUSINESS_CODE(), bpc_travel.getBUSINESS_TYPE());
    		if(bpc_travel.getBUDGET_SURPLUS()< 0){
    			is_overBudget="1";	//超预算
    		}else{
    			is_overBudget="0";	//预算内
    		}
    		total_amount = bpc_travel.getTOTAL_AMOUNT();
    		userLevel = bpc_travel.getUSER_RANK();
    	}
    	if("BPC_VERIFICATION".equals(tableName)){
    		BPC_VERIFICATION bpc_verification = BPC_VERIFICATION.getBpcVerificationObjectByFormID(formID);
    		is_approval = "0";
    		workflow_code = BPC_BUDGET_WORKFLOW_MAPPING.getBpcWorkflowCodeByBusiness(bpc_verification.getBUSINESS_CODE(), bpc_verification.getBUSINESS_TYPE());
    		is_overBudget="0";	//预算内
    		total_amount = 0.0;
    		userLevel = bpc_verification.getUSER_RANK();
    	}
		return getWorkFlowInfo(workflow_code, total_amount, is_approval, is_overBudget ,is_first ,userLevel,tableName);
    }
    
    public static String getWorkFlowInfo(String workflow_code,double total_amount,String is_approval,
    		String is_overBudget,String is_first,String userLevel,String tableName){
    	
    	int controlNode = 0;		//是否节点控制
    	int controlAmount = 1;		//是否金额控制,1需要金额控制，0取消金额控制
    	int controlSWCL = 2;		//市外差旅控制,2直接领导 ,1及领导审批+01起草人=2个环节
    	String t_is_approval = null;
    	String t_is_overBudget = null;
    	String wfInfo="";
    	String wfInfoAll = "";
    	List wfAllList=new ArrayList();	//所有可以上下行节点信息
    	String wfInfoCA = "";			//出纳、会计
    	String lastNode = ""; 			//最后一个节点，为方便上行、下行
    	
    	
    	BusObjectIterator<BPC_WORKFLOW> workflowObjects = getWorkFlowList(workflow_code);
    	if(workflowObjects!=null){
    		while(workflowObjects.hasMoreElements()){
    			BPC_WORKFLOW workflowObject = workflowObjects.nextElement();
    			//第一个环节，读取信息,报批文档控制，超预算控制
    			if("1".equals(workflowObject.getIS_STARTEND())){
    				t_is_approval = workflowObject.getIS_APPROVAL();
    				t_is_overBudget = workflowObject.getIS_BUDGET();
    				//无需报批文档，上行。且有报批文档,减少审批环节
    				if("2".equals(t_is_approval)){
    					if("1".equals(is_approval)){
    						controlNode = controlNode-1;
    					}
    				}
    				//无需报批文档，上行，取消金额限制。且有报批文档,减少审批环节
    				if("3".equals(t_is_approval)){
    					if("1".equals(is_approval)){
    					controlNode = controlNode-1;
    					controlAmount = 0;
    					}
    				}
    				//需要超预算，超预算.增加审批环节
    				if("1".equals(t_is_overBudget) ){
    					if("1".equals(is_overBudget)){
    						controlNode = controlNode + 1;
    					}
    				}
    			}
    			
    			//遍历所有的符合条件的节点，不包括出纳，会计CA
    			
    			String is_control = workflowObject.getIS_NODE_CONTROL()==null?"":workflowObject.getIS_NODE_CONTROL();
    			//组装
    			String tmp = "NC="+workflowObject.getNODE_ID() ;
    			if(workflowObject.getSPEC_NODE_ROLE_DN()!=null && !"".equals(workflowObject.getSPEC_NODE_ROLE_DN().trim())){
    				tmp +=",ROLE=" + workflowObject.getSPEC_NODE_ROLE_DN();
    			}
    			tmp +=";";
    			//不包括出纳，会计CA
    			if((is_control.indexOf("CA") < 0  )){
    				
    				if(is_control.indexOf("UD")> -1)
    					wfAllList.add(tmp);
        			
        			//判断状态
        			if(!"1".equals(workflowObject.getNODE_STATUS())){
        				continue;
        			}
        			
        			//职级判断
    				if(userLevel!=null && !"".equals(userLevel)){
    					if(workflowObject.getIS_NODE_LEVEL()!=null && !"".equals(workflowObject.getIS_NODE_LEVEL())){
	    					if(!compareUserLevel(workflowObject.getIS_NODE_LEVEL(),userLevel)){
	    						continue;
	    					}
    					}
    				}
        			
    				//金额判断，如果有金额条件
    				if(workflowObject.getAMOUNT_CONDITIONS()!=null && !"".equals(workflowObject.getAMOUNT_CONDITIONS())){
    					if( controlAmount == 1){
        					if (total_amount<Double.parseDouble(workflowObject.getAMOUNT_CONDITIONS())){
        						continue;
        					}
        				}else{
        					continue;
        				}
    				}
    				
    				//首款
    				if(!"1".equals(is_first)){
	    				if(is_control.indexOf("first") > -1){
	    					continue;
	    				}
    				}
    				//市外差旅流程特殊处理。Z101
    				//直接上级领导审批，超预算上行一级。多余的过滤
    				if("BPC_TRAVEL".equals(tableName)){
    					if(controlSWCL<=0 && is_control.indexOf("UD")> -1){
    						continue;
    					}
    					controlSWCL = controlSWCL-1;
    				}
    				
    				//=======
    				if(is_control.indexOf("UD")> -1)
    					lastNode = workflowObject.getNODE_ID();
	    			wfInfo += tmp;
	    		//CA组装
    			}else{
    				if(!"1".equals(workflowObject.getNODE_STATUS())){
        				continue;
        			}
    				wfInfoCA +=tmp;
    			}
    		}
    		
    		//下行，删除最后一个节点
    		if(controlNode < 0){
    			wfInfo = com.laiyifen.bpc.util.BpcCommonUtil.getBPCWorkFlowDeleteNode(wfInfo, lastNode);
    		}
    		//上行，添加一个节点，并不上出纳，会计
    		if(controlNode > 0) {
    			String addnode = "";	//添加的节点
    			for(int i=0 ;i<wfAllList.size();i++){
    				if(wfAllList.get(i).toString().indexOf("NC="+lastNode)> -1){
    					addnode = wfAllList.get(i+1).toString();
    					break;
    				}
    			}
    			wfInfo += addnode;
    		}
    		// 加上出纳，会计
    		wfInfo += wfInfoCA;
    	}
    	return wfInfo;
    }
   
    public static BusObjectIterator<BPC_WORKFLOW> getWorkFlowList(String workflowcode){
   	 	String queryText = "select * from \"BPC_WORKFLOW\" where \"WORKFLOW_CODE\" = :WORKFLOW_CODE order by node_id";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("WORKFLOW_CODE", "BPC_WORKFLOW.WORKFLOW_CODE", QueryObject.PARAM_STRING, workflowcode);//NOPMD
        query.setResultClass(BPC_WORKFLOW.class);
        return query.getObjects();
    }
    
    public static boolean compareUserLevel(String level1,String level2){
    	boolean ret = false;
    	int L1 = Integer.parseInt(level1.substring(1));
    	int L2 = Integer.parseInt(level2.substring(1));
    	if(L1 > L2){
    		ret = true;
    	}
		return ret;
    }
    
}
