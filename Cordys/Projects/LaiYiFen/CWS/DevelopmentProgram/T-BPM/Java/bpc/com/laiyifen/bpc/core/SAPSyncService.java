/*
  This class has been generated by the Code Generator
*/

package com.laiyifen.bpc.core;

import java.util.List;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.eibus.xml.nom.Document;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.NodeSet;
import com.eibus.xml.xpath.ResultNode;
import com.eibus.xml.xpath.XPath;
import com.eibus.xml.xpath.XPathMetaInfo;
import com.laiyifen.bpc.util.BpcCommonUtil;
import com.laiyifen.common.ConnectorManager;


public class SAPSyncService extends SAPSyncServiceBase
{
	
	public static final String BPC_SAP_NAMESPACE = "http://schemas.cordys.com/tbpm/sapbpc";
	
	
    public SAPSyncService()
    {
        this((BusObjectConfig)null);
    }

    public SAPSyncService(BusObjectConfig config)
    {
        super(config);
    }

    public static boolean SyncBpcFeeToSAP(String operationType, String formID) throws Exception
    {
        // TODO implement body
    	boolean ret = false;
    	String organization = BSF.getOrganization();
  		String workspaceID = "__Organization Staging__";
  		int params = getBpcFeeSAPDimensionList(formID);
  		String s2 = Node.writeToString(params, false);
  		int response = ConnectorManager._callSoapMethod(organization,
  				BPC_SAP_NAMESPACE, "ZIFFI_CREATE_DOCUMENT", null,null,params);
  		String s1 = Node.writeToString(response, false);
  		try {
   			if (response > 0) { 
   				String E_BELNR = Node.getData(Node.getElement(response, "E_BELNR"));
   				String E_GJAHR = Node.getData(Node.getElement(response, "E_GJAHR"));
   				String E_MESSAGE = Node.getData(Node.getElement(response, "E_MESSAGE"));
   				String E_MSGTY =Node.getData(Node.getElement(response, "E_MSGTY"));
   				
   				BPC_FEE.updateBpcFeeObjectBySAPReturn(formID,E_BELNR,E_GJAHR, E_MESSAGE, E_MSGTY);
   				
	   			if("S".equals(E_MSGTY)){
	   				ret = true;
	   			} 
   			}
   		} finally {
   			Node.delete(response);
   			response = 0;
   		}
		return ret;
    }
    
    public static boolean SyncBpcLoanToSAP(String operationType, String formID) throws Exception
    {
        // TODO implement body
    	boolean ret = false;
    	String organization = BSF.getOrganization();
  		String workspaceID = "__Organization Staging__";
  		int params = getBpcLoanSAPDimensionList(formID);
  		String s2 = Node.writeToString(params, false);
  		int response = ConnectorManager._callSoapMethod(organization,
  				BPC_SAP_NAMESPACE, "ZIFFI_CREATE_DOCUMENT", null,null,params);
  		String s1 = Node.writeToString(response, false);
  		try {
   			if (response > 0) { 
   				String E_BELNR = Node.getData(Node.getElement(response, "E_BELNR"));
   				String E_GJAHR = Node.getData(Node.getElement(response, "E_GJAHR"));
   				String E_MESSAGE = Node.getData(Node.getElement(response, "E_MESSAGE"));
   				String E_MSGTY =Node.getData(Node.getElement(response, "E_MSGTY"));
   				
   				BPC_LOAN.updateBpcLoanObjectBySAPReturn(formID,E_BELNR,E_GJAHR, E_MESSAGE, E_MSGTY);
   				
	   			if("S".equals(E_MSGTY)){
	   				ret = true;
	   			} 
   			}
   		} finally {
   			Node.delete(response);
   			response = 0;
   		}
		return ret;
    }
    
    
    public static boolean SyncBpcVerificationToSAP(String operationType, String formID) throws Exception
    {
        // TODO implement body
    	boolean ret = false;
    	String organization = BSF.getOrganization();
  		String workspaceID = "__Organization Staging__";
  		int params = getBpcVerificationSAPDimensionList(formID);
  		String s2 = Node.writeToString(params, false);
  		int response = ConnectorManager._callSoapMethod(organization,
  				BPC_SAP_NAMESPACE, "ZIFFI_CREATE_DOCUMENT", null,null,params);
  		String s1 = Node.writeToString(response, false);
  		try {
   			if (response > 0) { 
   				String E_BELNR = Node.getData(Node.getElement(response, "E_BELNR"));
   				String E_GJAHR = Node.getData(Node.getElement(response, "E_GJAHR"));
   				String E_MESSAGE = Node.getData(Node.getElement(response, "E_MESSAGE"));
   				String E_MSGTY =Node.getData(Node.getElement(response, "E_MSGTY"));
   				
   				BPC_VERIFICATION.updateBpcVerificationObjectBySAPReturn(formID,E_BELNR,E_GJAHR, E_MESSAGE, E_MSGTY);
   				
	   			if("S".equals(E_MSGTY)){
	   				ret = true;
	   			} 
   			}
   		} finally {
   			Node.delete(response);
   			response = 0;
   		}
		return ret;
    }
    
    public static boolean SyncBpcTravelToSAP(String operationType, String formID) throws Exception
    {
        // TODO implement body
    	boolean ret = false;
    	String organization = BSF.getOrganization();
  		String workspaceID = "__Organization Staging__";
  		int params = getBpcTravelSAPDimensionList(formID);
  		String s2 = Node.writeToString(params, false);
  		int response = ConnectorManager._callSoapMethod(organization,
  				BPC_SAP_NAMESPACE, "ZIFFI_CREATE_DOCUMENT", null,null,params);
  		String s1 = Node.writeToString(response, false);
  		try {
   			if (response > 0) { 
   				String E_BELNR = Node.getData(Node.getElement(response, "E_BELNR"));
   				String E_GJAHR = Node.getData(Node.getElement(response, "E_GJAHR"));
   				String E_MESSAGE = Node.getData(Node.getElement(response, "E_MESSAGE"));
   				String E_MSGTY =Node.getData(Node.getElement(response, "E_MSGTY"));
   				
   				BPC_TRAVEL.updateBpcTravelObjectBySAPReturn(formID,E_BELNR,E_GJAHR, E_MESSAGE, E_MSGTY);
   				
	   			if("S".equals(E_MSGTY)){
	   				ret = true;
	   			} 
   			}
   		} finally {
   			Node.delete(response);
   			response = 0;
   		}
		return ret;
    }
    

    public static BusObjectIterator<com.laiyifen.bpc.core.SAPSyncService> getSAPSyncServiceObjects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }

    public void onInsert()
    {
    }

    public void onUpdate()
    {
    }

    public void onDelete()
    {
    }
    
    // *******************************************************
    // FEE XML request
    public static int getBpcFeeSAPDimensionList(String formID) throws Exception{
    	
    	//CompositeBPCFeeInfo compositeBpcFeeObject = CompositeBPCFeeInfo.getCompositeBPCFeeInfoObject(formID);
    	String root = "<ZIFFI_CREATE_DOCUMENT xmlns=\"http://schemas.cordys.com/tbpm/sapbpc\"><I_BKTXT/><I_BLART/><I_BLDAT/><I_BUDAT/><I_BUKRS/><I_CXFLAG/><I_KEY/><I_USERID/><I_WAERS/><I_XBLNR/><T_ITEM/><T_BELNR/></ZIFFI_CREATE_DOCUMENT>";
		String t_ITEM = "<item><NEWBS/><NEWKO/><WRBTR/><KOSTL/><PRCTR/><RSTGR/><XREF1/><ZUONR/><SGTXT/></item>";
		String t_BELNR = "<item><BELNR/><GJAHR/></item>";
		
		Document doc = new Document();
		int rootNode = doc.parseString(root);
		int titemNode = Node.getElement(rootNode,"T_ITEM");
		int tbelnrNode = Node.getElement(rootNode,"T_BELNR");
		int itemNode = doc.parseString(t_ITEM);
		int belnrNode = doc.parseString(t_BELNR);
		
		BPC_FEE bpcFee = BPC_FEE.getBpcFeeObjectByFormID(formID);
		Node.setDataElement(rootNode,"I_BKTXT","AAA");			//凭证抬头文本\说明性文字
		Node.setDataElement(rootNode,"I_BLART","A");		//凭证类型\A表示费用报销单，B表示借款单，C表示借款冲销单
		Node.setDataElement(rootNode,"I_BLDAT",
				BpcCommonUtil.DateFormatToString(bpcFee.getPETITION_DATE(), "yyyyMMdd"));	//付款日子
		Node.setDataElement(rootNode,"I_BUDAT",
				BpcCommonUtil.DateFormatToString(null, "yyyyMMdd"));	//过账日期
		Node.setDataElement(rootNode,"I_BUKRS",bpcFee.getCOMPANY_CODE());		//公司代码
		Node.setDataElement(rootNode,"I_CXFLAG","");
		Node.setDataElement(rootNode,"I_KEY",formID);		//唯一吗
		Node.setDataElement(rootNode,"I_USERID",bpcFee.getUSER_CODE());		//工号
		Node.setDataElement(rootNode,"I_WAERS","CNY");
		Node.setDataElement(rootNode,"I_XBLNR",BpcCommonUtil.DoubleFormatToString(bpcFee.getRECODE_COUNT()));
		
		//BPC_AUDIT
    	BPC_AUDIT bpcAudit = BPC_AUDIT.getBpcAuditObjectByFormID(formID);
    	
    	//借
		//bpc_fee_item
    	BusObjectIterator<BPC_FEE_ITEM> bpc_fee_itemObjects = BPC_FEE_ITEM.getBpcFeeItemObjectsByFormID(formID);
    	BusObjectIterator<BPC_FEEDEP> bpc_feedepObjects = BPC_FEEDEP.getBpcFeedepObjectsByFormID(formID);
    	if (bpc_fee_itemObjects != null) {
    		while(bpc_fee_itemObjects.hasMoreElements()){
    			BPC_FEE_ITEM bpcFeeItem = bpc_fee_itemObjects.nextElement();
    			//费用承当本部门
    			if("1".equals(bpcFee.getIS_FEE_SELFDEP())){
	    			int tmpNode1 = Node.duplicate(itemNode);
	    			Node.setDataElement(tmpNode1, "NEWBS", "40");							//记账码
	    			Node.setDataElement(tmpNode1, "NEWKO", bpcFeeItem.getSUBJECT_CODE());	//科目
	    			Node.setDataElement(tmpNode1, "WRBTR", bpcFeeItem.getRMBSUM());			//金额
	    			Node.setDataElement(tmpNode1, "KOSTL", bpcFee.getCOSTCENTER_CODE());	//成本中心\费用科目必填
	    			Node.setDataElement(tmpNode1, "PRCTR", "");								//利润中心\现金科目必填
	    			Node.setDataElement(tmpNode1, "RSTGR", "");								//现金流量码\现金科目必填
	    			Node.setDataElement(tmpNode1, "XREF1", bpcFeeItem.getINVOICE());		//发票后续处理(有、无)
	    			Node.setDataElement(tmpNode1, "ZUONR", "");								//分配编号
	    			Node.setDataElement(tmpNode1, "SGTXT", bpcFeeItem.getSUMMARY());		//摘要
	    			Node.appendToChildren(tmpNode1, titemNode);
    			}
    			//费用承当其他部门
    			else {
    				if(bpc_feedepObjects != null){
    					BusObjectIterator<BPC_FEEDEP> bpc_feedepObjects1=bpc_feedepObjects.elements(true);
    					while(bpc_feedepObjects1.hasMoreElements()){
    						BPC_FEEDEP bpc_feedep = bpc_feedepObjects1.nextElement();
    						if(bpcFeeItem.getSUBJECT_CODE().equals(bpc_feedep.getSUBJECT_CODE())){
    							int tmpNode1 = Node.duplicate(itemNode);
    			    			Node.setDataElement(tmpNode1, "NEWBS", "40");							//记账码
    			    			Node.setDataElement(tmpNode1, "NEWKO", bpc_feedep.getSUBJECT_CODE());	//科目
    			    			Node.setDataElement(tmpNode1, "WRBTR", String.valueOf(bpc_feedep.getSUM()));			//金额
    			    			Node.setDataElement(tmpNode1, "KOSTL", bpc_feedep.getDEP_CODE());	//成本中心\费用科目必填
    			    			Node.setDataElement(tmpNode1, "PRCTR", "");								//利润中心\现金科目必填
    			    			Node.setDataElement(tmpNode1, "RSTGR", "");								//现金流量码\现金科目必填
    			    			Node.setDataElement(tmpNode1, "XREF1", bpcFeeItem.getINVOICE());		//发票后续处理(有、无)
    			    			Node.setDataElement(tmpNode1, "ZUONR", "");								//分配编号
    			    			Node.setDataElement(tmpNode1, "SGTXT", bpcFeeItem.getSUMMARY());		//摘要
    			    			Node.appendToChildren(tmpNode1, titemNode);
    						}
    					}
    				}
    			}
    		}
    	}
    	//贷
    	int tmpNode1 = Node.duplicate(itemNode);
		Node.setDataElement(tmpNode1, "NEWBS", "50");
		Node.setDataElement(tmpNode1, "NEWKO", getBpcBankSubjectByType(bpcFee.getCOLLECTION_MODE(),bpcFee.getCOMPANY_CODE()));
		Node.setDataElement(tmpNode1, "WRBTR", BpcCommonUtil.DoubleFormatToString(bpcFee.getTOTAL_AMOUNT()));
		Node.setDataElement(tmpNode1, "KOSTL", "");
		Node.setDataElement(tmpNode1, "PRCTR", bpcFee.getPROFIT_CENTER());//bpcFee.getPROFIT_CENTER()); 10000
		Node.setDataElement(tmpNode1, "RSTGR", bpcAudit.getFINANCE_CASHCODE());//bpcAudit.getFINANCE_CASHCODE());"F05"
		Node.setDataElement(tmpNode1, "XREF1", "");
		Node.setDataElement(tmpNode1, "ZUONR", "");
		Node.setDataElement(tmpNode1, "SGTXT", "摘要");
		Node.appendToChildren(tmpNode1, titemNode);
		
		List list = BPC_LOAN.getBpcClearAccountListByLoanID(bpcFee.getLOANBILL_CODE());
		if(list != null) {
			for(int i=0;i<list.size();i++){
				String[] arrtmp = ((String) list.get(i)).split(",");
				int tmpNode2 = Node.duplicate(belnrNode);
				Node.setDataElement(tmpNode2, "BELNR", arrtmp[0]);			//借款清帐对应凭证号
				Node.setDataElement(tmpNode2, "GJAHR", arrtmp[1]);
				Node.appendToChildren(tmpNode2, tbelnrNode);
			}
		}
		//String s = Node.writeToString(rootNode, false);
		return rootNode;
    	
    }

    // *******************************************************
    // LOAN XML request
    public static int getBpcLoanSAPDimensionList(String formID) throws Exception{
    	
    	String root = "<ZIFFI_CREATE_DOCUMENT xmlns=\"http://schemas.cordys.com/tbpm/sapbpc\"><I_BKTXT/><I_BLART/><I_BLDAT/><I_BUDAT/><I_BUKRS/><I_CXFLAG/><I_KEY/><I_USERID/><I_WAERS/><I_XBLNR/><T_ITEM/><T_BELNR/></ZIFFI_CREATE_DOCUMENT>";
		String t_ITEM = "<item><NEWBS/><NEWKO/><WRBTR/><KOSTL/><PRCTR/><RSTGR/><XREF1/><ZUONR/><SGTXT/></item>";
		String t_BELNR = "<item><BELNR/><GJAHR/></item>";
		
		Document doc = new Document();
		int rootNode = doc.parseString(root);
		int titemNode = Node.getElement(rootNode,"T_ITEM");
		int tbelnrNode = Node.getElement(rootNode,"T_BELNR");
		int itemNode = doc.parseString(t_ITEM);
		int belnrNode = doc.parseString(t_BELNR);
		
		BPC_LOAN bpcLoan = BPC_LOAN.getBpcLoanObjectByFormID(formID);
		Node.setDataElement(rootNode,"I_BKTXT","LOAN");			//凭证抬头文本\说明性文字
		Node.setDataElement(rootNode,"I_BLART","B");		//凭证类型\A表示费用报销单，B表示借款单，C表示借款冲销单
		Node.setDataElement(rootNode,"I_BLDAT",
				BpcCommonUtil.DateFormatToString(bpcLoan.getPETITION_DATE(), "yyyyMMdd"));	//付款日子
		Node.setDataElement(rootNode,"I_BUDAT",
				BpcCommonUtil.DateFormatToString(null, "yyyyMMdd"));	//过账日期
		Node.setDataElement(rootNode,"I_BUKRS",bpcLoan.getCOMPANY_CODE());		//公司代码
		Node.setDataElement(rootNode,"I_CXFLAG","");
		Node.setDataElement(rootNode,"I_KEY",formID);		//唯一吗
		Node.setDataElement(rootNode,"I_USERID",bpcLoan.getUSER_CODE());		//工号
		Node.setDataElement(rootNode,"I_WAERS","CNY");
		Node.setDataElement(rootNode,"I_XBLNR",BpcCommonUtil.DoubleFormatToString(bpcLoan.getRECODE_COUNT()));
		
		//BPC_AUDIT
    	BPC_AUDIT bpcAudit = BPC_AUDIT.getBpcAuditObjectByFormID(formID);
    	
    	//借
		//bpc_loan_item
    	BusObjectIterator<BPC_LOAN_ITEM> bpc_loan_itemObjects = BPC_LOAN_ITEM.getBpcLoanItemObjectsByFormID(formID);
    	if (bpc_loan_itemObjects != null) {
    		while(bpc_loan_itemObjects.hasMoreElements()){
    			BPC_LOAN_ITEM bpcLoanItem = bpc_loan_itemObjects.nextElement();
    			int tmpNode1 = Node.duplicate(itemNode);
    			Node.setDataElement(tmpNode1, "NEWBS", "01");							//记账码
    			Node.setDataElement(tmpNode1, "NEWKO", bpcLoan.getUSER_CODE());	//科目
    			Node.setDataElement(tmpNode1, "WRBTR", String.valueOf(bpcLoanItem.getRMBSUM()));			//金额
    			Node.setDataElement(tmpNode1, "KOSTL", bpcLoan.getCOSTCENTER_CODE());	//成本中心\费用科目必填
    			Node.setDataElement(tmpNode1, "PRCTR", "");								//利润中心\现金科目必填
    			Node.setDataElement(tmpNode1, "RSTGR", "");								//现金流量码\现金科目必填
    			Node.setDataElement(tmpNode1, "XREF1", "");		//发票后续处理(有、无)
    			Node.setDataElement(tmpNode1, "ZUONR", "个人借款");								//分配编号
    			Node.setDataElement(tmpNode1, "SGTXT", bpcLoanItem.getCONTENT());		//摘要
    			Node.appendToChildren(tmpNode1, titemNode);
    		}
    	}
    	//贷
    	int tmpNode1 = Node.duplicate(itemNode);
		Node.setDataElement(tmpNode1, "NEWBS", "50");
		Node.setDataElement(tmpNode1, "NEWKO", getBpcBankSubjectByType(bpcLoan.getCOLLECTION_MODE(),bpcLoan.getCOMPANY_CODE()));
		Node.setDataElement(tmpNode1, "WRBTR", BpcCommonUtil.DoubleFormatToString(bpcLoan.getTOTAL_AMOUNT()));
		Node.setDataElement(tmpNode1, "KOSTL", "");
		Node.setDataElement(tmpNode1, "PRCTR", bpcLoan.getPROFIT_CENTER());//bpcLoan.getPROFIT_CENTER()); 10000
		Node.setDataElement(tmpNode1, "RSTGR", bpcAudit.getFINANCE_CASHCODE());//bpcAudit.getFINANCE_CASHCODE());"F05"
		Node.setDataElement(tmpNode1, "XREF1", "");
		Node.setDataElement(tmpNode1, "ZUONR", "");
		Node.setDataElement(tmpNode1, "SGTXT", "摘要");
		Node.appendToChildren(tmpNode1, titemNode);
		
		int tmpNode2 = Node.duplicate(belnrNode);
		Node.setDataElement(tmpNode2, "BELNR", "");			//借款清帐对应凭证号
		Node.setDataElement(tmpNode2, "GJAHR", "");
		Node.appendToChildren(tmpNode2, tbelnrNode);

		//String s = Node.writeToString(rootNode, false);
		return rootNode;
    	
    }
    
    // *******************************************************
    // VERIFICATION XML request
    public static int getBpcVerificationSAPDimensionList(String formID) throws Exception{
    	
    	String root = "<ZIFFI_CREATE_DOCUMENT xmlns=\"http://schemas.cordys.com/tbpm/sapbpc\"><I_BKTXT/><I_BLART/><I_BLDAT/><I_BUDAT/><I_BUKRS/><I_CXFLAG/><I_KEY/><I_USERID/><I_WAERS/><I_XBLNR/><T_ITEM/><T_BELNR/></ZIFFI_CREATE_DOCUMENT>";
		String t_ITEM = "<item><NEWBS/><NEWKO/><WRBTR/><KOSTL/><PRCTR/><RSTGR/><XREF1/><ZUONR/><SGTXT/></item>";
		String t_BELNR = "<item><BELNR/><GJAHR/></item>";
		
		Document doc = new Document();
		int rootNode = doc.parseString(root);
		int titemNode = Node.getElement(rootNode,"T_ITEM");
		int tbelnrNode = Node.getElement(rootNode,"T_BELNR");
		int itemNode = doc.parseString(t_ITEM);
		int belnrNode = doc.parseString(t_BELNR);
		
		BPC_VERIFICATION bpcVerification = BPC_VERIFICATION.getBpcVerificationObjectByFormID(formID);
		Node.setDataElement(rootNode,"I_BKTXT","VERIFICATION");			//凭证抬头文本\说明性文字
		Node.setDataElement(rootNode,"I_BLART","C");		//凭证类型\A表示费用报销单，B表示借款单，C表示借款冲销单
		Node.setDataElement(rootNode,"I_BLDAT",
				BpcCommonUtil.DateFormatToString(bpcVerification.getPETITION_DATE(), "yyyyMMdd"));	//付款日子
		Node.setDataElement(rootNode,"I_BUDAT",
				BpcCommonUtil.DateFormatToString(null, "yyyyMMdd"));	//过账日期
		Node.setDataElement(rootNode,"I_BUKRS",bpcVerification.getCOMPANY_CODE());		//公司代码
		Node.setDataElement(rootNode,"I_CXFLAG","");
		Node.setDataElement(rootNode,"I_KEY",formID);		//唯一吗
		Node.setDataElement(rootNode,"I_USERID",bpcVerification.getUSER_CODE());		//工号
		Node.setDataElement(rootNode,"I_WAERS","CNY");
		Node.setDataElement(rootNode,"I_XBLNR",BpcCommonUtil.DoubleFormatToString(bpcVerification.getRECODE_COUNT()));
		
		//BPC_AUDIT
    	BPC_AUDIT bpcAudit = BPC_AUDIT.getBpcAuditObjectByFormID(formID);
    	
    	//借
		//bpc_verification_item
    	BusObjectIterator<BPC_VERIFICATION_ITEM> bpc_verification_itemObjects = BPC_VERIFICATION_ITEM.getBpcVerificationItemObjectsByFormID(formID);
    	if (bpc_verification_itemObjects != null) {
    		while(bpc_verification_itemObjects.hasMoreElements()){
    			BPC_VERIFICATION_ITEM bpcVerificationItem = bpc_verification_itemObjects.nextElement();
    			int tmpNode1 = Node.duplicate(itemNode);
    			Node.setDataElement(tmpNode1, "NEWBS", "11");							//记账码
    			Node.setDataElement(tmpNode1, "NEWKO", bpcVerification.getUSER_CODE());	//科目
    			Node.setDataElement(tmpNode1, "WRBTR", String.valueOf(bpcVerificationItem.getRMBSUM()));			//金额
    			Node.setDataElement(tmpNode1, "KOSTL", bpcVerification.getCOSTCENTER_CODE());	//成本中心\费用科目必填
    			Node.setDataElement(tmpNode1, "PRCTR", "");								//利润中心\现金科目必填
    			Node.setDataElement(tmpNode1, "RSTGR", "");								//现金流量码\现金科目必填
    			Node.setDataElement(tmpNode1, "XREF1", "");		//发票后续处理(有、无)
    			Node.setDataElement(tmpNode1, "ZUONR", "个人借款");								//分配编号
    			Node.setDataElement(tmpNode1, "SGTXT", bpcVerificationItem.getSUMMARY());		//摘要
    			Node.appendToChildren(tmpNode1, titemNode);
    		}
    	}
    	//贷
    	int tmpNode1 = Node.duplicate(itemNode);
		Node.setDataElement(tmpNode1, "NEWBS", "40");
		Node.setDataElement(tmpNode1, "NEWKO", getBpcBankSubjectByType(bpcVerification.getCOLLECTION_MODE(),bpcVerification.getCOMPANY_CODE()));
		Node.setDataElement(tmpNode1, "WRBTR", 
				BpcCommonUtil.DoubleFormatToString(bpcVerification.getPAY_SUM()));
		Node.setDataElement(tmpNode1, "KOSTL", "");
		Node.setDataElement(tmpNode1, "PRCTR", bpcVerification.getPROFIT_CENTER());//bpcLoan.getPROFIT_CENTER()); 10000
		Node.setDataElement(tmpNode1, "RSTGR", bpcAudit.getFINANCE_CASHCODE());//bpcAudit.getFINANCE_CASHCODE());"F05"
		Node.setDataElement(tmpNode1, "XREF1", "");
		Node.setDataElement(tmpNode1, "ZUONR", "");
		Node.setDataElement(tmpNode1, "SGTXT", "摘要");
		Node.appendToChildren(tmpNode1, titemNode);
		
		List list = BPC_LOAN.getBpcClearAccountListByLoanID(bpcVerification.getLOANBILL_CODE());
		if(list != null) {
			for(int i=0;i<list.size();i++){
				String[] arrtmp = ((String) list.get(i)).split(",");
				int tmpNode2 = Node.duplicate(belnrNode);
				Node.setDataElement(tmpNode2, "BELNR", arrtmp[0]);			//借款清帐对应凭证号
				Node.setDataElement(tmpNode2, "GJAHR", arrtmp[1]);
				Node.appendToChildren(tmpNode2, tbelnrNode);
			}
		}
		//String s = Node.writeToString(rootNode, false);
		return rootNode;
    }
    
 // *******************************************************
    // TRAVEL XML request
    public static int getBpcTravelSAPDimensionList(String formID) throws Exception{
    	
    	String root = "<ZIFFI_CREATE_DOCUMENT xmlns=\"http://schemas.cordys.com/tbpm/sapbpc\"><I_BKTXT/><I_BLART/><I_BLDAT/><I_BUDAT/><I_BUKRS/><I_CXFLAG/><I_KEY/><I_USERID/><I_WAERS/><I_XBLNR/><T_ITEM/><T_BELNR/></ZIFFI_CREATE_DOCUMENT>";
		String t_ITEM = "<item><NEWBS/><NEWKO/><WRBTR/><KOSTL/><PRCTR/><RSTGR/><XREF1/><ZUONR/><SGTXT/></item>";
		String t_BELNR = "<item><BELNR/><GJAHR/></item>";
		
		Document doc = new Document();
		int rootNode = doc.parseString(root);
		int titemNode = Node.getElement(rootNode,"T_ITEM");
		int tbelnrNode = Node.getElement(rootNode,"T_BELNR");
		int itemNode = doc.parseString(t_ITEM);
		int belnrNode = doc.parseString(t_BELNR);
		
		BPC_TRAVEL bpcTravel = BPC_TRAVEL.getBpcTravelObjectByFormID(formID);
		Node.setDataElement(rootNode,"I_BKTXT","TRAVEL");			//凭证抬头文本\说明性文字
		Node.setDataElement(rootNode,"I_BLART","C");		//凭证类型\A表示费用报销单，B表示借款单，C表示借款冲销单
		Node.setDataElement(rootNode,"I_BLDAT",
				BpcCommonUtil.DateFormatToString(bpcTravel.getPETITION_DATE(), "yyyyMMdd"));	//付款日子
		Node.setDataElement(rootNode,"I_BUDAT",
				BpcCommonUtil.DateFormatToString(null, "yyyyMMdd"));	//过账日期
		Node.setDataElement(rootNode,"I_BUKRS",bpcTravel.getCOMPANY_CODE());		//公司代码
		Node.setDataElement(rootNode,"I_CXFLAG","");
		Node.setDataElement(rootNode,"I_KEY",formID);		//唯一吗
		Node.setDataElement(rootNode,"I_USERID",bpcTravel.getUSER_CODE());		//工号
		Node.setDataElement(rootNode,"I_WAERS","CNY");
		Node.setDataElement(rootNode,"I_XBLNR",BpcCommonUtil.DoubleFormatToString(bpcTravel.getRECODE_COUNT()));
		
		//BPC_AUDIT
    	BPC_AUDIT bpcAudit = BPC_AUDIT.getBpcAuditObjectByFormID(formID);
    	
    	//借
		//bpc_travel_item
    	BusObjectIterator<BPC_TRAVEL_ITEM> bpc_travel_itemObjects = BPC_TRAVEL_ITEM.getBpcTravelItemObjectsByFormID(formID);
    	BusObjectIterator<BPC_FEEDEP> bpc_feedepObjects = BPC_FEEDEP.getBpcFeedepObjectsByFormID(formID);

		//费用承当本部门
		if("1".equals(bpcTravel.getIS_FEE_SELFDEP())){
			int tmpNode1 = Node.duplicate(itemNode);
			Node.setDataElement(tmpNode1, "NEWBS", "40");							//记账码
			Node.setDataElement(tmpNode1, "NEWKO", "66011002");	//科目
			Node.setDataElement(tmpNode1, "WRBTR", BpcCommonUtil.DoubleFormatToString(bpcTravel.getTOTAL_AMOUNT()));			//金额
			Node.setDataElement(tmpNode1, "KOSTL", bpcTravel.getCOSTCENTER_CODE());	//成本中心\费用科目必填
			Node.setDataElement(tmpNode1, "PRCTR", "");								//利润中心\现金科目必填
			Node.setDataElement(tmpNode1, "RSTGR", "");								//现金流量码\现金科目必填
			Node.setDataElement(tmpNode1, "XREF1", "有");		//发票后续处理(有、无)
			Node.setDataElement(tmpNode1, "ZUONR", "交通费");								//分配编号
			Node.setDataElement(tmpNode1, "SGTXT", "市外差旅费");		//摘要
			Node.appendToChildren(tmpNode1, titemNode);
		}
		//费用承当其他部门
    	else {
			if(bpc_feedepObjects != null){
				while (bpc_feedepObjects.hasMoreElements()){
					BPC_FEEDEP bpc_feedep = bpc_feedepObjects.nextElement();
					int tmpNode1 = Node.duplicate(itemNode);
					Node.setDataElement(tmpNode1, "NEWBS", "40");							//记账码
					Node.setDataElement(tmpNode1, "NEWKO", "66011002");	//科目
					Node.setDataElement(tmpNode1, "WRBTR", BpcCommonUtil.DoubleFormatToString(bpc_feedep.getSUM()));			//金额
					Node.setDataElement(tmpNode1, "KOSTL", bpcTravel.getCOSTCENTER_CODE());	//成本中心\费用科目必填
					Node.setDataElement(tmpNode1, "PRCTR", "");								//利润中心\现金科目必填
					Node.setDataElement(tmpNode1, "RSTGR", "");								//现金流量码\现金科目必填
					Node.setDataElement(tmpNode1, "XREF1", "有");		//发票后续处理(有、无)
					Node.setDataElement(tmpNode1, "ZUONR", "交通费");								//分配编号
					Node.setDataElement(tmpNode1, "SGTXT", "市外差旅费");		//摘要
					Node.appendToChildren(tmpNode1, titemNode);
				}
			}
    	}
    	
    	//贷
    	int tmpNode1 = Node.duplicate(itemNode);
		Node.setDataElement(tmpNode1, "NEWBS", "50");
		Node.setDataElement(tmpNode1, "NEWKO", getBpcBankSubjectByType(bpcTravel.getCOLLECTION_MODE(),bpcTravel.getCOMPANY_CODE()));
		Node.setDataElement(tmpNode1, "WRBTR", BpcCommonUtil.DoubleFormatToString(bpcTravel.getTOTAL_AMOUNT()));
		Node.setDataElement(tmpNode1, "KOSTL", "");
		Node.setDataElement(tmpNode1, "PRCTR", bpcTravel.getPROFIT_CENTER());//bpcLoan.getPROFIT_CENTER()); 10000
		Node.setDataElement(tmpNode1, "RSTGR", bpcAudit.getFINANCE_CASHCODE());//bpcAudit.getFINANCE_CASHCODE());"F05"
		Node.setDataElement(tmpNode1, "XREF1", "");
		Node.setDataElement(tmpNode1, "ZUONR", "");
		Node.setDataElement(tmpNode1, "SGTXT", "摘要");
		Node.appendToChildren(tmpNode1, titemNode);
		
		List list = BPC_LOAN.getBpcClearAccountListByLoanID(bpcTravel.getLOANBILL_CODE());
		if(list != null) {
			for(int i=0;i<list.size();i++){
				String[] arrtmp = ((String) list.get(i)).split(",");
				int tmpNode2 = Node.duplicate(belnrNode);
				Node.setDataElement(tmpNode2, "BELNR", arrtmp[0]);			//借款清帐对应凭证号
				Node.setDataElement(tmpNode2, "GJAHR", arrtmp[1]);
				Node.appendToChildren(tmpNode2, tbelnrNode);
			}
		}
		//String s = Node.writeToString(rootNode, false);
		return rootNode;
    }
    
    public static String getBpcBankSubjectByType(String Type,String companyCode){
    	String strTemp = "";
    	if("1".equals(Type)){
    		strTemp = "10010100";
    	}else if("2".equals(Type)){
    		strTemp = BPC_BANK_SUBJECT.getBpcBankSubjectByCode(companyCode);
    	}
		return strTemp;
    }
}
