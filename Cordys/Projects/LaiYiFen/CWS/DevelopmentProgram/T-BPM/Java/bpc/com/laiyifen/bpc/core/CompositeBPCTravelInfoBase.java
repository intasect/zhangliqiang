/*
  This class has been generated by the Code Generator
*/

package com.laiyifen.bpc.core;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.classinfo.ClassInfo;
import com.cordys.cpc.bsf.classinfo.RelationInfo_Composite;


public abstract class CompositeBPCTravelInfoBase extends com.cordys.cpc.bsf.busobject.CustomBusObject
{
    // tags used in the XML document
    private final static String REL_APPROVAL_HISTORY = "AGGR:APPROVAL_HISTORY";
    private final static String REL_ATTACHMENT = "AGGR:ATTACHMENT";
    private final static String REL_BPC_AUDIT = "AGGR:BPC_AUDIT";
    private final static String REL_BPC_TRAVEL = "AGGR:BPC_TRAVEL";
    private final static String REL_BPC_TRAVEL_ITEM = "AGGR:BPC_TRAVEL_ITEM";
    private static ClassInfo s_classInfo = null;
    public static ClassInfo _getClassInfo()//NOPMD framework ensures this is thread safe
    {
        if ( s_classInfo == null )//NOPMD
        {
            s_classInfo = newClassInfo(CompositeBPCTravelInfo.class);
            s_classInfo.setUIDElements(new String[]{});
            {
                RelationInfo_Composite ri = new RelationInfo_Composite(REL_APPROVAL_HISTORY);
                ri.setName("APPROVAL_HISTORY");
                ri.setMultiOcc(true);
                ri.setRelatedClass(com.laiyifen.common.core.APPROVAL_HISTORY.class);
                s_classInfo.addRelationInfo(ri);
            }
            {
                RelationInfo_Composite ri = new RelationInfo_Composite(REL_ATTACHMENT);
                ri.setName("ATTACHMENT");
                ri.setMultiOcc(true);
                ri.setRelatedClass(com.laiyifen.common.core.ATTACHMENT.class);
                s_classInfo.addRelationInfo(ri);
            }
            {
                RelationInfo_Composite ri = new RelationInfo_Composite(REL_BPC_AUDIT);
                ri.setName("BPC_AUDIT");
                ri.setMultiOcc(false);
                ri.setRelatedClass(com.laiyifen.bpc.core.BPC_AUDIT.class);
                s_classInfo.addRelationInfo(ri);
            }
            {
                RelationInfo_Composite ri = new RelationInfo_Composite(REL_BPC_TRAVEL);
                ri.setName("BPC_TRAVEL");
                ri.setMultiOcc(false);
                ri.setRelatedClass(com.laiyifen.bpc.core.BPC_TRAVEL.class);
                s_classInfo.addRelationInfo(ri);
            }
            {
                RelationInfo_Composite ri = new RelationInfo_Composite(REL_BPC_TRAVEL_ITEM);
                ri.setName("BPC_TRAVEL_ITEM");
                ri.setMultiOcc(true);
                ri.setRelatedClass(com.laiyifen.bpc.core.BPC_TRAVEL_ITEM.class);
                s_classInfo.addRelationInfo(ri);
            }
        }
        return s_classInfo;
    }

    public CompositeBPCTravelInfoBase(BusObjectConfig config)
    {
        super(config);
    }

    public BusObjectIterator<com.laiyifen.common.core.APPROVAL_HISTORY> getAPPROVAL_HISTORYObjects()
    {
        return getMultiRelationObjects(REL_APPROVAL_HISTORY);
    }

    public com.laiyifen.common.core.APPROVAL_HISTORY addAPPROVAL_HISTORYObject(com.laiyifen.common.core.APPROVAL_HISTORY a_APPROVAL_HISTORY)
    {
        return (com.laiyifen.common.core.APPROVAL_HISTORY)_getMultiRelation(REL_APPROVAL_HISTORY, true).addObject(a_APPROVAL_HISTORY);
    }

    public void removeAPPROVAL_HISTORYObject(com.laiyifen.common.core.APPROVAL_HISTORY a_APPROVAL_HISTORY)
    {
        _getMultiRelation(REL_APPROVAL_HISTORY, true).removeObject(a_APPROVAL_HISTORY);
    }

    public BusObjectIterator<com.laiyifen.common.core.ATTACHMENT> getATTACHMENTObjects()
    {
        return getMultiRelationObjects(REL_ATTACHMENT);
    }

    public com.laiyifen.common.core.ATTACHMENT addATTACHMENTObject(com.laiyifen.common.core.ATTACHMENT a_ATTACHMENT)
    {
        return (com.laiyifen.common.core.ATTACHMENT)_getMultiRelation(REL_ATTACHMENT, true).addObject(a_ATTACHMENT);
    }

    public void removeATTACHMENTObject(com.laiyifen.common.core.ATTACHMENT a_ATTACHMENT)
    {
        _getMultiRelation(REL_ATTACHMENT, true).removeObject(a_ATTACHMENT);
    }

    public BPC_AUDIT getBPC_AUDITObject()
    {
        return (BPC_AUDIT)getSingleRelationObject(REL_BPC_AUDIT);
    }

    public BPC_AUDIT setBPC_AUDITObject(BPC_AUDIT a_BPC_AUDIT)
    {
        return(BPC_AUDIT)_getSingleRelation(REL_BPC_AUDIT, true).setLocalObject(a_BPC_AUDIT);
    }

    public BPC_TRAVEL getBPC_TRAVELObject()
    {
        return (BPC_TRAVEL)getSingleRelationObject(REL_BPC_TRAVEL);
    }

    public BPC_TRAVEL setBPC_TRAVELObject(BPC_TRAVEL a_BPC_TRAVEL)
    {
        return(BPC_TRAVEL)_getSingleRelation(REL_BPC_TRAVEL, true).setLocalObject(a_BPC_TRAVEL);
    }

    public BusObjectIterator<BPC_TRAVEL_ITEM> getBPC_TRAVEL_ITEMObjects()
    {
        return getMultiRelationObjects(REL_BPC_TRAVEL_ITEM);
    }

    public BPC_TRAVEL_ITEM addBPC_TRAVEL_ITEMObject(BPC_TRAVEL_ITEM a_BPC_TRAVEL_ITEM)
    {
        return (BPC_TRAVEL_ITEM)_getMultiRelation(REL_BPC_TRAVEL_ITEM, true).addObject(a_BPC_TRAVEL_ITEM);
    }

    public void removeBPC_TRAVEL_ITEMObject(BPC_TRAVEL_ITEM a_BPC_TRAVEL_ITEM)
    {
        _getMultiRelation(REL_BPC_TRAVEL_ITEM, true).removeObject(a_BPC_TRAVEL_ITEM);
    }



}
