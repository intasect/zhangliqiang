/*
  This class has been generated by the Code Generator
*/

package com.laiyifen.bpc.core;

import java.util.Vector;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.event.AfterCommitObjectEvent;
import com.cordys.cpc.bsf.util.ObjectHelper;
import com.laiyifen.bpc.util.BPCUtil;
import com.laiyifen.bpc.util.BpcCommonUtil;
import com.laiyifen.common.core.APPROVAL_HISTORY;
import com.laiyifen.common.core.ATTACHMENT;
import com.laiyifen.common.util.BusObjectHelper;


public class CompositeBPCTravelInfo extends CompositeBPCTravelInfoBase
{
	private BPC_TRAVEL bpc_travel = null ;
	private BPC_TRAVEL_ITEM bpc_travel_item = null;
	private Vector<BPC_TRAVEL_ITEM> bpc_travel_items = new Vector<BPC_TRAVEL_ITEM>();
	private BPC_AUDIT bpc_audit = null ;
	private APPROVAL_HISTORY approvalHistoryObject = null;
	private Vector<APPROVAL_HISTORY> approvalHistorys = new Vector<APPROVAL_HISTORY>();
	private ATTACHMENT attachment = null;
	private Vector<ATTACHMENT> attachments = new Vector<ATTACHMENT>();
	
    public CompositeBPCTravelInfo()
    {
        this((BusObjectConfig)null);
    }

    public CompositeBPCTravelInfo(BusObjectConfig config)
    {
        super(config);
    }

    public static BusObjectIterator<com.laiyifen.bpc.core.CompositeBPCTravelInfo> getCompositeBPCTravelInfoObjects(String formID, com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }
    
    public static com.laiyifen.bpc.core.CompositeBPCTravelInfo getCompositeBPCTravelInfoObject(String formID)
    {
    	CompositeBPCTravelInfo compositeBPCTravelInfoobject = new CompositeBPCTravelInfo();
    	//BPC_TRAVEL
    	BPC_TRAVEL bpcTravelObject = BPC_TRAVEL.getBpcTravelObjectByFormID(formID);
    	compositeBPCTravelInfoobject.setBPC_TRAVELObject(bpcTravelObject);
    	//BPC_AUDIT  
    	BPC_AUDIT bpcAuditObject = BPC_AUDIT.getBpcAuditObjectByFormID(formID);
    	compositeBPCTravelInfoobject.setBPC_AUDITObject(bpcAuditObject);
    	//BPC_TRAVEL_ITEM
    	BusObjectIterator<BPC_TRAVEL_ITEM> iterBpctravelitem = BPC_TRAVEL_ITEM.getBpcTravelItemObjectsByFormID(formID);
    	if (iterBpctravelitem != null) {
    		while (iterBpctravelitem.hasMoreElements()) {
    			BPC_TRAVEL_ITEM bpcTravelitem = (BPC_TRAVEL_ITEM) iterBpctravelitem.nextElement();
    			compositeBPCTravelInfoobject.addBPC_TRAVEL_ITEMObject(bpcTravelitem);
    		}
    	}
    	
    	//ATTACHMENT
    	BusObjectIterator<ATTACHMENT> attachmentObj = ATTACHMENT.getAttachment(formID);
    	if (attachmentObj != null) {
    		while (attachmentObj.hasMoreElements()) {
    			ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj.nextElement();
    			compositeBPCTravelInfoobject.addATTACHMENTObject(attachmentInfo);
    		}
    	}
    	//APPROVAL_HISTORY
    	BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = APPROVAL_HISTORY.getApprovalHistory(formID);
    	if (approvalHistoryObj != null) {
    		while (approvalHistoryObj.hasMoreElements()) {
    			APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj.nextElement();
    			compositeBPCTravelInfoobject.addAPPROVAL_HISTORYObject(approvalHistoryInfo);
    		}
    	}
    	
    	compositeBPCTravelInfoobject.makeTransient();
        return compositeBPCTravelInfoobject;
    }
    public void onInsert()
    {
    	BusObjectHelper.removeEmptyChildren(this);
    	//bpc_travel
    	BPC_TRAVEL bpcTravelObject = this.getBPC_TRAVELObject();
    	if (bpcTravelObject != null){
    		BPCUtil bpcUtil = new BPCUtil();
    		String formID = bpcUtil.setFormID(null);
    		
    		bpcTravelObject.setFORM_ID(formID);
    		bpcTravelObject.setRECODE_CODE(BpcCommonUtil.getSeqNumber("BPC_TRAVEL"));
    		bpc_travel = (BPC_TRAVEL)ObjectHelper.createObjectForInsert(bpcTravelObject, com.laiyifen.bpc.core.BPC_TRAVEL.class, false);
    		bpc_travel.insert();
    	}
    	//bpc_travel_item
    	BusObjectIterator<BPC_TRAVEL_ITEM> bpc_travel_itemObjects = this.getBPC_TRAVEL_ITEMObjects();
    	if (bpc_travel_itemObjects != null) {
    		while(bpc_travel_itemObjects.hasMoreElements()){
    			BPC_TRAVEL_ITEM bpc_travel_itemObject = bpc_travel_itemObjects.nextElement();
//    			bpc_travel_itemObject.setFORM_ID(bpcTravelObject.getFORM_ID());
    			bpc_travel_item = (BPC_TRAVEL_ITEM)ObjectHelper.createObjectForInsert(bpc_travel_itemObject, com.laiyifen.bpc.core.BPC_TRAVEL_ITEM.class, false) ;
    			bpc_travel_item.insert();
    			bpc_travel_items.add(bpc_travel_item);
    		}
    	}
    	BusObjectHelper.unlinkChildren(this, BPC_TRAVEL_ITEM.class);
    	
    	//BPC_AUDIT
    	BPC_AUDIT bpcAuditObject = this.getBPC_AUDITObject();
    	if (bpcAuditObject != null){
//    		bpcAuditObject.setFORM_ID(bpcTravelObject.getFORM_ID());
    		bpc_audit = (BPC_AUDIT)ObjectHelper.createObjectForInsert(bpcAuditObject, com.laiyifen.bpc.core.BPC_AUDIT.class, false);
    		bpc_audit.insert();
    	}
    	
    	BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this.getAPPROVAL_HISTORYObjects();
    	if (approvalHistoryObj != null) {
    		while (approvalHistoryObj.hasMoreElements()) {
    			APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj.nextElement();
    			approvalHistoryObject = (APPROVAL_HISTORY) ObjectHelper.createObjectForInsert(
    							approvalHistoryInfo,
    							com.laiyifen.common.core.APPROVAL_HISTORY.class,
    							false);
    			approvalHistoryObject.insert();
    			approvalHistorys.add(approvalHistoryObject);
    		}
    	}
    	
    	BusObjectHelper.unlinkChildren(this, APPROVAL_HISTORY.class);
    	
    	BusObjectIterator<ATTACHMENT> attachmentObj = this.getATTACHMENTObjects();
    	if (attachmentObj != null) {
    		while (attachmentObj.hasMoreElements()) {
    			ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj.nextElement();
    			attachment = (ATTACHMENT) ObjectHelper.createObjectForInsert(
    					attachmentInfo,
    					com.laiyifen.common.core.ATTACHMENT.class, false);
    			attachment.insert();
    			attachments.add(attachment);
    		}
    	}
    	BusObjectHelper.unlinkChildren(this, ATTACHMENT.class);
    }

    public void onUpdate()
    {
    	BusObjectHelper.removeEmptyChildren(this);
    	//bpc_travel
    	BPC_TRAVEL bpcTravelObject = this.getBPC_TRAVELObject();
    	if (bpcTravelObject != null){
    		bpc_travel = (BPC_TRAVEL)ObjectHelper.createObjectForUpdate(bpcTravelObject, com.laiyifen.bpc.core.BPC_TRAVEL.class, false);
    		bpc_travel.update();
    	}
    	//bpc_travel_item
    	BusObjectIterator<BPC_TRAVEL_ITEM> bpc_travel_itemObjects = this.getBPC_TRAVEL_ITEMObjects();
    	if (bpc_travel_itemObjects != null) {
    		while(bpc_travel_itemObjects.hasMoreElements()){
    			BPC_TRAVEL_ITEM bpc_travel_itemObject = bpc_travel_itemObjects.nextElement();
    			bpc_travel_item = (BPC_TRAVEL_ITEM)ObjectHelper.createObjectForUpdate(bpc_travel_itemObject, com.laiyifen.bpc.core.BPC_TRAVEL_ITEM.class, false) ;
    			bpc_travel_item.update();
    			bpc_travel_items.add(bpc_travel_item);
    		}
    	}
    	BusObjectHelper.unlinkChildren(this, BPC_TRAVEL_ITEM.class);
    	
    	//BPC_AUDIT
    	BPC_AUDIT bpcAuditObject = this.getBPC_AUDITObject();
    	if (bpcAuditObject != null){
    		bpc_audit = (BPC_AUDIT)ObjectHelper.createObjectForUpdate(bpcAuditObject, com.laiyifen.bpc.core.BPC_AUDIT.class, false);
    		bpc_audit.update();
    	}
    	
    	BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this.getAPPROVAL_HISTORYObjects();
    	if (approvalHistoryObj != null) {
    		while (approvalHistoryObj.hasMoreElements()) {
    			APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj.nextElement();
    			approvalHistoryObject = (APPROVAL_HISTORY) ObjectHelper
    					.createObjectForUpdate(
    							approvalHistoryInfo,
    							com.laiyifen.common.core.APPROVAL_HISTORY.class,
    							false);
    			approvalHistoryObject.update();
    			approvalHistorys.add(approvalHistoryObject);
    		}
    	}
    	
    	BusObjectHelper.unlinkChildren(this, APPROVAL_HISTORY.class);
    	
    	BusObjectIterator<ATTACHMENT> attachmentObj = this.getATTACHMENTObjects();
    	if (attachmentObj != null) {
    		while (attachmentObj.hasMoreElements()) {
    			ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj.nextElement();
    			attachment = (ATTACHMENT) ObjectHelper.createObjectForUpdate(
    					attachmentInfo,
    					com.laiyifen.common.core.ATTACHMENT.class, false);
    			attachment.update();
    			attachments.add(attachment);
    		}
    	}
    	
    	BusObjectHelper.unlinkChildren(this, ATTACHMENT.class);
    	
    }

    public void onDelete()
    {
    	BusObjectHelper.removeEmptyChildren(this);
    	//bpc_travel
    	BPC_TRAVEL bpcTravelObject = this.getBPC_TRAVELObject();
    	if (bpcTravelObject != null){
    		ObjectHelper.createObjectForDelete(bpcTravelObject, com.laiyifen.bpc.core.BPC_TRAVEL.class, true);
    	}
    	//bpc_travel_item
    	BusObjectIterator<BPC_TRAVEL_ITEM> bpc_travel_itemObjects = this.getBPC_TRAVEL_ITEMObjects();
    	if (bpc_travel_itemObjects != null) {
    		while(bpc_travel_itemObjects.hasMoreElements()){
    			BPC_TRAVEL_ITEM bpc_travel_itemObject = bpc_travel_itemObjects.nextElement();
    			ObjectHelper.createObjectForDelete(bpc_travel_itemObject, com.laiyifen.bpc.core.BPC_TRAVEL_ITEM.class, true) ;
    		}
    	}
//    	BusObjectHelper.unlinkChildren(this, BPC_TRAVEL_ITEM.class);
    	
    	//BPC_AUDIT
    	BPC_AUDIT bpcAuditObject = this.getBPC_AUDITObject();
    	if (bpcAuditObject != null){
    		ObjectHelper.createObjectForDelete(bpcAuditObject, com.laiyifen.bpc.core.BPC_AUDIT.class, true);
    	}
    	
    	BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this.getAPPROVAL_HISTORYObjects();
    	if (approvalHistoryObj != null) {
    		while (approvalHistoryObj.hasMoreElements()) {
    			APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj.nextElement();
    			ObjectHelper.createObjectForDelete(approvalHistoryInfo,
    					com.laiyifen.common.core.APPROVAL_HISTORY.class, true);
    		}
    	}
    	
    	BusObjectIterator<ATTACHMENT> attachmentObj = this.getATTACHMENTObjects();
    	if (attachmentObj != null) {
    		while (attachmentObj.hasMoreElements()) {
    			ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj.nextElement();
    			ObjectHelper.createObjectForDelete(attachmentInfo,
    					com.laiyifen.common.core.ATTACHMENT.class, true);
    		}
    	}
    }

    @Override
    public void onAfterCommit(AfterCommitObjectEvent event) {
    	// TODO Auto-generated method stub
    	super.onAfterCommit(event);
    	this.createResponseObject();
    	this.clear();
    }

    /**
     * Create the composite response object.
     */
    private void createResponseObject() {
    	// Persistable objects we can modify, so first make transient.
    	this.makeTransient();

    	if (bpc_travel != null) {
    		this.setBPC_TRAVELObject(bpc_travel);
    	}
    	if(bpc_audit!=null){
    		this.setBPC_AUDITObject(bpc_audit);
    	}

    	for (BPC_TRAVEL_ITEM bpc_travel_item : bpc_travel_items) {
    		this.addBPC_TRAVEL_ITEMObject(bpc_travel_item);
    	}
    	
    	for (APPROVAL_HISTORY approvalHistory : approvalHistorys) { 
    		this.addAPPROVAL_HISTORYObject(approvalHistory);
    	} 

    	for (ATTACHMENT attachment : attachments) {
    		this.addATTACHMENTObject(attachment);
    	}
    }

    	/**
    	 * Clears the local variables.
    	 */
    	private void clear() {
    		bpc_travel = null;
    		bpc_audit = null;
    		bpc_travel_items.clear();
    	}

}
