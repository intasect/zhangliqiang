/*
  This class has been generated by the Code Generator
*/

package com.laiyifen.bpc.core;

import java.util.Vector;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.event.AfterCommitObjectEvent;
import com.cordys.cpc.bsf.util.ObjectHelper;
import com.laiyifen.bpc.util.BPCUtil;
import com.laiyifen.bpc.util.BpcCommonUtil;
import com.laiyifen.common.core.APPROVAL_HISTORY;
import com.laiyifen.common.core.ATTACHMENT;
import com.laiyifen.common.util.BusObjectHelper;


public class CompositeBPCVerificationInfo extends CompositeBPCVerificationInfoBase
{
	private BPC_VERIFICATION bpc_verification = null ;
	private BPC_VERIFICATION_ITEM bpc_verification_item = null;
	private Vector<BPC_VERIFICATION_ITEM> bpc_verification_items = new Vector<BPC_VERIFICATION_ITEM>();
	private BPC_AUDIT bpc_audit = null ;
	private APPROVAL_HISTORY approvalHistoryObject = null;
	private Vector<APPROVAL_HISTORY> approvalHistorys = new Vector<APPROVAL_HISTORY>();
	private ATTACHMENT attachment = null;
	private Vector<ATTACHMENT> attachments = new Vector<ATTACHMENT>();
	
    public CompositeBPCVerificationInfo()
    {
        this((BusObjectConfig)null);
    }

    public CompositeBPCVerificationInfo(BusObjectConfig config)
    {
        super(config);
    }
    public static BusObjectIterator<com.laiyifen.bpc.core.CompositeBPCVerificationInfo> getCompositeBPCVerificationInfoObjects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }

    public static com.laiyifen.bpc.core.CompositeBPCVerificationInfo getCompositeBPCVerificationInfoObject(String formID)
    {
    CompositeBPCVerificationInfo compositeBPCVerificationInfoobject = new CompositeBPCVerificationInfo();
	//BPC_VERIFICATION
	BPC_VERIFICATION bpcVerificationObject = BPC_VERIFICATION.getBpcVerificationObjectByFormID(formID);
	compositeBPCVerificationInfoobject.setBPC_VERIFICATIONObject(bpcVerificationObject);
	//BPC_AUDIT  
	BPC_AUDIT bpcAuditObject = BPC_AUDIT.getBpcAuditObjectByFormID(formID);
	compositeBPCVerificationInfoobject.setBPC_AUDITObject(bpcAuditObject);
	//BPC_VERIFICATION_ITEM
	BusObjectIterator<BPC_VERIFICATION_ITEM> iterBpcverificationitem = BPC_VERIFICATION_ITEM.getBpcVerificationItemObjectsByFormID(formID);
	if (iterBpcverificationitem != null) {
		while (iterBpcverificationitem.hasMoreElements()) {
			BPC_VERIFICATION_ITEM bpcVerificationitem = (BPC_VERIFICATION_ITEM) iterBpcverificationitem.nextElement();
			compositeBPCVerificationInfoobject.addBPC_VERIFICATION_ITEMObject(bpcVerificationitem);
		}
	}
	
	//ATTACHMENT
	BusObjectIterator<ATTACHMENT> attachmentObj = ATTACHMENT.getAttachment(formID);
	if (attachmentObj != null) {
		while (attachmentObj.hasMoreElements()) {
			ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj.nextElement();
			compositeBPCVerificationInfoobject.addATTACHMENTObject(attachmentInfo);
		}
	}
	//APPROVAL_HISTORY
	BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = APPROVAL_HISTORY.getApprovalHistory(formID);
	if (approvalHistoryObj != null) {
		while (approvalHistoryObj.hasMoreElements()) {
			APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj.nextElement();
			compositeBPCVerificationInfoobject.addAPPROVAL_HISTORYObject(approvalHistoryInfo);
		}
	}
	
	compositeBPCVerificationInfoobject.makeTransient();
    return compositeBPCVerificationInfoobject;
}
public void onInsert()
{
	BusObjectHelper.removeEmptyChildren(this);
	//bpc_verification
	BPC_VERIFICATION bpcVerificationObject = this.getBPC_VERIFICATIONObject();
	if (bpcVerificationObject != null){
		BPCUtil bpcUtil = new BPCUtil();
		String formID = bpcUtil.setFormID(null);
		
		bpcVerificationObject.setFORM_ID(formID);
		bpcVerificationObject.setRECODE_CODE(BpcCommonUtil.getSeqNumber("BPC_VERIFICATION"));
		bpc_verification = (BPC_VERIFICATION)ObjectHelper.createObjectForInsert(bpcVerificationObject, com.laiyifen.bpc.core.BPC_VERIFICATION.class, false);
		bpc_verification.insert();
	}
	//bpc_verification_item
	BusObjectIterator<BPC_VERIFICATION_ITEM> bpc_verification_itemObjects = this.getBPC_VERIFICATION_ITEMObjects();
	if (bpc_verification_itemObjects != null) {
		while(bpc_verification_itemObjects.hasMoreElements()){
			BPC_VERIFICATION_ITEM bpc_verification_itemObject = bpc_verification_itemObjects.nextElement();
//			bpc_verification_itemObject.setFORM_ID(bpcVerificationObject.getFORM_ID());
			bpc_verification_item = (BPC_VERIFICATION_ITEM)ObjectHelper.createObjectForInsert(bpc_verification_itemObject, com.laiyifen.bpc.core.BPC_VERIFICATION_ITEM.class, false) ;
			bpc_verification_item.insert();
			bpc_verification_items.add(bpc_verification_item);
		}
	}
	BusObjectHelper.unlinkChildren(this, BPC_VERIFICATION_ITEM.class);
	
	//BPC_AUDIT
	BPC_AUDIT bpcAuditObject = this.getBPC_AUDITObject();
	if (bpcAuditObject != null){
//		bpcAuditObject.setFORM_ID(bpcVerificationObject.getFORM_ID());
		bpc_audit = (BPC_AUDIT)ObjectHelper.createObjectForInsert(bpcAuditObject, com.laiyifen.bpc.core.BPC_AUDIT.class, false);
		bpc_audit.insert();
	}
	
	BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this.getAPPROVAL_HISTORYObjects();
	if (approvalHistoryObj != null) {
		while (approvalHistoryObj.hasMoreElements()) {
			APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj.nextElement();
			approvalHistoryObject = (APPROVAL_HISTORY) ObjectHelper.createObjectForInsert(
							approvalHistoryInfo,
							com.laiyifen.common.core.APPROVAL_HISTORY.class,
							false);
			approvalHistoryObject.insert();
			approvalHistorys.add(approvalHistoryObject);
		}
	}
	
	BusObjectHelper.unlinkChildren(this, APPROVAL_HISTORY.class);
	
	BusObjectIterator<ATTACHMENT> attachmentObj = this.getATTACHMENTObjects();
	if (attachmentObj != null) {
		while (attachmentObj.hasMoreElements()) {
			ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj.nextElement();
			attachment = (ATTACHMENT) ObjectHelper.createObjectForInsert(
					attachmentInfo,
					com.laiyifen.common.core.ATTACHMENT.class, false);
			attachment.insert();
			attachments.add(attachment);
		}
	}
	BusObjectHelper.unlinkChildren(this, ATTACHMENT.class);
}

public void onUpdate()
{
	BusObjectHelper.removeEmptyChildren(this);
	//bpc_verification
	BPC_VERIFICATION bpcVerificationObject = this.getBPC_VERIFICATIONObject();
	if (bpcVerificationObject != null){
		bpc_verification = (BPC_VERIFICATION)ObjectHelper.createObjectForUpdate(bpcVerificationObject, com.laiyifen.bpc.core.BPC_VERIFICATION.class, false);
		bpc_verification.update();
	}
	//bpc_verification_item
	BusObjectIterator<BPC_VERIFICATION_ITEM> bpc_verification_itemObjects = this.getBPC_VERIFICATION_ITEMObjects();
	if (bpc_verification_itemObjects != null) {
		while(bpc_verification_itemObjects.hasMoreElements()){
			BPC_VERIFICATION_ITEM bpc_verification_itemObject = bpc_verification_itemObjects.nextElement();
			bpc_verification_item = (BPC_VERIFICATION_ITEM)ObjectHelper.createObjectForUpdate(bpc_verification_itemObject, com.laiyifen.bpc.core.BPC_VERIFICATION_ITEM.class, false) ;
			bpc_verification_item.update();
			bpc_verification_items.add(bpc_verification_item);
		}
	}
	BusObjectHelper.unlinkChildren(this, BPC_VERIFICATION_ITEM.class);
	
	//BPC_AUDIT
	BPC_AUDIT bpcAuditObject = this.getBPC_AUDITObject();
	if (bpcAuditObject != null){
		bpc_audit = (BPC_AUDIT)ObjectHelper.createObjectForUpdate(bpcAuditObject, com.laiyifen.bpc.core.BPC_AUDIT.class, false);
		bpc_audit.update();
	}
	
	BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this.getAPPROVAL_HISTORYObjects();
	if (approvalHistoryObj != null) {
		while (approvalHistoryObj.hasMoreElements()) {
			APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj.nextElement();
			approvalHistoryObject = (APPROVAL_HISTORY) ObjectHelper
					.createObjectForUpdate(
							approvalHistoryInfo,
							com.laiyifen.common.core.APPROVAL_HISTORY.class,
							false);
			approvalHistoryObject.update();
			approvalHistorys.add(approvalHistoryObject);
		}
	}
	
	BusObjectHelper.unlinkChildren(this, APPROVAL_HISTORY.class);
	
	BusObjectIterator<ATTACHMENT> attachmentObj = this.getATTACHMENTObjects();
	if (attachmentObj != null) {
		while (attachmentObj.hasMoreElements()) {
			ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj.nextElement();
			attachment = (ATTACHMENT) ObjectHelper.createObjectForUpdate(
					attachmentInfo,
					com.laiyifen.common.core.ATTACHMENT.class, false);
			attachment.update();
			attachments.add(attachment);
		}
	}
	
	BusObjectHelper.unlinkChildren(this, ATTACHMENT.class);
	
}

public void onDelete()
{
	BusObjectHelper.removeEmptyChildren(this);
	//bpc_verification
	BPC_VERIFICATION bpcVerificationObject = this.getBPC_VERIFICATIONObject();
	if (bpcVerificationObject != null){
		ObjectHelper.createObjectForDelete(bpcVerificationObject, com.laiyifen.bpc.core.BPC_VERIFICATION.class, true);
	}
	//bpc_verification_item
	BusObjectIterator<BPC_VERIFICATION_ITEM> bpc_verification_itemObjects = this.getBPC_VERIFICATION_ITEMObjects();
	if (bpc_verification_itemObjects != null) {
		while(bpc_verification_itemObjects.hasMoreElements()){
			BPC_VERIFICATION_ITEM bpc_verification_itemObject = bpc_verification_itemObjects.nextElement();
			ObjectHelper.createObjectForDelete(bpc_verification_itemObject, com.laiyifen.bpc.core.BPC_VERIFICATION_ITEM.class, true) ;
		}
	}
//	BusObjectHelper.unlinkChildren(this, BPC_VERIFICATION_ITEM.class);
	
	//BPC_AUDIT
	BPC_AUDIT bpcAuditObject = this.getBPC_AUDITObject();
	if (bpcAuditObject != null){
		ObjectHelper.createObjectForDelete(bpcAuditObject, com.laiyifen.bpc.core.BPC_AUDIT.class, true);
	}
	
	BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this.getAPPROVAL_HISTORYObjects();
	if (approvalHistoryObj != null) {
		while (approvalHistoryObj.hasMoreElements()) {
			APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj.nextElement();
			ObjectHelper.createObjectForDelete(approvalHistoryInfo,
					com.laiyifen.common.core.APPROVAL_HISTORY.class, true);
		}
	}
	
	BusObjectIterator<ATTACHMENT> attachmentObj = this.getATTACHMENTObjects();
	if (attachmentObj != null) {
		while (attachmentObj.hasMoreElements()) {
			ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj.nextElement();
			ObjectHelper.createObjectForDelete(attachmentInfo,
					com.laiyifen.common.core.ATTACHMENT.class, true);
		}
	}
}

@Override
public void onAfterCommit(AfterCommitObjectEvent event) {
	// TODO Auto-generated method stub
	super.onAfterCommit(event);
	this.createResponseObject();
	this.clear();
}

/**
 * Create the composite response object.
 */
private void createResponseObject() {
	// Persistable objects we can modify, so first make transient.
	this.makeTransient();

	if (bpc_verification != null) {
		this.setBPC_VERIFICATIONObject(bpc_verification);
	}
	if(bpc_audit!=null){
		this.setBPC_AUDITObject(bpc_audit);
	}

	for (BPC_VERIFICATION_ITEM bpc_verification_item : bpc_verification_items) {
		this.addBPC_VERIFICATION_ITEMObject(bpc_verification_item);
	}
	
	for (APPROVAL_HISTORY approvalHistory : approvalHistorys) { 
		this.addAPPROVAL_HISTORYObject(approvalHistory);
	} 

	for (ATTACHMENT attachment : attachments) {
		this.addATTACHMENTObject(attachment);
	}
}

	/**
	 * Clears the local variables.
	 */
	private void clear() {
		bpc_verification = null;
		bpc_audit = null;
		bpc_verification_items.clear();
	}
}
