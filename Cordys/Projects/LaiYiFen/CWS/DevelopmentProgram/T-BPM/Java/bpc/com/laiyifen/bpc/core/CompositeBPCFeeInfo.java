/*
  This class has been generated by the Code Generator
*/

package com.laiyifen.bpc.core;

import java.util.Vector;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.event.AfterCommitObjectEvent;
import com.cordys.cpc.bsf.query.Cursor;
import com.cordys.cpc.bsf.util.ObjectHelper;
import com.laiyifen.bpc.util.BPCUtil;
import com.laiyifen.bpc.util.BpcCommonUtil;
import com.laiyifen.common.core.APPROVAL_HISTORY;
import com.laiyifen.common.core.ATTACHMENT;
import com.laiyifen.common.util.BusObjectHelper;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.logger.Severity;


public class CompositeBPCFeeInfo extends CompositeBPCFeeInfoBase
{	
	private BPC_FEE bpc_fee = null ;
	private BPC_FEEDEP bpc_feedep = null;
	private Vector<BPC_FEEDEP> bpc_feedeps = new Vector<BPC_FEEDEP>();
	private BPC_FEE_ITEM bpc_fee_item = null;
	private Vector<BPC_FEE_ITEM> bpc_fee_items = new Vector<BPC_FEE_ITEM>();
	private BPC_AUDIT bpc_audit = null ;
	private APPROVAL_HISTORY approvalHistoryObject = null;
	private Vector<APPROVAL_HISTORY> approvalHistorys = new Vector<APPROVAL_HISTORY>();
	private ATTACHMENT attachment = null;
	private Vector<ATTACHMENT> attachments = new Vector<ATTACHMENT>();
	
	private static CordysLogger logger = CordysLogger.getCordysLogger(CompositeBPCFeeInfo.class);
	
    public CompositeBPCFeeInfo()
    {
        this((BusObjectConfig)null);
    }

    public CompositeBPCFeeInfo(BusObjectConfig config)
    {
        super(config);
    }

    public static com.laiyifen.bpc.core.CompositeBPCFeeInfo getCompositeBPCFeeInfoObject(String formID)
    {
    	 // TODO implement body
    	CompositeBPCFeeInfo compositeBPCFeeInfoobject = new CompositeBPCFeeInfo();
    	//BPC_FEE
    	BPC_FEE bpcFeeObject = BPC_FEE.getBpcFeeObjectByFormID(formID);
    	compositeBPCFeeInfoobject.setBPC_FEEObject(bpcFeeObject);
    	//BPC_AUDIT  
    	BPC_AUDIT bpcAuditObject = BPC_AUDIT.getBpcAuditObjectByFormID(formID);
    	compositeBPCFeeInfoobject.setBPC_AUDITObject(bpcAuditObject);
    	//BPC_FEEDEP
    	BusObjectIterator<BPC_FEEDEP> iterBpcfeedep = BPC_FEEDEP.getBpcFeedepObjectsByFormID(formID);
    	if (iterBpcfeedep != null) {
			while (iterBpcfeedep.hasMoreElements()) {
				BPC_FEEDEP bpcFeedep = (BPC_FEEDEP) iterBpcfeedep.nextElement();
				compositeBPCFeeInfoobject.addBPC_FEEDEPObject(bpcFeedep);
			}
		}
    	//BPC_FEE_ITEM
    	BusObjectIterator<BPC_FEE_ITEM> iterBpcfeeitem = BPC_FEE_ITEM.getBpcFeeItemObjectsByFormID(formID);
    	if (iterBpcfeeitem != null) {
			while (iterBpcfeeitem.hasMoreElements()) {
				BPC_FEE_ITEM bpcFeeitem = (BPC_FEE_ITEM) iterBpcfeeitem.nextElement();
				compositeBPCFeeInfoobject.addBPC_FEE_ITEMObject(bpcFeeitem);
			}
		}
    	
    	//ATTACHMENT
    	BusObjectIterator<ATTACHMENT> attachmentObj = ATTACHMENT.getAttachment(formID);
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj.nextElement();
				compositeBPCFeeInfoobject.addATTACHMENTObject(attachmentInfo);
			}
		}
		//APPROVAL_HISTORY
		BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = APPROVAL_HISTORY.getApprovalHistory(formID);
		if (approvalHistoryObj != null) {
			while (approvalHistoryObj.hasMoreElements()) {
				APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj.nextElement();
				compositeBPCFeeInfoobject.addAPPROVAL_HISTORYObject(approvalHistoryInfo);
			}
		}
    	
    	
    	compositeBPCFeeInfoobject.makeTransient();
        return compositeBPCFeeInfoobject;
    }

    public static BusObjectIterator<com.laiyifen.bpc.core.CompositeBPCFeeInfo> getCompositeBPCFeeInfoObjects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }

    public void onInsert()
    {
    	BusObjectHelper.removeEmptyChildren(this);
    	//bpc_fee
    	BPC_FEE bpcFeeObject = this.getBPC_FEEObject();
    	if (bpcFeeObject != null){
    		BPCUtil bpcUtil = new BPCUtil();
    		String formID = bpcUtil.setFormID(null);  
    		bpcFeeObject.setRECODE_CODE(BpcCommonUtil.getSeqNumber("BPC_FEE"));
    		bpcFeeObject.setFORM_ID(formID);
    		bpc_fee = (BPC_FEE)ObjectHelper.createObjectForInsert(bpcFeeObject, com.laiyifen.bpc.core.BPC_FEE.class, false);
    		bpc_fee.insert();
    	}
    	//bpc_feedep
    	BusObjectIterator<BPC_FEEDEP> bpc_feedepObjects = this.getBPC_FEEDEPObjects();
    	if (bpc_feedepObjects != null) {
    		while(bpc_feedepObjects.hasMoreElements()){
    			BPC_FEEDEP bpc_feedepObject = bpc_feedepObjects.nextElement();
//    			bpc_feedepObject.setFORM_ID(bpcFeeObject.getFORM_ID());
    			bpc_feedep = (BPC_FEEDEP)ObjectHelper.createObjectForInsert(bpc_feedepObject, com.laiyifen.bpc.core.BPC_FEEDEP.class, false) ;
    			bpc_feedep.insert();
    			bpc_feedeps.add(bpc_feedep);
    		}
    	}
    	BusObjectHelper.unlinkChildren(this, BPC_FEEDEP.class);
    	//bpc_fee_item
    	BusObjectIterator<BPC_FEE_ITEM> bpc_fee_itemObjects = this.getBPC_FEE_ITEMObjects();
    	if (bpc_fee_itemObjects != null) {
    		while(bpc_fee_itemObjects.hasMoreElements()){
    			BPC_FEE_ITEM bpc_fee_itemObject = bpc_fee_itemObjects.nextElement();
//    			bpc_fee_itemObject.setFORM_ID(bpcFeeObject.getFORM_ID());
    			bpc_fee_item = (BPC_FEE_ITEM)ObjectHelper.createObjectForInsert(bpc_fee_itemObject, com.laiyifen.bpc.core.BPC_FEE_ITEM.class, false) ;
    			bpc_fee_item.insert();
    			bpc_fee_items.add(bpc_fee_item);
    		}
    	}
    	BusObjectHelper.unlinkChildren(this, BPC_FEE_ITEM.class);
    	
    	//BPC_AUDIT
    	BPC_AUDIT bpcAuditObject = this.getBPC_AUDITObject();
    	if (bpcAuditObject != null){
//    		bpcAuditObject.setFORM_ID(bpcFeeObject.getFORM_ID());
    		bpc_audit = (BPC_AUDIT)ObjectHelper.createObjectForInsert(bpcAuditObject, com.laiyifen.bpc.core.BPC_AUDIT.class, false);
    		bpc_audit.insert();
    	}
    	
    	BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this.getAPPROVAL_HISTORYObjects();
		if (approvalHistoryObj != null) {
			while (approvalHistoryObj.hasMoreElements()) {
				APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj.nextElement();
				approvalHistoryObject = (APPROVAL_HISTORY) ObjectHelper.createObjectForInsert(
								approvalHistoryInfo,
								com.laiyifen.common.core.APPROVAL_HISTORY.class,
								false);
				approvalHistoryObject.insert();
				approvalHistorys.add(approvalHistoryObject);
			}
		}
		
		BusObjectHelper.unlinkChildren(this, APPROVAL_HISTORY.class);
		
		BusObjectIterator<ATTACHMENT> attachmentObj = this.getATTACHMENTObjects();
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj.nextElement();
				attachment = (ATTACHMENT) ObjectHelper.createObjectForInsert(
						attachmentInfo,
						com.laiyifen.common.core.ATTACHMENT.class, false);
				attachment.insert();
				attachments.add(attachment);
			}
		}
		BusObjectHelper.unlinkChildren(this, ATTACHMENT.class);
    }

    public void onUpdate()
    {
    	logger.log(Severity.ERROR, "======on update start======", null);
    	BusObjectHelper.removeEmptyChildren(this);
    	//bpc_fee
    	BPC_FEE bpcFeeObject = this.getBPC_FEEObject();
    	if (bpcFeeObject != null){
    		bpc_fee = (BPC_FEE)ObjectHelper.createObjectForUpdate(bpcFeeObject, com.laiyifen.bpc.core.BPC_FEE.class, false);
    		bpc_fee.update();
    	}
    	//bpc_feedep
    	BusObjectIterator<BPC_FEEDEP> bpc_feedepObjects = this.getBPC_FEEDEPObjects();
    	if (bpc_feedepObjects != null) {
    		while(bpc_feedepObjects.hasMoreElements()){
    			BPC_FEEDEP bpc_feedepObject = bpc_feedepObjects.nextElement();
    			logger.log(Severity.ERROR,"BPC_FEEDEP:" + bpc_feedepObject.toString(), null);
    			bpc_feedep = (BPC_FEEDEP)ObjectHelper.createObjectForUpdate(bpc_feedepObject, com.laiyifen.bpc.core.BPC_FEEDEP.class, false) ;
    			bpc_feedep.update();
    			bpc_feedeps.add(bpc_feedep);
    		}
    	}
    	BusObjectHelper.unlinkChildren(this, BPC_FEEDEP.class);
    	//bpc_fee_item
    	BusObjectIterator<BPC_FEE_ITEM> bpc_fee_itemObjects = this.getBPC_FEE_ITEMObjects();
    	if (bpc_fee_itemObjects != null) {
    		while(bpc_fee_itemObjects.hasMoreElements()){
    			BPC_FEE_ITEM bpc_fee_itemObject = bpc_fee_itemObjects.nextElement();
    			bpc_fee_item = (BPC_FEE_ITEM)ObjectHelper.createObjectForUpdate(bpc_fee_itemObject, com.laiyifen.bpc.core.BPC_FEE_ITEM.class, false) ;
    			bpc_fee_item.update();
    			bpc_fee_items.add(bpc_fee_item);
    		}
    	}
    	BusObjectHelper.unlinkChildren(this, BPC_FEE_ITEM.class);
    	
    	//BPC_AUDIT
    	BPC_AUDIT bpcAuditObject = this.getBPC_AUDITObject();
    	if (bpcAuditObject != null){
    		bpc_audit = (BPC_AUDIT)ObjectHelper.createObjectForUpdate(bpcAuditObject, com.laiyifen.bpc.core.BPC_AUDIT.class, false);
    		bpc_audit.update();
    	}
    	
		BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this.getAPPROVAL_HISTORYObjects();
		if (approvalHistoryObj != null) {
			while (approvalHistoryObj.hasMoreElements()) {
				APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj.nextElement();
				approvalHistoryObject = (APPROVAL_HISTORY) ObjectHelper
						.createObjectForUpdate(
								approvalHistoryInfo,
								com.laiyifen.common.core.APPROVAL_HISTORY.class,
								false);
				approvalHistoryObject.update();
				approvalHistorys.add(approvalHistoryObject);
			}
		}
		
		BusObjectHelper.unlinkChildren(this, APPROVAL_HISTORY.class);
		
		BusObjectIterator<ATTACHMENT> attachmentObj = this.getATTACHMENTObjects();
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj.nextElement();
				attachment = (ATTACHMENT) ObjectHelper.createObjectForUpdate(
						attachmentInfo,
						com.laiyifen.common.core.ATTACHMENT.class, false);
				attachment.update();
				attachments.add(attachment);
			}
		}
		
		BusObjectHelper.unlinkChildren(this, ATTACHMENT.class);
    	
    }

    public void onDelete()
    {
    	BusObjectHelper.removeEmptyChildren(this);
    	//bpc_fee
    	BPC_FEE bpcFeeObject = this.getBPC_FEEObject();
    	if (bpcFeeObject != null){
    		ObjectHelper.createObjectForDelete(bpcFeeObject, com.laiyifen.bpc.core.BPC_FEE.class, true);
    	}
    	//bpc_feedep
    	BusObjectIterator<BPC_FEEDEP> bpc_feedepObjects = this.getBPC_FEEDEPObjects();
    	if (bpc_feedepObjects != null) {
    		while(bpc_feedepObjects.hasMoreElements()){
    			BPC_FEEDEP bpc_feedepObject = bpc_feedepObjects.nextElement();
    			ObjectHelper.createObjectForDelete(bpc_feedepObject, com.laiyifen.bpc.core.BPC_FEEDEP.class, true) ;
    		}
    	}
//    	BusObjectHelper.unlinkChildren(this, BPC_FEEDEP.class);
    	//bpc_fee_item
    	BusObjectIterator<BPC_FEE_ITEM> bpc_fee_itemObjects = this.getBPC_FEE_ITEMObjects();
    	if (bpc_fee_itemObjects != null) {
    		while(bpc_fee_itemObjects.hasMoreElements()){
    			BPC_FEE_ITEM bpc_fee_itemObject = bpc_fee_itemObjects.nextElement();
    			ObjectHelper.createObjectForDelete(bpc_fee_itemObject, com.laiyifen.bpc.core.BPC_FEE_ITEM.class, true) ;
    		}
    	}
//    	BusObjectHelper.unlinkChildren(this, BPC_FEE_ITEM.class);
    	
    	//BPC_AUDIT
    	BPC_AUDIT bpcAuditObject = this.getBPC_AUDITObject();
    	if (bpcAuditObject != null){
    		ObjectHelper.createObjectForDelete(bpcAuditObject, com.laiyifen.bpc.core.BPC_AUDIT.class, true);
    	}
    	
    	BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this.getAPPROVAL_HISTORYObjects();
		if (approvalHistoryObj != null) {
			while (approvalHistoryObj.hasMoreElements()) {
				APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj.nextElement();
				ObjectHelper.createObjectForDelete(approvalHistoryInfo,
						com.laiyifen.common.core.APPROVAL_HISTORY.class, true);
			}
		}
		
		BusObjectIterator<ATTACHMENT> attachmentObj = this.getATTACHMENTObjects();
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj.nextElement();
				ObjectHelper.createObjectForDelete(attachmentInfo,
						com.laiyifen.common.core.ATTACHMENT.class, true);
			}
		}
    }
    
    
    @Override
	public void onAfterCommit(AfterCommitObjectEvent event) {
		// TODO Auto-generated method stub
    	super.onAfterCommit(event);
    	this.createResponseObject();
		this.clear();
	}

	/**
	 * Create the composite response object.
	 */
	private void createResponseObject() {
		// Persistable objects we can modify, so first make transient.
		this.makeTransient();

		if (bpc_fee != null) {
			this.setBPC_FEEObject(bpc_fee);
		}
		if(bpc_audit!=null){
			this.setBPC_AUDITObject(bpc_audit);
		}

		for (BPC_FEEDEP bpc_feedep : bpc_feedeps) {
			this.addBPC_FEEDEPObject(bpc_feedep);
		}

		for (BPC_FEE_ITEM bpc_fee_item : bpc_fee_items) {
			this.addBPC_FEE_ITEMObject(bpc_fee_item);
		}
		
		for (APPROVAL_HISTORY approvalHistory : approvalHistorys) { 
			this.addAPPROVAL_HISTORYObject(approvalHistory);
		} 

		for (ATTACHMENT attachment : attachments) {
			this.addATTACHMENTObject(attachment);
		}
	}

	/**
	 * Clears the local variables.
	 */
	private void clear() {
		bpc_fee = null;
		bpc_audit = null;
		bpc_feedeps.clear();
		bpc_fee_items.clear();
	}
	

}
