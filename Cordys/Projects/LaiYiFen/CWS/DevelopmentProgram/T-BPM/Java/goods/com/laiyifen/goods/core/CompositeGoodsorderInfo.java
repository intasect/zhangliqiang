/*
  This class has been generated by the Code Generator
*/

package com.laiyifen.goods.core;

import java.util.Vector;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.event.AfterCommitObjectEvent;
import com.cordys.cpc.bsf.util.ObjectHelper;
import com.laiyifen.common.core.APPROVAL_HISTORY;
import com.laiyifen.common.core.ATTACHMENT;
import com.laiyifen.common.util.BusObjectHelper;
import com.laiyifen.common.util.GUIDUtil;


public class CompositeGoodsorderInfo extends CompositeGoodsorderInfoBase
{
	private GOODSORDER goodsorderObject = null;
	private GOODSCARD  goodscardObject = null;
	private GOODSDETAILS goodsdetailsObject = null;
	private APPROVAL_HISTORY approvalHistoryObject = null;
	private Vector<APPROVAL_HISTORY> approvalHistorys = new Vector<APPROVAL_HISTORY>();
	private ATTACHMENT attachment = null;
	private Vector<ATTACHMENT> attachments = new Vector<ATTACHMENT>();

    public CompositeGoodsorderInfo()
    {
        this((BusObjectConfig)null);
    }

    public CompositeGoodsorderInfo(BusObjectConfig config)
    {
        super(config);
    }

    public static com.laiyifen.goods.core.CompositeGoodsorderInfo getCompositeGoodsorderInofObject(String formId)
    {
        // TODO implement body
    	CompositeGoodsorderInfo compositegoodsorderObject = new CompositeGoodsorderInfo();

    	// 根据formID取得GOODSORDER表中记录并设置到复合对象
    	GOODSORDER  goodsorder = GOODSORDER.getGoodsorderObject(formId);
    	compositegoodsorderObject.setGOODSORDERObject(goodsorder);

    	// 根据formID取得GOODSCARD表中记录并设置到复合对象
    	GOODSCARD  goodscard =GOODSCARD.getGoodscardObject(formId); 
    	compositegoodsorderObject.setGOODSCARDObject(goodscard);
    	
    	// 根据formID取得GOODSDETAILS表中记录并设置到复合对象
    	GOODSDETAILS  goodsdetails = GOODSDETAILS.getGoodsdetailsObject(formId); 
    	compositegoodsorderObject.setGOODSDETAILSObject(goodsdetails);
    	
		BusObjectIterator<ATTACHMENT> attachmentObj = ATTACHMENT
				.getAttachment(formId);;
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj
						.nextElement();
				compositegoodsorderObject.addATTACHMENTObject(attachmentInfo);
			}
		}
		BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = APPROVAL_HISTORY
				.getApprovalHistory(formId);
		if (approvalHistoryObj != null) {
			while (approvalHistoryObj.hasMoreElements()) {
				APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj
						.nextElement();
				compositegoodsorderObject
						.addAPPROVAL_HISTORYObject(approvalHistoryInfo);
			}
		}
		compositegoodsorderObject.makeTransient();
		return compositegoodsorderObject;
    }

    public static BusObjectIterator<com.laiyifen.goods.core.CompositeGoodsorderInfo> getCompositeGoodsorderInfoObjects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }

    public void onInsert()
    {
    	// Removing the unnecessary objects from the parent object.
		BusObjectHelper.removeEmptyChildren(this);
		// 获取主表id
		GOODSORDER goodsorder = this.getGOODSORDERObject();
		if (goodsorder != null) {
			GUIDUtil _formIDGenerator = new GUIDUtil();
			String formID = _formIDGenerator.setGUID(null);
			goodsorder.setFORM_ID(formID);
			goodsorderObject = (GOODSORDER) ObjectHelper.createObjectForInsert(goodsorder, 
					com.laiyifen.goods.core.GOODSORDER.class, false);
			goodsorderObject.insert();
		}
		
		
		GOODSCARD goodscard = this.getGOODSCARDObject();
		if (goodscard != null) {
			//ShopUtil _formIDGenerator = new ShopUtil();
			/*
			String formID = _formIDGenerator.setFormID(null);
                        
                       ShopUtil _shopIDGenerator = new ShopUtil();
			String shopID = _shopIDGenerator.setShopID("");
                      
			goodscard.setFORM_ID(formID);
			 */
			goodscardObject = (GOODSCARD) ObjectHelper.createObjectForInsert(goodsorder, 
					com.laiyifen.goods.core.GOODSCARD.class, false);
			goodscardObject.insert();
		}
		
		GOODSDETAILS goodsdetails = this.getGOODSDETAILSObject();
		if (goodsdetails != null) {
			//ShopUtil _formIDGenerator = new ShopUtil();
			/*
			String formID = _formIDGenerator.setFormID(null);
                       
                       ShopUtil _shopIDGenerator = new ShopUtil();
			String shopID = _shopIDGenerator.setShopID("");
                       
			goodsdetails.setFORM_ID(formID);
			*/
			goodsdetailsObject = (GOODSDETAILS) ObjectHelper.createObjectForInsert(goodsorder, 
					com.laiyifen.goods.core.GOODSDETAILS.class, false);
			goodsdetailsObject.insert();
		}
		
		
		BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this
				.getAPPROVAL_HISTORYObjects();
		if (approvalHistoryObj != null) {
			while (approvalHistoryObj.hasMoreElements()) {
				APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj
						.nextElement();
				approvalHistoryObject = (APPROVAL_HISTORY) ObjectHelper
						.createObjectForInsert(
								approvalHistoryInfo,
								com.laiyifen.common.core.APPROVAL_HISTORY.class,
								false);
				approvalHistoryObject.insert();
				approvalHistorys.add(approvalHistoryObject);
			}
		}
    }

    public void onUpdate()
    {
		BusObjectHelper.removeEmptyChildren(this);
		    	
		GOODSORDER goodsorder = this.getGOODSORDERObject();
				if (goodsorder != null) {
					goodsorder = (GOODSORDER) ObjectHelper.createObjectForUpdate(goodsorder,
									com.laiyifen.goods.core.GOODSORDER.class, false);
					goodsorderObject.update();
				}
		GOODSCARD goodcard = this.getGOODSCARDObject();
			    if (goodcard != null) {
			    	goodcard = (GOODSCARD) ObjectHelper.createObjectForUpdate(goodcard,
										com.laiyifen.goods.core.GOODSORDER.class, false);
						goodscardObject.update();
					}
		GOODSDETAILS goodsdetails = this.getGOODSDETAILSObject();
			    if (goodsdetails != null) {
			    	goodsdetails = (GOODSDETAILS) ObjectHelper.createObjectForUpdate(goodsdetails,
										com.laiyifen.goods.core.GOODSORDER.class, false);
			    	goodsdetailsObject.update();
					}		
			   
		BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this
						.getAPPROVAL_HISTORYObjects();
		if (approvalHistoryObj != null) {
					while (approvalHistoryObj.hasMoreElements()) {
						APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj
								.nextElement();
						approvalHistoryObject = (APPROVAL_HISTORY) ObjectHelper
								.createObjectForUpdate(
										approvalHistoryInfo,
										com.laiyifen.common.core.APPROVAL_HISTORY.class,
										false);
						approvalHistoryObject.update();
						approvalHistorys.add(approvalHistoryObject);
					}
				}
				
		BusObjectHelper.unlinkChildren(this, APPROVAL_HISTORY.class);
		
		BusObjectIterator<ATTACHMENT> attachmentObj = this
						.getATTACHMENTObjects();
				
		if (attachmentObj != null) {
					while (attachmentObj.hasMoreElements()) {
						ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj
								.nextElement();
						attachment = (ATTACHMENT) ObjectHelper.createObjectForUpdate(
								attachmentInfo,
								com.laiyifen.common.core.ATTACHMENT.class, false);
						attachment.update();
						attachments.add(attachment);
					}
				}
				
				BusObjectHelper.unlinkChildren(this, ATTACHMENT.class);
    }

    public void onDelete()

    {
    	BusObjectHelper.removeEmptyChildren(this);
    	
		GOODSORDER goodsorder = this.getGOODSORDERObject();
		if (goodsorder != null) {
			ObjectHelper.createObjectForDelete(goodsorder,
							com.laiyifen.goods.core.GOODSORDER.class, true);
				}

		GOODSCARD goodscard = this.getGOODSCARDObject();
		if (goodscard != null) {
			ObjectHelper.createObjectForDelete(goodscard,
					com.laiyifen.goods.core.GOODSCARD.class, true);
		}
		
		GOODSDETAILS goodsdetails = this.getGOODSDETAILSObject();
		if (goodsdetails != null) {
			ObjectHelper.createObjectForDelete(goodsdetails,
					com.laiyifen.goods.core.GOODSDETAILS.class, true);
		}
		
		BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this
				.getAPPROVAL_HISTORYObjects();
		if (approvalHistoryObj != null) {
			while (approvalHistoryObj.hasMoreElements()) {
				APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj
						.nextElement();
				ObjectHelper.createObjectForDelete(approvalHistoryInfo,
						com.laiyifen.common.core.APPROVAL_HISTORY.class, true);
			}
		}

		BusObjectIterator<ATTACHMENT> attachmentObj = this
				.getATTACHMENTObjects();
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj
						.nextElement();
				ObjectHelper.createObjectForDelete(attachmentInfo,
						com.laiyifen.common.core.ATTACHMENT.class, true);
			}
		}
    }

    
    public void onAfterCommit(AfterCommitObjectEvent event) {
		// TODO Auto-generated method stub
    	super.onAfterCommit(event);
		this.createResponseObject();
		this.clear();
	}

	/**
	 * Create the composite response object.
	 */
	private void createResponseObject() {
		// Persistable objects we can modify, so first make transient.
		this.makeTransient();

		if (goodsorderObject != null) {
			this.setGOODSORDERObject(goodsorderObject);
		}
		
		if (goodscardObject != null) {
			this.setGOODSCARDObject(goodscardObject);
		}

		if (goodsdetailsObject != null) {
			this.setGOODSDETAILSObject(goodsdetailsObject);
		}
		for (APPROVAL_HISTORY approvalHistory : approvalHistorys) {
			this.addAPPROVAL_HISTORYObject(approvalHistory);
		}

		for (ATTACHMENT attachment : attachments) {
			this.addATTACHMENTObject(attachment);
		}
	}

	/**
	 * Clears the local variables.
	 */
	private void clear() {
		goodsorderObject = null;
		goodscardObject = null;
		goodsdetailsObject = null;
		approvalHistorys.clear();
		attachments.clear();
	}
}