

/*
  This class has been generated by the Code Generator
*/

package com.laiyifen.goods.core;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.eibus.xml.nom.Document;
import com.eibus.xml.nom.Node;
import com.laiyifen.common.ConnectorManager;
import com.laiyifen.common.logging.AppLogger;
import com.laiyifen.sap.common.SAPWrapper;


public class SyncGoodsToSAPService extends SyncGoodsToSAPServiceBase
{
	public static final String TBPM_SAP_NAMESPACE = "http://schemas.laiyifen.com/saprfc";
    public SyncGoodsToSAPService()
    {
        this((BusObjectConfig)null);
    }

    public SyncGoodsToSAPService(BusObjectConfig config)
    {
        super(config);
    }

    public static BusObjectIterator<com.laiyifen.goods.core.SyncGoodsToSAPService> getSyncGoodsToSAPServiceObjects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }

    public static boolean syncGoodsToSAP(String orderId,String batchNum) throws Exception
    {
    	boolean ret = false;
    	String errorMsg = null;
    	String organization = BSF.getOrganization();
  		String workspaceID = "__Organization Staging__";
  		int params = getGroupbuyOrderSAPDimensionList(orderId);
  		String requestStr = Node.writeToString(params, false);
  		int response = ConnectorManager._callSoapMethod(organization,
  				TBPM_SAP_NAMESPACE, "ZIFSD_TBPM_CREATESO", null,null,params);
  		String responseStr = Node.writeToString(response, false);
  		try {
   			if (response > 0) { 
   				String salesDocument = Node.getData(Node.getElement(response, "SALESDOCUMENT"));
   				if(salesDocument!=null&&!salesDocument.trim().equals("")){
	   				boolean flag = GROUPBUY_ORDER.updateGroupbuyOrderObjectBySAPReturn(orderId, salesDocument);
	   				if(flag){
	   					ret = true;
	   				}
   				}
   			}
   		}catch (Exception e) {
			errorMsg = getDetailError(e);
			throw e;
		} finally {
   			Node.delete(response);
   			response = 0;
   			//BSF.getObjectManager().startTransaction("common_log_trans");
			AppLogger logger = AppLogger.getAppLogger(SAPWrapper.class);
			String level = "";
			if (ret) {
				level = "INFO";
			} else {
				level = "ERROR";
			}
			logger.log(level, "", "", BSF.getUser(), orderId, "ZIFSD_TBPM_CREATESO",
					requestStr, responseStr, batchNum, errorMsg);
			//BSF.getObjectManager().commitTransaction("common_log_trans", true);
   		}
		return ret;
    }
    
   /**
    * 拼请求的xml结构
    * @param orderNo
    * @return
    * @throws Exception
    */
 public static int getGroupbuyOrderSAPDimensionList(String orderId) throws Exception{
    	String root = "<ZIFSD_TBPM_CREATESO xmlns=\"http://schemas.laiyifen.com/saprfc\"><ORDER_CONDITIONS_IN/><ORDER_ITEMS_IN/></ZIFSD_TBPM_CREATESO>";
		String t_SALES_HEADER_IN = "<SALES_HEADER_IN><SALES_ORG/><PURCH_NO_C/><PMNTTRMS/><REQ_DATE_H/><REF_1/><NAME/><PARTN_NUMB/><NAME_K/><CITY/><STREET/></SALES_HEADER_IN>";
		String t_ORDER_CONDITIONS_IN = "<item><ITM_NUMBER/><COND_TYPE/><COND_VALUE/><CURRENCY/><COND_UNIT/><COND_P_UNT/></item>";
		String t_ORDER_ITEMS_IN ="<item><ITM_NUMBER/><MATERIAL/><REQ_QTY/><SALES_UNIT/><ITEM_CATEG/><PYMT_METH/><REF_1_S/><PRICE/></item>";	
		Document doc = new Document();
		int rootNode = doc.parseString(root);
		int torderConditionsInNode = Node.getElement(rootNode,"ORDER_CONDITIONS_IN");
		int torderItemsInNode = Node.getElement(rootNode, "ORDER_ITEMS_IN");
		int salesHeadNode = doc.parseString(t_SALES_HEADER_IN);
		int orderConditionNode = doc.parseString(t_ORDER_CONDITIONS_IN);
		int orderItemsNode = doc.parseString(t_ORDER_ITEMS_IN);
		SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");
		String deliveryDate = null;
		//订单信息
		GROUPBUY_ORDER groupbuyorder = GROUPBUY_ORDER.getGroupbuyOrderByOrderId(orderId) ;
		Node.setDataElement(salesHeadNode,"SALES_ORG",groupbuyorder.getSALE_ORG_CODE());//销售组织代码
		Node.setDataElement(salesHeadNode,"PURCH_NO_C",groupbuyorder.getORDER_NO());//订单编号
		Node.setDataElement(salesHeadNode,"PMNTTRMS",groupbuyorder.getSETTLEMENT_CODE());//结算方式
		if(groupbuyorder.getDELIVERY_DATE()!=null){
			deliveryDate = df.format(groupbuyorder.getDELIVERY_DATE());
		}
		Node.setDataElement(salesHeadNode,"REQ_DATE_H",deliveryDate);//送货日期
		Node.setDataElement(salesHeadNode,"REF_1",groupbuyorder.getSETTLEMENT_CODE());//介绍人部门
		Node.setDataElement(salesHeadNode,"NAME",groupbuyorder.getORDER_REF());//介绍人姓名		
		Node.setDataElement(salesHeadNode,"PARTN_NUMB",groupbuyorder.getCUSTOMER_CODE());//客户编号
		Node.setDataElement(salesHeadNode,"NAME_K",groupbuyorder.getORDER_USER());//订购人
		Node.setDataElement(salesHeadNode,"CITY",groupbuyorder.getORDER_CITY());//订购城市
		Node.setDataElement(salesHeadNode,"STREET",groupbuyorder.getORG_ADDR());//单位地址
		Node.appendToChildren(salesHeadNode, rootNode);
		//物料信息
		BusObjectIterator<GROUPBUY_ORDER_DETAIL> groupbuyOrderDetailObjects = GROUPBUY_ORDER_DETAIL.getGroupbuyOrderDetailByOrderId(orderId);
		int itemNumber = 0;
		DecimalFormat dformat = new DecimalFormat("000000");
    	if (groupbuyOrderDetailObjects != null) {
    		while(groupbuyOrderDetailObjects.hasMoreElements()){
    				GROUPBUY_ORDER_DETAIL groupbuyOrderDetailObj = groupbuyOrderDetailObjects.nextElement();
    				String itemCateg = groupbuyOrderDetailObj.getITEM_CATEG();
    				itemNumber = itemNumber + 10;
    				String itemNumStr = dformat.format(itemNumber);
    				//ORDER_ITEMS_IN
	    			int tmpNode1 = Node.duplicate(orderItemsNode);
	    			Node.setDataElement(tmpNode1, "ITM_NUMBER",itemNumStr);//项目号
	    			Node.setDataElement(tmpNode1, "MATERIAL", groupbuyOrderDetailObj.getPRODUCT_CODE());//物品编号
	    			Node.setDataElement(tmpNode1, "REQ_QTY", groupbuyOrderDetailObj.getSTANDARD());//以销售单位计的订单数量 
	    			Node.setDataElement(tmpNode1, "SALES_UNIT",groupbuyOrderDetailObj.getSALES_UNIT() );//销售单位
	    			Node.setDataElement(tmpNode1, "ITEM_CATEG", groupbuyOrderDetailObj.getITEM_CATEG());	//销售凭证项目类别 
	    			Node.setDataElement(tmpNode1, "PYMT_METH",groupbuyorder.getPAYMENT_CODE());	//付款方式
	    			Node.setDataElement(tmpNode1, "REF_1_S", groupbuyOrderDetailObj.getQUANTITY()+"");//分包数量
	    			if(itemCateg!=null&&!itemCateg.equals("Z09")){//赠品不传价格
	    				Node.setDataElement(tmpNode1, "PRICE", groupbuyOrderDetailObj.getUNIT_PRICE()+"");	//定价比率
	    			}else{
	    				Node.setDataElement(tmpNode1, "PRICE", null);	//定价比率
	    			}
	    			Node.setDataElement(tmpNode1, "PLANT", groupbuyorder.getFACTORY_SHIPMENT());	//定价比率
	    			Node.appendToChildren(tmpNode1, torderItemsInNode);
	    			//ORDER_CONDITIONS_IN 礼券 需要传此参数 商品不用传
	    			if(groupbuyOrderDetailObj.getPRODUCT_CODE()!=null&&"000000000000808000".equals(groupbuyOrderDetailObj.getPRODUCT_CODE())){//券
	    				int tmpNode2 = Node.duplicate(orderConditionNode);
		    			Node.setDataElement(tmpNode2, "ITM_NUMBER",itemNumStr);//项目号
		    			Node.setDataElement(tmpNode2, "COND_TYPE", "ZF02");//条件类型
		    			Node.setDataElement(tmpNode2, "COND_VALUE", groupbuyOrderDetailObj.getTOTAL()+"");//券是折后总价  
		    			Node.setDataElement(tmpNode2, "CURRENCY", "CNY");	//货币码 
		    			Node.setDataElement(tmpNode2, "COND_UNIT", "1");//条件单位
		    			Node.setDataElement(tmpNode2, "COND_P_UNT", "zha");	//条件定价单位
		    			Node.appendToChildren(tmpNode2, torderConditionsInNode);		    			
		    			int tmpNode3 = Node.duplicate(orderConditionNode);
		    			Node.setDataElement(tmpNode3, "ITM_NUMBER",groupbuyOrderDetailObj.getITM_NUMBER());//项目号
		    			Node.setDataElement(tmpNode3, "COND_TYPE", "ZF03");//条件类型
		    			Node.setDataElement(tmpNode3, "COND_VALUE", groupbuyOrderDetailObj.getTOTAL()+"");//券是折后总价  
		    			Node.setDataElement(tmpNode3, "CURRENCY", "CNY");	//货币码 
		    			Node.setDataElement(tmpNode3, "COND_UNIT", "1");//条件单位
		    			Node.setDataElement(tmpNode3, "COND_P_UNT", "zha");	//条件定价单位
		    			Node.appendToChildren(tmpNode3, torderConditionsInNode);
	    			}
    		}
    	}
		String s = Node.writeToString(rootNode, false);
		return rootNode;
    	
    }
 
 /**
	 * get detail error information from exception
	 * 
	 * @param e
	 *            Exception
	 * @return detail exception string
	 */
	private static String getDetailError(Exception e) {
		String error = "";
		if (e == null)
			return error;
		PrintWriter pw = null;
		StringWriter sw = new StringWriter();
		pw = new PrintWriter(sw);
		e.printStackTrace(pw);
		if (pw != null) {
			error = sw.toString();
		}
		return error;
	}
	 public void onInsert()
	 {
	 }
	
	 public void onUpdate()
	 {
	 }
	
	 public void onDelete()
	 {
	 }
	 
	 

}
