/*
  This class has been generated by the Code Generator
*/

package com.laiyifen.goods.core;

import java.util.Vector;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.cordys.cpc.bsf.busobject.StoredProcedure;
import com.cordys.cpc.bsf.event.AfterCommitObjectEvent;
import com.cordys.cpc.bsf.util.ObjectHelper;
import com.laiyifen.common.core.APPROVAL_HISTORY;
import com.laiyifen.common.core.ATTACHMENT;
import com.laiyifen.common.util.BusObjectHelper;
import com.laiyifen.common.util.CommonUtil;
import com.laiyifen.common.util.GUIDUtil;


public class CompositeGroupbuyOrder extends CompositeGroupbuyOrderBase
{
	private GROUPBUY_ORDER groupbuyOrderObject = null;
	private GROUPBUY_ORDER_DETAIL groupbuyOrderDetailObject = null;
	private Vector<GROUPBUY_ORDER_DETAIL> groupbuyOrderDetails = new Vector<GROUPBUY_ORDER_DETAIL>();
	//private GROUPBUY_ORDER_CONDITION groupbuyOrderConditionObject = null;
	//private Vector<GROUPBUY_ORDER_CONDITION> groupbuyOrderConditions = new Vector<GROUPBUY_ORDER_CONDITION>();
	private APPROVAL_HISTORY approvalHistoryObject = null;
	private Vector<APPROVAL_HISTORY> approvalHistorys = new Vector<APPROVAL_HISTORY>();
	private ATTACHMENT attachment = null;
	private Vector<ATTACHMENT> attachments = new Vector<ATTACHMENT>();
    public CompositeGroupbuyOrder()
    {
        this((BusObjectConfig)null);
    }

    public CompositeGroupbuyOrder(BusObjectConfig config)
    {
        super(config);
    }

    public static com.laiyifen.goods.core.CompositeGroupbuyOrder getCompositeGroupbuyOrderByOrderNo(String ORDER_ID, String PRODUCT_TYPE)
    {
    	CompositeGroupbuyOrder compositeGroupbuyOrder = new CompositeGroupbuyOrder();
    	GROUPBUY_ORDER groupbuyorder = GROUPBUY_ORDER.getGroupbuyOrderObject(ORDER_ID);
    	compositeGroupbuyOrder.setGROUPBUY_ORDERObject(groupbuyorder); 	
    	if(PRODUCT_TYPE!=null&&!PRODUCT_TYPE.equals(""))
    	{		
    	}else{
    		PRODUCT_TYPE = "1";
    	}
    	
    	BusObjectIterator<GROUPBUY_ORDER_DETAIL> groupbuyOrderObj = CompositeGroupbuyOrder.getCompositeGroupbuyOrderByNoAndType(PRODUCT_TYPE,ORDER_ID,null);
		if (groupbuyOrderObj != null) {
			while (groupbuyOrderObj.hasMoreElements()) {
				GROUPBUY_ORDER_DETAIL groupbuyorderdetail = (GROUPBUY_ORDER_DETAIL) groupbuyOrderObj
						.nextElement();
				compositeGroupbuyOrder.addGROUPBUY_ORDER_DETAILObject(groupbuyorderdetail);
			}
		}
		
		BusObjectIterator<ATTACHMENT> attachmentObj = ATTACHMENT
				.getAttachment(ORDER_ID);
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj
						.nextElement();
				compositeGroupbuyOrder.addATTACHMENTObject(attachmentInfo);
			}
		}
		BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = APPROVAL_HISTORY
				.getApprovalHistory(ORDER_ID);
		if (approvalHistoryObj != null) {
			while (approvalHistoryObj.hasMoreElements()) {
				APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj
						.nextElement();
				compositeGroupbuyOrder
						.addAPPROVAL_HISTORYObject(approvalHistoryInfo);
			}
		}
		compositeGroupbuyOrder.makeTransient();
		return compositeGroupbuyOrder;
    }
    
    public static BusObjectIterator<com.laiyifen.goods.core.GROUPBUY_ORDER_DETAIL> getCompositeGroupbuyOrderByNoAndType(String PRODUCT_TYPE, String ORDER_ID, com.cordys.cpc.bsf.query.Cursor cursor)
    {
    	 // 拼装动态查询语句
    	StringBuffer queryText = new StringBuffer();
    	queryText.append("SELECT  *  FROM \"GROUPBUY_ORDER_DETAIL\" WHERE ORDER_ID ='").append(ORDER_ID).append("'").append(" AND PRODUCT_TYPE ='").append(PRODUCT_TYPE).append("'");   
        QueryObject query = new QueryObject(queryText.toString());   
        query.setResultClass(GROUPBUY_ORDER_DETAIL.class);
        return query.getObjects();
    }

    public static BusObjectIterator<com.laiyifen.goods.core.CompositeGroupbuyOrder> getCompositeGroupbuyOrderObjects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }

    public void onInsert()
    {

		// Removing the unnecessary objects from the parent object.
		BusObjectHelper.removeEmptyChildren(this);
		GROUPBUY_ORDER groupbuyOrder = this.getGROUPBUY_ORDERObject();
		if (groupbuyOrder != null) {
			String saleOrgCode = groupbuyOrder.getSALE_ORG_CODE();
			CommonUtil _orderNoGenerator = new CommonUtil();
			String orderNo = getSeqNumber("TG"+saleOrgCode);
			groupbuyOrder.setORDER_NO(orderNo);
			
//			GUIDUtil _formIDGenerator = new GUIDUtil();
//			String formID = _formIDGenerator.getFormID();
//			groupbuyOrder.setID(formID);
			groupbuyOrderObject = (GROUPBUY_ORDER) ObjectHelper
					.createObjectForInsert(groupbuyOrder,GROUPBUY_ORDER.class, false);
			groupbuyOrderObject.insert();
		}
		
		BusObjectIterator<GROUPBUY_ORDER_DETAIL> groupbuyOrderDetailObjects = this.getGROUPBUY_ORDER_DETAILObjects();
		if (groupbuyOrderDetailObjects != null) {
			while (groupbuyOrderDetailObjects.hasMoreElements()) {
				GROUPBUY_ORDER_DETAIL groupbuyOrderDetail = (GROUPBUY_ORDER_DETAIL) groupbuyOrderDetailObjects
						.nextElement();
//				GUIDUtil _formIDGenerator = new GUIDUtil();
//				String formID = _formIDGenerator.getFormID();
//				groupbuyOrderDetail.setPRODUCT_ID(formID);
				groupbuyOrderDetailObject = (GROUPBUY_ORDER_DETAIL) ObjectHelper
						.createObjectForInsert(
								groupbuyOrderDetail,com.laiyifen.goods.core.GROUPBUY_ORDER_DETAIL.class,
								false);
				groupbuyOrderDetailObject.insert();
				groupbuyOrderDetails.add(groupbuyOrderDetailObject);
			}
		}
		BusObjectHelper.unlinkChildren(this, GROUPBUY_ORDER_DETAIL.class);	
		
		BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this.getAPPROVAL_HISTORYObjects();
		if (approvalHistoryObj != null) {
			while (approvalHistoryObj.hasMoreElements()) {
				APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj
						.nextElement();
				approvalHistoryObject = (APPROVAL_HISTORY) ObjectHelper
						.createObjectForInsert(
								approvalHistoryInfo,
								com.laiyifen.common.core.APPROVAL_HISTORY.class,
								false);
				approvalHistoryObject.insert();
				approvalHistorys.add(approvalHistoryObject);
			}
		}
		BusObjectHelper.unlinkChildren(this, APPROVAL_HISTORY.class);
		
		BusObjectIterator<ATTACHMENT> attachmentObj = this
				.getATTACHMENTObjects();
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj
						.nextElement();
				attachment = (ATTACHMENT) ObjectHelper.createObjectForInsert(
						attachmentInfo,
						com.laiyifen.common.core.ATTACHMENT.class, false);
				attachment.insert();
				attachments.add(attachment);
			}
		}
		BusObjectHelper.unlinkChildren(this, ATTACHMENT.class);
    }

    public void onUpdate()
    {
    	BusObjectHelper.removeEmptyChildren(this);
    	GROUPBUY_ORDER groupbuyOrder = this.getGROUPBUY_ORDERObject();
		if (groupbuyOrder != null) {
			GROUPBUY_ORDER groupbuyOrderTemp =  GROUPBUY_ORDER.getGroupbuyOrderObject(groupbuyOrder.getORDER_ID());
			if (!(groupbuyOrder.getSALE_ORG_CODE().equals(groupbuyOrderTemp.getSALE_ORG_CODE())))
			{
				String saleOrgCode = groupbuyOrder.getSALE_ORG_CODE();
				CommonUtil _orderNoGenerator = new CommonUtil();
				String orderNo = getSeqNumber(saleOrgCode);
				groupbuyOrder.setORDER_NO(orderNo);
			}
			groupbuyOrder = (GROUPBUY_ORDER) ObjectHelper
					.createObjectForUpdate(groupbuyOrder,GROUPBUY_ORDER.class, false);
			groupbuyOrder.update();
			
		}
			
//		BusObjectIterator<GROUPBUY_ORDER_DETAIL> groupbuyOrderDetailObjects = this.getGROUPBUY_ORDER_DETAILObjects();
//		if (groupbuyOrderDetailObjects != null) {
//			while (groupbuyOrderDetailObjects.hasMoreElements()) {
//				GROUPBUY_ORDER_DETAIL groupbuyOrderDetail = (GROUPBUY_ORDER_DETAIL) groupbuyOrderDetailObjects
//						.nextElement();
////				GUIDUtil _formIDGenerator = new GUIDUtil();
////				String formID = _formIDGenerator.getFormID();
////				groupbuyOrderDetail.setPRODUCT_ID(formID);
//				groupbuyOrderDetailObject = (GROUPBUY_ORDER_DETAIL) ObjectHelper
//						.createObjectForUpdate(
//								groupbuyOrderDetail,com.laiyifen.goods.core.GROUPBUY_ORDER_DETAIL.class,
//								false);
//				groupbuyOrderDetailObject.update();
//				groupbuyOrderDetails.add(groupbuyOrderDetailObject);
//			}
//		}
		BusObjectHelper.unlinkChildren(this, GROUPBUY_ORDER_DETAIL.class);

		BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this
				.getAPPROVAL_HISTORYObjects();
		if (approvalHistoryObj != null) {
			while (approvalHistoryObj.hasMoreElements()) {
				APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj
						.nextElement();
				approvalHistoryObject = (APPROVAL_HISTORY) ObjectHelper
						.createObjectForUpdate(
								approvalHistoryInfo,
								com.laiyifen.common.core.APPROVAL_HISTORY.class,
								false);
				approvalHistoryObject.update();
				approvalHistorys.add(approvalHistoryObject);
			}
		}
		
		BusObjectHelper.unlinkChildren(this, APPROVAL_HISTORY.class);

		BusObjectIterator<ATTACHMENT> attachmentObj = this
				.getATTACHMENTObjects();
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj
						.nextElement();
				attachment = (ATTACHMENT) ObjectHelper.createObjectForUpdate(
						attachmentInfo,
						com.laiyifen.common.core.ATTACHMENT.class, false);
				attachment.update();
				attachments.add(attachment);
			}
		}
		
		BusObjectHelper.unlinkChildren(this, ATTACHMENT.class);
    }

    public void onDelete()
    {
    }
    
    @Override
	public void onAfterCommit(AfterCommitObjectEvent event) {
		// TODO Auto-generated method stub
    	super.onAfterCommit(event);
		this.createResponseObject();
		this.clear();
	}

	/**
	 * Create the composite response object.
	 */
	private void createResponseObject() {
		// Persistable objects we can modify, so first make transient.
		this.makeTransient();

		if (groupbuyOrderObject != null) {
			this.setGROUPBUY_ORDERObject(groupbuyOrderObject);
		}
		 
		for (GROUPBUY_ORDER_DETAIL groupbuyorderdetail : groupbuyOrderDetails) {
			this.addGROUPBUY_ORDER_DETAILObject(groupbuyorderdetail);
		}

		for (APPROVAL_HISTORY approvalHistory : approvalHistorys) {
			this.addAPPROVAL_HISTORYObject(approvalHistory);
		}

		for (ATTACHMENT attachment : attachments) {
			this.addATTACHMENTObject(attachment);
		}
	}
	/**
	 * Clears the local variables.
	 */
	private void clear() {
		groupbuyOrderObject = null;
		groupbuyOrderDetailObject = null;
		attachment = null;
		approvalHistoryObject = null;
		approvalHistorys.clear();
		attachments.clear();
		groupbuyOrderDetails.clear();
	}
	
	/**
	 * 调用存储过程生成序列号
	 * 
	 * @param seqType
	 *            序列号类型
	 * @return 序列号
	 *
	 */
	public static String getSeqNumber(String seqType) {
		//BsfContext mycontext = AssignmentUtils.initBSF();
		String value = null;
		//BSF.getObjectManager().startTransaction("SEQ_TRANS");
		StoredProcedure sp = new StoredProcedure("SF_GET_AUTO_NUMBER");
		sp.prepareCall(":RESULT = \"SF_GET_AUTO_NUMBER\"( :PARAM1)");
		sp.setReturnParameter("RESULT");
		sp.setParameter("PARAM1", seqType);
		sp.execute();
		value = sp.getString("RESULT");
		//BSF.getObjectManager().commitTransaction("SEQ_TRANS",true);
		//AssignmentUtils.release(mycontext);
		return value;
	}

}
