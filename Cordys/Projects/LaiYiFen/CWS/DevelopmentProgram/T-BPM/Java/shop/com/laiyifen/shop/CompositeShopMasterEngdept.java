/*
  This class has been generated by the Code Generator
*/

package com.laiyifen.shop;

import java.util.Vector;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.event.AfterCommitObjectEvent;
import com.cordys.cpc.bsf.util.ObjectHelper;
import com.laiyifen.common.core.ATTACHMENT;
import com.laiyifen.common.util.BusObjectHelper;
import com.laiyifen.shop.util.ShopUtil;


public class CompositeShopMasterEngdept extends CompositeShopMasterEngdeptBase
{
	private SHOP_MASTER_ENGDEPT shopMasterEngdeptObject = null;
	private SHOP_DRAWINGS shopDrawingsObject = null;
	private SHOP_FITMENT_FORENOTICE shopFitmentForenoticeObject = null;
	private ATTACHMENT attachment = null;
	private Vector<ATTACHMENT> attachments = new Vector<ATTACHMENT>();
    public CompositeShopMasterEngdept()
    {
        this((BusObjectConfig)null);
    }

    public CompositeShopMasterEngdept(BusObjectConfig config)
    {
        super(config);
    }

    public static com.laiyifen.shop.CompositeShopMasterEngdept getCompositeShopMasterEngdeptByFilter(String shopId)
    {
    	CompositeShopMasterEngdept  compositeShopMasterEngdept = new CompositeShopMasterEngdept(); 
        
    	SHOP_MASTER shopMaster = SHOP_MASTER.getShopMasterObject(shopId);
    	compositeShopMasterEngdept.setSHOP_MASTERObject(shopMaster);
    	
    	SHOP_DRAWINGS   shopDrawings = SHOP_DRAWINGS.getShopIdDrawingsObject(shopId);
    	compositeShopMasterEngdept.setSHOP_DRAWINGSObject(shopDrawings);
    	
    	SHOP_FITMENT_FORENOTICE shopFitmentForenotice = SHOP_FITMENT_FORENOTICE.getShopIdFitmentObject(shopId);
    	compositeShopMasterEngdept.setSHOP_FITMENT_FORENOTICEObject(shopFitmentForenotice);
    	
    	SHOP_MASTER_ENGDEPT shopMasterEngdept = SHOP_MASTER_ENGDEPT.
    			getShopMasterEngdeptObjectByShopId(shopId);
    	compositeShopMasterEngdept.setSHOP_MASTER_ENGDEPTObject(shopMasterEngdept);	
    	String formId = null;
    	if(shopMasterEngdept!=null){
    		formId = shopMasterEngdept.getFORM_ID();
    	}
    	BusObjectIterator<ATTACHMENT> attachmentObj = ATTACHMENT
		.getAttachment(formId);
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj
						.nextElement();
				compositeShopMasterEngdept.addATTACHMENTObject(attachmentInfo);
			}
		}
		compositeShopMasterEngdept.makeTransient();
        return compositeShopMasterEngdept;
    }

    public static BusObjectIterator<com.laiyifen.shop.CompositeShopMasterEngdept> getCompositeShopMasterEngdeptObjects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }

    public void onInsert()
    {
    	BusObjectHelper.removeEmptyChildren(this);
    	SHOP_MASTER_ENGDEPT shopMasterEngdept = this.getSHOP_MASTER_ENGDEPTObject();
		if (shopMasterEngdept != null) {
			ShopUtil _formIDGenerator = new ShopUtil();
			String formID = _formIDGenerator.setFormID(null);
			shopMasterEngdept.setFORM_ID(formID);
		
			shopMasterEngdeptObject = (SHOP_MASTER_ENGDEPT) ObjectHelper
					.createObjectForInsert(shopMasterEngdept,
							SHOP_MASTER_ENGDEPT.class, false);
			shopMasterEngdeptObject.insert();
		}
		
		SHOP_DRAWINGS   shopDrawings = this.getSHOP_DRAWINGSObject();
		if(shopDrawings !=null){
			ShopUtil _formIDGenerator = new ShopUtil();
			String formID = _formIDGenerator.setFormID(null);
			shopDrawings.setFORM_ID(formID);
			
			shopDrawingsObject = (SHOP_DRAWINGS)ObjectHelper
			            .createObjectForInsert(shopDrawings, SHOP_DRAWINGS.class, false);
			shopDrawingsObject.insert();
		}
		
		SHOP_FITMENT_FORENOTICE   shopFitmentForenotice = this.getSHOP_FITMENT_FORENOTICEObject();
		if(shopFitmentForenotice !=null){
			ShopUtil _formIDGenerator = new ShopUtil();
			String formID = _formIDGenerator.setFormID(null);
			shopFitmentForenotice.setFORM_ID(formID);
			
			shopFitmentForenoticeObject = (SHOP_FITMENT_FORENOTICE)ObjectHelper
			            .createObjectForInsert(shopFitmentForenotice, SHOP_FITMENT_FORENOTICE.class, false);
			shopFitmentForenoticeObject.insert();
		}
	 
		BusObjectIterator<ATTACHMENT> attachmentObj = this
		.getATTACHMENTObjects();
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj
						.nextElement();
				attachment = (ATTACHMENT) ObjectHelper.createObjectForInsert(
						attachmentInfo,
						com.laiyifen.common.core.ATTACHMENT.class, false);
				attachment.insert();
				attachments.add(attachment);
			}
		}
		BusObjectHelper.unlinkChildren(this, ATTACHMENT.class);
    }

    public void onUpdate()
    {
    	BusObjectHelper.removeEmptyChildren(this);
    	SHOP_MASTER_ENGDEPT shopMasterEngdept = this.getSHOP_MASTER_ENGDEPTObject();

		if (shopMasterEngdept != null) {
			shopMasterEngdeptObject = (SHOP_MASTER_ENGDEPT) ObjectHelper
					.createObjectForUpdate(shopMasterEngdept,
							com.laiyifen.shop.SHOP_MASTER_ENGDEPT.class, false);
			shopMasterEngdeptObject.update();
		}
		
		SHOP_DRAWINGS   shopDrawings = this.getSHOP_DRAWINGSObject();
		if(shopDrawings !=null){ 
			shopDrawingsObject = (SHOP_DRAWINGS)ObjectHelper
			            .createObjectForUpdate(shopDrawings, SHOP_DRAWINGS.class, false);
			shopDrawingsObject.update();
		}
		
		SHOP_FITMENT_FORENOTICE   shopFitmentForenotice = this.getSHOP_FITMENT_FORENOTICEObject();
		if(shopFitmentForenotice !=null){
			shopFitmentForenoticeObject = (SHOP_FITMENT_FORENOTICE)ObjectHelper
			            .createObjectForUpdate(shopFitmentForenotice, SHOP_FITMENT_FORENOTICE.class, false);
			shopFitmentForenoticeObject.update();
		}
		
		BusObjectIterator<ATTACHMENT> attachmentObj = this
		.getATTACHMENTObjects();
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj
						.nextElement();
				attachment = (ATTACHMENT) ObjectHelper.createObjectForUpdate(
						attachmentInfo,
						com.laiyifen.common.core.ATTACHMENT.class, false);
				attachment.update();
				attachments.add(attachment);
			}
		}
		BusObjectHelper.unlinkChildren(this, ATTACHMENT.class);
    }

    public void onDelete()
    {
    }
    
    @Override
	public void onAfterCommit(AfterCommitObjectEvent event) {
		// TODO Auto-generated method stub
    	super.onAfterCommit(event);
		this.createResponseObject();
		this.clear();
	}

	/**
	 * Create the composite response object.
	 */
	private void createResponseObject() {
		// Persistable objects we can modify, so first make transient.
		this.makeTransient();

		if (shopMasterEngdeptObject != null) {
			this.setSHOP_MASTER_ENGDEPTObject(shopMasterEngdeptObject);
		}
		if(shopDrawingsObject != null){
			this.setSHOP_DRAWINGSObject(shopDrawingsObject);
		}
		if(shopFitmentForenoticeObject != null){
			this.setSHOP_FITMENT_FORENOTICEObject(shopFitmentForenoticeObject);
		}

		for (ATTACHMENT attachment : attachments) {
			this.addATTACHMENTObject(attachment);
		}
	}
	/**
	 * Clears the local variables.
	 */
	private void clear() {
		shopMasterEngdeptObject = null;
		shopDrawingsObject = null;
		shopFitmentForenoticeObject = null;
		attachment = null;
		attachments.clear();
	}

}
