/*
  This class has been generated by the Code Generator
*/

package com.laiyifen.shop;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.eibus.connector.nom.Connector;
import com.eibus.util.logger.CordysLogger;
import com.eibus.xml.nom.Document;
import com.eibus.xml.nom.Node;
import com.laiyifen.common.core.DICTIONARY;
import com.laiyifen.common.core.EMPLOYEE_INFO;

public class StatisticsShopInfo extends StatisticsShopInfoBase
{
	private static CordysLogger logger = CordysLogger.getCordysLogger(StatisticsShopInfo.class);
	
	private static String SHOP_ATTR_TYPE = "SHOP_ATTR";
	private static String SHOP_LIFE_CYCLE_TYPE_01 = "SHOP_LIFECYCLE_01";
	private static String SHOP_LIFE_CYCLE_TYPE_02 = "SHOP_LIFECYCLE_02";
	
	private static int tupleParent = 0;
	private static Document document = new Document();
	private static List<String> resultProcessInstance = new ArrayList<String>();
	
    public StatisticsShopInfo()
    {
        this((BusObjectConfig)null);
    }

    public StatisticsShopInfo(BusObjectConfig config)
    {
        super(config);
    }
    
    /*
     * 基础信息汇总
     */
    public static int getStatisticsShopBasicInfo()
    {
    	String queryText = ""; 
    	QueryObject query = null;
    	StatisticsResultBase result = null;
    	tupleParent = document.createElement("result");
    	
    	DecimalFormat df = new DecimalFormat("#.00"); 
    	DecimalFormat fmt   =   new   DecimalFormat("##,###,###,###,###.00");     

    	//当前门店总数
    	queryText = "select count(*) as INT_RESULT from \"SHOP_MASTER\" where SHOP_STATUS in ('0','1')";
    	query = new QueryObject(queryText);
        query.setResultClass(StatisticsResult.class);
        result = (StatisticsResult)query.getObject();
        long shopOpenTotal = result.getINT_RESULT();
        Node.createTextElement("shop_total", String.valueOf(shopOpenTotal), tupleParent);
        
        //年度规划总数
        queryText = "select count(*) as INT_RESULT from \"SHOP_ANNUALPLAN\" ";
    	query = new QueryObject(queryText);
        query.setResultClass(StatisticsResult.class);
        result = (StatisticsResult)query.getObject();
        long shopPlanTotal = result.getINT_RESULT();
        
        //当前开店总体匹配率
        queryText = "select count(*) as INT_RESULT from \"SHOP_TARGET_CHECK\" where \"ISINNER_PLANNING\" = '0' ";
        query = new QueryObject(queryText);
        query.setResultClass(StatisticsResult.class);
        result = (StatisticsResult)query.getObject();
        long innerPlanTotal = result.getINT_RESULT();
        if(0 == shopPlanTotal){
        	Node.createTextElement("shop_plan_rate", "0%", tupleParent);
        } else {
        	float f = innerPlanTotal * 100 / shopPlanTotal;
        	Node.createTextElement("shop_plan_rate", String.valueOf(df.format(f)) + "%", tupleParent);
        }
        
        //新店开店平均周期
        StringBuffer querySql = new StringBuffer();
        querySql.append("select avg(extract(day from(\"SUC_OPEN_DATE\" - \"CREATE_TIME\"))) as DBL_RESULT from \"SHOP_MASTER\" ")
        	.append(" where \"SUC_OPEN_DATE\" is not null and \"CREATE_TIME\" is not null ");
        query = new QueryObject(querySql.toString());
        query.setResultClass(StatisticsResult.class);
        result = (StatisticsResult)query.getObject();
        Node.createTextElement("shop_open_avg", String.valueOf(df.format(result.getDBL_RESULT())), tupleParent);
        
        //全部门店预估业绩总额(平均数)
        queryText = "select sum(SEASON_RPRICE) + sum(OUT_SEASON_RPICE) as DBL_RESULT from \"SHOP_MASTER\" where SHOP_STATUS in ('0','1')";
        query = new QueryObject(queryText);
        query.setResultClass(StatisticsResult.class);
        result = (StatisticsResult)query.getObject();
        double achieveTotalAmount = result.getDBL_RESULT();
        if(0 == shopOpenTotal){
        	Node.createTextElement("shop_predict_achievement", "0", tupleParent);
        } else {
        	double f = achieveTotalAmount * 100 / shopOpenTotal;
        	Node.createTextElement("shop_predict_achievement", String.valueOf(fmt.format(f)), tupleParent);
        }
        
        Node.createTextElement("shop_daily_real_amount", "0", tupleParent);
        Node.createTextElement("shop_daily_plan_amount", "0", tupleParent);
        
        return tupleParent;
    }
    
    /*
     * (当月)各地区新开门店数
     */
    public static int getStatisticsShopByArea()
    {
    	String queryText = ""; 
    	QueryObject query = null;
    	tupleParent = document.createElement("result");
    	
    	//根据地区统计该地方的门店数量
    	//当月
    	//SimpleDateFormat dFormat = new SimpleDateFormat("yyyy-MM");
    	//queryText = "select \"SHOP_AREA\" as STR_RESULT, count(*) as INT_RESULT from \"SHOP_MASTER\" t where to_char(\"SUC_OPEN_DATE\",'yyyy-mm') = '" + dFormat.format(new Date()) + "' group by \"SHOP_AREA\" ";
    	//全部
    	queryText = "select \"SHOP_AREA\" as STR_RESULT, count(*) as INT_RESULT from \"SHOP_MASTER\" t where SHOP_STATUS in ('0','1') group by \"SHOP_AREA\" ";
    	
    	query = new QueryObject(queryText);
        query.setResultClass(StatisticsResult.class);

        BusObjectIterator<StatisticsResult> result = query.getObjects();
        if(null != result){
	        while(result.hasMoreElements()){
	        	StatisticsResult sr = (StatisticsResult)result.nextElement();
	        	int tuple = Node.createElement("shop_by_area", tupleParent);
	        	Node.createTextElement("shop_number", String.valueOf(sr.getINT_RESULT()), tuple);
	        	Node.createTextElement("shop_area", String.valueOf(sr.getSTR_RESULT()), tuple);
	        }
	        if(!result.hasMoreElements()){
	        	int tuple = Node.createElement("shop_by_area", tupleParent);
	        	Node.createTextElement("shop_number", "", tuple);
	        	Node.createTextElement("shop_area", "", tuple);
	        }
        }
        
        return tupleParent;
    }
    
    /*
     * 某地区当年新开门店数
     */
    public static int getStatisticsShopByAreaAndYearAndMonth(String SHOP_AREA, String YEAR)
    {
    	QueryObject query = null;
    	tupleParent = document.createElement("result");
    	
    	//根据地区和年度统计该地方的门店数量
    	StringBuffer querySql = new StringBuffer();
        querySql.append("select count(*) as INT_RESULT, to_char(\"SUC_OPEN_DATE\",'yyyy-mm') as STR_RESULT from \"SHOP_MASTER\" ")
        	.append(" where \"SHOP_AREA\" like '")
        	.append(SHOP_AREA)
        	.append("%' and to_char(\"SUC_OPEN_DATE\",'yyyy') = '")
        	.append(YEAR)
        	.append("' and SHOP_STATUS in ('0','1') group by to_char(\"SUC_OPEN_DATE\",'yyyy-mm')")
        	.append(" order by to_char(\"SUC_OPEN_DATE\",'yyyy-mm') asc");
        
        query = new QueryObject(querySql.toString());
        query.setResultClass(StatisticsResult.class);

        BusObjectIterator<StatisticsResult> result = query.getObjects();
        if(null != result){
	        while(result.hasMoreElements()){
	        	StatisticsResult sr = (StatisticsResult)result.nextElement();
	        	int tuple = Node.createElement("shop_by_area_year_month", tupleParent);
	        	Node.createTextElement("shop_number", String.valueOf(sr.getINT_RESULT()), tuple);
	        	Node.createTextElement("shop_month", String.valueOf(sr.getSTR_RESULT()), tuple);
	        }
	        if(!result.hasMoreElements()){
	        	int tuple = Node.createElement("shop_by_area_year_month", tupleParent);
	        	Node.createTextElement("shop_number", "", tuple);
	        	Node.createTextElement("shop_month", "", tuple);
	        }
        }
        
        return tupleParent;
    }
    
    /*
     * 某地区当年新开门店网点性质汇总
     */
    public static int getStatisticsShopByAreaAndYearAndAttr(String SHOP_AREA, String YEAR)
    {
    	QueryObject query = null;
    	tupleParent = document.createElement("result");
    	Map<String, StatisticsResult> map = new HashMap<String, StatisticsResult>();
    	
    	//根据地区和年度统计该地方的门店数量
    	StringBuffer querySql = new StringBuffer();
        querySql.append("select count(*) as INT_RESULT, SHOP_ATTR as STR_RESULT from \"SHOP_MASTER\" ")
        	.append(" where \"SHOP_AREA\" like '")
        	.append(SHOP_AREA)
        	.append("%' and to_char(\"SUC_OPEN_DATE\",'yyyy') = '")
        	.append(YEAR)
        	.append("' and SHOP_STATUS in ('0','1') group by SHOP_ATTR ");
        query = new QueryObject(querySql.toString());
        query.setResultClass(StatisticsResult.class);

        BusObjectIterator<StatisticsResult> result = query.getObjects();
        if(null != result){
	        while(result.hasMoreElements()){
	        	StatisticsResult sr = (StatisticsResult)result.nextElement();
	        	map.put(sr.getSTR_RESULT(), sr);
	        }
        }
        
        StatisticsResult temp = null;
        int tuple = 0;
        
        BusObjectIterator<DICTIONARY> dics = DICTIONARY.getDictionaryObjectsByType(SHOP_ATTR_TYPE);
        while(dics.hasMoreElements()){
        	DICTIONARY dic = dics.nextElement();
        	tuple = Node.createElement("shop_by_area_year_attr", tupleParent);
            Node.createTextElement("shop_attr", dic.getDESCRIPTION(), tuple);
            temp = (StatisticsResult)map.get(dic.getCODE());
            if(null != temp ){
            	Node.createTextElement("shop_number", String.valueOf(temp.getINT_RESULT()), tuple);		
            } else {
            	Node.createTextElement("shop_number", "0", tuple);
            }
        }
        
        return tupleParent;
    }
    
    /*
     * 某地区当月新开门店地理分布(Google Map图)
     */
    public static int getStatisticsShopAddressByAreaAndMonth(String SHOP_AREA, String MONTH)
    {
    	QueryObject query = null;
    	tupleParent = document.createElement("result");
    	
    	//根据地区和年度统计该地方的门店数量
    	StringBuffer querySql = new StringBuffer();
        querySql.append("select \"SHOP_ADDR\" as STR_RESULT, \"SHOP_DETAIL_ADDR\" as STR_EXT1 from \"SHOP_MASTER\" where \"SHOP_AREA\" like '")
        	.append(SHOP_AREA)
        	.append("%' and to_char(\"SUC_OPEN_DATE\", 'yyyy-mm') = '")
        	.append(MONTH)
        	.append("'")
        	.append(" and SHOP_STATUS in ('0','1')");
        query = new QueryObject(querySql.toString());
        query.setResultClass(StatisticsResult.class);

        BusObjectIterator<StatisticsResult> result = query.getObjects();
        if(null != result){
	        while(result.hasMoreElements()){
	        	StatisticsResult sr = (StatisticsResult)result.nextElement();
	        	int tuple = Node.createElement("shop_address_area_month", tupleParent);
	        	Node.createTextElement("shop_address", String.valueOf(sr.getSTR_RESULT()), tuple);
	        	Node.createTextElement("shop_detail_address", String.valueOf(sr.getSTR_EXT1()), tuple);
	        }
        }
        
        return tupleParent;
    }
    
    /*
     * 全部门店生命周期一览统计图
     */
    public static int getStatisticsShopByLifecycleStatus()
    {
    	String queryText = ""; 
    	QueryObject query = null;
    	tupleParent = document.createElement("result");
    	Map<String, StatisticsResult> map = new HashMap<String, StatisticsResult>();
    	
    	//根据门店生命周期统计门店数量
    	queryText = "select \"LIFECYCLE_STATUS\" as STR_RESULT, count(*) as INT_RESULT from \"SHOP_MASTER\" t group by \"LIFECYCLE_STATUS\" ";
    	query = new QueryObject(queryText);
        query.setResultClass(StatisticsResult.class);

        BusObjectIterator<StatisticsResult> result = query.getObjects();
        
        tupleParent = buildLifeCycleData(map, result, tupleParent);
        
        return tupleParent;
    }

	private static int buildLifeCycleData(Map<String, StatisticsResult> map,
			BusObjectIterator<StatisticsResult> result, int tupleParent) {
		if(null != result){
	        while(result.hasMoreElements()){
	        	StatisticsResult sr = (StatisticsResult)result.nextElement();
	        	map.put(sr.getSTR_RESULT(), sr);
	        }
        }
        
        StatisticsResult temp = null;
        int tuple = 0;
        
        BusObjectIterator<DICTIONARY> dics = DICTIONARY.getDictionaryObjectsByTypeOrderById(SHOP_LIFE_CYCLE_TYPE_01);
        while(dics.hasMoreElements()){
        	DICTIONARY dic = dics.nextElement();
        	tuple = Node.createElement("shop_by_lifecycle", tupleParent);
            Node.createTextElement("生命周期状态", dic.getDESCRIPTION(), tuple);
            temp = (StatisticsResult)map.get(dic.getCODE());
            if(null != temp ){
            	Node.createTextElement("shop_number", String.valueOf(temp.getINT_RESULT()), tuple);		
            } else {
            	Node.createTextElement("shop_number", "0", tuple);
            }
        }
        
        // 分隔线作用（构造空的数据项以供分隔）
        tuple = Node.createElement("shop_by_lifecycle", tupleParent);
        Node.createTextElement("生命周期状态", "", tuple);
        Node.createTextElement("shop_number", "", tuple);
        
        dics = DICTIONARY.getDictionaryObjectsByTypeOrderById(SHOP_LIFE_CYCLE_TYPE_02);
        while(dics.hasMoreElements()){
        	DICTIONARY dic = dics.nextElement();
        	tuple = Node.createElement("shop_by_lifecycle", tupleParent);
            Node.createTextElement("生命周期状态", dic.getDESCRIPTION(), tuple);
            temp = (StatisticsResult)map.get(dic.getCODE());
            if(null != temp ){
            	Node.createTextElement("shop_number", String.valueOf(temp.getINT_RESULT()), tuple);		
            } else {
            	Node.createTextElement("shop_number", "0", tuple);
            }
        }
        
        return tupleParent;
	}
    
    /*
     * 某地区门店生命周期一览统计图
     */
    public static int getStatisticsShopByLifecycleStatusAndArea(String SHOP_AREA)
    {
    	String queryText = ""; 
    	QueryObject query = null;
    	tupleParent = document.createElement("result");
    	Map<String, StatisticsResult> map = new HashMap<String, StatisticsResult>();
    	
    	//根据门店生命周期统计门店数量
    	queryText = "select \"LIFECYCLE_STATUS\" as STR_RESULT, count(*) as INT_RESULT from \"SHOP_MASTER\" t where \"SHOP_AREA\" like '" + SHOP_AREA+ "%' group by \"LIFECYCLE_STATUS\" ";
    	query = new QueryObject(queryText);
    	query.setResultClass(StatisticsResult.class);

        BusObjectIterator<StatisticsResult> result = query.getObjects();

        tupleParent = buildLifeCycleData(map, result, tupleParent);
        
        return tupleParent;
    }
    
    /*
     * 某年度门店生命周期一览统计图
     */
    public static int getStatisticsShopByLifecycleStatusAndYEAR(String YEAR)
    {
    	QueryObject query = null;
    	tupleParent = document.createElement("result");
    	Map<String, StatisticsResult> map = new HashMap<String, StatisticsResult>();
    	
    	//根据门店生命周期统计门店数量
    	StringBuffer querySql = new StringBuffer();
        querySql.append("select t.LIFECYCLE_STATUS as STR_RESULT, count(t.LIFECYCLE_STATUS) as INT_RESULT from SHOP_MASTER t, SHOP_TARGET_INFO s where t.SHOP_ID = s.SHOP_ID and to_char(s.APPLICATION_DATE,'yyyy') = '")
        	.append(YEAR)
        	.append("' group by t.LIFECYCLE_STATUS ");
        
        query = new QueryObject(querySql.toString());
        query.setResultClass(StatisticsResult.class);

        BusObjectIterator<StatisticsResult> result = query.getObjects();

        tupleParent = buildLifeCycleData(map, result, tupleParent);
        
        return tupleParent;
    }
    
    /*
     * 全部流程告警问题月度变化趋势图
     * 分流程执行效率告警问题总数/业务告警问题总数
     */
    public static int getStatisticsLogInfo(){
    	
    	String queryText2 = "";
    	QueryObject query2 = null;
    	tupleParent = document.createElement("result");
    	Map<String, StatisticsResult> map1 = new HashMap<String, StatisticsResult>();
    	
    	//根据月份统计超时记录（流程执行效率告警使用系统NOTF_TASK_INSTANCE表）
    	String nameSpace = "http://schemas.cordys.com/bpm/monitoring/1.0";
		String methodName = "QueryAdminData";
		String dataset = "<dataset><constructor language=\"DBSQL\"><query>select count(*) as INT_RESULT, to_char(t.start_date, 'yyyy-mm') as STR_RESULT from NOTF_TASK_INSTANCE t where ((t.completion_date > t.due_date and t.completed_by is not NULL) or (sysdate > t.due_date and t.completed_by is NULL)) and (t.start_date between add_months(sysdate,-12) and sysdate) group by to_char(t.start_date, 'yyyy-mm') order by to_char(t.start_date, 'yyyy-mm') asc</query><parameters/></constructor></dataset>";
    	SOAPRequestObject sro = new SOAPRequestObject(nameSpace, methodName, null, null);
    	
    	BusObjectIterator<StatisticsResult> resultPro = null;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(dataset));
    		sro.setResultClass(StatisticsResult.class);
			resultPro = sro.getObjects();
		} catch (Exception e) {
			e.printStackTrace();
		}
        
        //根据月份统计COMMON_LOG的记录(业务告警使用COMMON_LOGGER表，添加LOG_LEVEL或CATEGORY字段条件查询)
    	queryText2 = "select count(*) as INT_RESULT, to_char(\"LOG_TIME\", 'yyyy-mm') as STR_RESULT from \"COMMON_LOGGER\" where (LOG_TIME between add_months(sysdate,-12) and sysdate) and CATEGORY = 'com.laiyifen.sap.common.SAPWrapper' group by to_char(\"LOG_TIME\", 'yyyy-mm') order by to_char(\"LOG_TIME\", 'yyyy-mm') asc";
    	query2 = new QueryObject(queryText2);
        query2.setResultClass(StatisticsResult.class);
        BusObjectIterator<StatisticsResult> resultBiz = query2.getObjects();
                
        if(null != resultBiz){
	        while(resultBiz.hasMoreElements()){
	        	StatisticsResult sr = (StatisticsResult) resultBiz.nextElement();
	        	map1.put(sr.getSTR_RESULT(), sr);
	        }
        }
        int timeoutTask = 0;
        if(null != resultPro){
	        while(resultPro.hasMoreElements()){
	        	StatisticsResult srProAlarm = (StatisticsResult) resultPro.nextElement();
	        	StatisticsResult srBizAlarm = (StatisticsResult) map1.get(srProAlarm.getSTR_RESULT());
	        	int tuple = Node.createElement("log_by_month", tupleParent);
	         	Node.createTextElement("log_month", String.valueOf(srProAlarm.getSTR_RESULT()), tuple);
	         	Node.createTextElement("流程执行效率告警问题总数", String.valueOf(srProAlarm.getINT_RESULT()), tuple);
	         	timeoutTask += srProAlarm.getINT_RESULT();
	         	if(null != srBizAlarm){
	         		Node.createTextElement("业务告警问题总数", String.valueOf(srBizAlarm.getINT_RESULT()), tuple);
	         	}else{
	         		Node.createTextElement("业务告警问题总数", "0", tuple);
	         	}
	        }
        }
        
        //统计畅通率
        //总数
        dataset = "<dataset><constructor language=\"DBSQL\"><query>select count(DISTINCT t.SOURCE_INSTANCE_ID) as INT_RESULT from NOTF_TASK_INSTANCE t</query><parameters/></constructor></dataset>";
    	sro = new SOAPRequestObject(nameSpace, methodName, null, null);
    	long taskTotal = 0;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(dataset));
    		sro.setResultClass(StatisticsResult.class);
    		taskTotal = ((StatisticsResult)sro.getObject()).getINT_RESULT();
		} catch (Exception e) {
			e.printStackTrace();
		}
		Node.createTextElement("task_total", String.valueOf(taskTotal), tupleParent);
		
		dataset = "<dataset><constructor language=\"DBSQL\"><query>select count(DISTINCT t.SOURCE_INSTANCE_ID) as INT_RESULT from NOTF_TASK_INSTANCE t where ((t.completion_date > t.due_date and t.completed_by is not NULL) or (sysdate > t.due_date and t.completed_by is NULL))</query><parameters/></constructor></dataset>";
    	sro = new SOAPRequestObject(nameSpace, methodName, null, null);
    	//超时数
    	long taskTimeoutTotal = 0;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(dataset));
    		sro.setResultClass(StatisticsResult.class);
    		taskTimeoutTotal = ((StatisticsResult)sro.getObject()).getINT_RESULT();
		} catch (Exception e) {
			e.printStackTrace();
		}
		Node.createTextElement("task_timeout_total", String.valueOf(taskTimeoutTotal), tupleParent);
		Node.createTextElement("task_intime_total", String.valueOf(taskTotal -taskTimeoutTotal), tupleParent);
		
		Node.createTextElement("timeoutTask", String.valueOf(timeoutTask), tupleParent);
		
		DecimalFormat df = new DecimalFormat("#.00"); 
		if(0 == taskTotal){
        	Node.createTextElement("task_intime_rate", "0%", tupleParent);
        } else {
        	float f = (taskTotal -taskTimeoutTotal) * 100 / taskTotal;
        	Node.createTextElement("task_intime_rate", String.valueOf(df.format(f)) + "%", tupleParent);
        }
        
        return tupleParent;
    }

    /*
     * 某部门流程告警问题月度变化趋势图
     * 分流程执行效率告警问题总数/业务告警问题总数
     */
    public static int getStatisticsLogInfoByDEPARTMENT_CODE(String DEPARTMENT_CODE){
        
    	StringBuffer sb = new StringBuffer();
        if(DEPARTMENT_CODE != null){
        	String[] depts = DEPARTMENT_CODE.split(";");
        	for(String dept : depts){
        		sb.append("'").append(dept).append("'").append(",");
        	}
        	DEPARTMENT_CODE = sb.toString().substring(0,sb.toString().length()-1);
        }
        
        String queryText2 = "";
    	QueryObject query2 = null;
    	tupleParent = document.createElement("result");
    	Map<String, StatisticsResult> map1 = new HashMap<String, StatisticsResult>();
    	
    	//根据月份统计超时记录（流程执行效率告警使用系统NOTF_TASK_INSTANCE表）
    	String nameSpace = "http://schemas.cordys.com/bpm/monitoring/1.0";
		String methodName = "QueryAdminData";
		StringBuffer querySql = new StringBuffer();
        querySql.append("<dataset><constructor language=\"DBSQL\">")
        	.append("<query>")
        	.append("select count(*) as INT_RESULT, to_char(t.start_date, 'yyyy-mm') as STR_RESULT from NOTF_TASK_INSTANCE t, PARTICIPANT_INFOS p where t.task_owner = p.participant_id and ((t.completion_date > t.due_date and t.completed_by is not NULL) or (sysdate > t.due_date and t.completed_by is NULL)) and (t.start_date between add_months(sysdate,-12) and sysdate) and p.dept_id in (")
        	.append(DEPARTMENT_CODE)
        	.append(") group by to_char(t.start_date, 'yyyy-mm') order by to_char(t.start_date, 'yyyy-mm') asc")
        	.append("</query><parameters/></constructor></dataset>");
        String dataset = querySql.toString();
        
    	SOAPRequestObject sro = new SOAPRequestObject(nameSpace, methodName, null, null);
    	
    	BusObjectIterator<StatisticsResult> resultPro = null;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(dataset));
    		sro.setResultClass(StatisticsResult.class);
			resultPro = sro.getObjects();
		} catch (Exception e) {
			e.printStackTrace();
		}
        
		//根据月份统计COMMON_LOG的记录(业务告警使用COMMON_LOGGER表,如有需要，添加LOG_LEVEL或CATEGORY字段条件查询)
    	queryText2 = "select count(*) as INT_RESULT, to_char(\"LOG_TIME\", 'yyyy-mm') as STR_RESULT from \"COMMON_LOGGER\" where \"DEPARTMENT_CODE\" in (" + DEPARTMENT_CODE + ") and (LOG_TIME between add_months(sysdate,-12) and sysdate) and CATEGORY = 'com.laiyifen.sap.common.SAPWrapper' group by to_char(\"LOG_TIME\", 'yyyy-mm') order by to_char(\"LOG_TIME\", 'yyyy-mm') asc";
    	query2 = new QueryObject(queryText2);
    	query2.setResultClass(StatisticsResult.class);
        BusObjectIterator<StatisticsResult> resultBiz = query2.getObjects();
                
        if(null != resultBiz){
	        while(resultBiz.hasMoreElements()){
	        	StatisticsResult sr = (StatisticsResult) resultBiz.nextElement();
	        	map1.put(sr.getSTR_RESULT(), sr);
	        }
        }
        if(null != resultPro){
	        while(resultPro.hasMoreElements()){
	        	StatisticsResult srProAlarm = (StatisticsResult) resultPro.nextElement();
	        	StatisticsResult srBizAlarm = (StatisticsResult) map1.get(srProAlarm.getSTR_RESULT());
	        	int tuple = Node.createElement("log_by_month", tupleParent);
	         	Node.createTextElement("log_month", String.valueOf(srProAlarm.getSTR_RESULT()), tuple);
	         	Node.createTextElement("流程执行效率告警问题总数", String.valueOf(srProAlarm.getINT_RESULT()), tuple);
	         	if(null != srBizAlarm){
	         		Node.createTextElement("业务告警问题总数", String.valueOf(srBizAlarm.getINT_RESULT()), tuple);
	         	}else{
	         		Node.createTextElement("业务告警问题总数", "0", tuple);
	         	}
	        }
        }
        return tupleParent;
    }
    
    /*
     * 获取所有地区
     */
    public static int getAREA(){
    	tupleParent = document.createElement("result");
    	
    	String queryText = " select distinct \"SHOP_AREA\" as STR_RESULT from \"SHOP_MASTER\" ";
    	QueryObject query = new QueryObject(queryText);
    	query.setResultClass(StatisticsResult.class);
    	BusObjectIterator<StatisticsResult> result = query.getObjects();
    	if(null != result){
    		while(result.hasMoreElements()){
    			StatisticsResult sr = (StatisticsResult)result.nextElement();
    			int tuple = Node.createElement("tuple", tupleParent);
	         	Node.createTextElement("area_code", sr.getSTR_RESULT(), tuple);
	         	Node.createTextElement("area_name", sr.getSTR_RESULT(), tuple);
    		}
    	}
    	return tupleParent;
    }
    
    /*
     * 获取所有部门
     */
    public static int getDEPARTMENT(){
    	tupleParent = document.createElement("result");
    	
    	String queryText = " select distinct \"DEPTID\" as STR_RESULT, \"DEPTNAME\" as STR_EXT1 from \"EMPLOYEE_INFO\" ";
    	QueryObject query = new QueryObject(queryText);
    	query.setResultClass(StatisticsResult.class);
    	BusObjectIterator<StatisticsResult> result = query.getObjects();
    	if(null != result){
    		while(result.hasMoreElements()){
    			StatisticsResult sr = (StatisticsResult)result.nextElement();
    			int tuple = Node.createElement("tuple", tupleParent);
	         	Node.createTextElement("dept_code", sr.getSTR_RESULT(), tuple);
	         	Node.createTextElement("dept_name", sr.getSTR_EXT1(), tuple);
    		}
    	}
    	return tupleParent;
    }
    
    /*
     * 获取所有公司
     */
    public static int getAllCompany()
    {
    	tupleParent = document.createElement("result");
    	
    	String queryText = " select distinct \"COMPANY_CODE\" as STR_RESULT, \"COMPANY_NAME\" as STR_EXT1 from \"ORG_COMPANY_INFO\" ";
    	QueryObject query = new QueryObject(queryText);
    	query.setResultClass(StatisticsResult.class);
    	BusObjectIterator<StatisticsResult> result = query.getObjects();
    	if(null != result){
    		while(result.hasMoreElements()){
    			StatisticsResult sr = (StatisticsResult)result.nextElement();
    			int tuple = Node.createElement("tuple", tupleParent);
	         	Node.createTextElement("company_code", sr.getSTR_RESULT(), tuple);
	         	Node.createTextElement("company_name", sr.getSTR_EXT1(), tuple);
    		}
    	}
    	return tupleParent;
    }
    
    /*
     * 网点年度开店匹配率
     */
    public static int getStatisticsShopBasicInfoByCompany(String companyCode)
    {
    	String queryText = ""; 
    	QueryObject query = null;
    	StatisticsResultBase result = null;
    	tupleParent = document.createElement("result");
    	
    	DecimalFormat df = new DecimalFormat("#.00"); 
    	
    	//当前门店总数
    	queryText = "select count(*) as INT_RESULT from \"SHOP_MASTER\" where SHOP_STATUS in ('0','1')";
    	query = new QueryObject(queryText);
        query.setResultClass(StatisticsResult.class);
        result = (StatisticsResult)query.getObject();
        Node.createTextElement("shop_total", String.valueOf(result.getINT_RESULT()), tupleParent);
        
        //年度规划总数
        queryText = "select count(*) as INT_RESULT from \"SHOP_ANNUALPLAN\" ";
    	query = new QueryObject(queryText);
        query.setResultClass(StatisticsResult.class);
        result = (StatisticsResult)query.getObject();
        long shopPlanTotal = result.getINT_RESULT();
        
        //当前开店总体匹配率(SHOP_TARGET_CHECK表无公司信息字段，无法按公司查询，所以此方法查找的是所有的记录)
        queryText = "select count(*) as INT_RESULT from \"SHOP_TARGET_CHECK\" where \"ISINNER_PLANNING\" = '0' ";
        query = new QueryObject(queryText);
        query.setResultClass(StatisticsResult.class);
        result = (StatisticsResult)query.getObject();
        long innerPlanTotal = result.getINT_RESULT();
        if(0 == shopPlanTotal){
        	Node.createTextElement("shop_plan_rate", "0%", tupleParent);
        } else {
        	float f = innerPlanTotal * 100 / shopPlanTotal;
        	Node.createTextElement("shop_plan_rate", String.valueOf(df.format(f)) + "%", tupleParent);
        }
        
        return tupleParent;
    }
    
    /*
     * 门店开店趋势图（月度）
     */
    public static int getStatisticsShopByCompany(String companyCode)
    {
    	tupleParent = document.createElement("result");
    	
    	String sqlCondition = "";
    	if(companyCode != null && !"".equals(companyCode.trim()) && !"1000".equals(companyCode)){
    		sqlCondition += " and CORP_CODE = '" + companyCode + "' ";
    	}
    	
    	StringBuffer querySql = new StringBuffer();
        querySql.append("select count(*) as INT_RESULT, to_char(\"SUC_OPEN_DATE\",'yyyy-mm') as STR_RESULT from \"SHOP_MASTER\" ")
        	.append(" where 1=1 ")
        	.append(sqlCondition)
        	.append(" and SHOP_STATUS in ('0','1') group by to_char(\"SUC_OPEN_DATE\",'yyyy-mm') order by to_char(\"SUC_OPEN_DATE\",'yyyy-mm') asc");
        QueryObject query = new QueryObject(querySql.toString());
        query.setResultClass(StatisticsResult.class);

        BusObjectIterator<StatisticsResult> result = query.getObjects();
        if(null != result){
	        while(result.hasMoreElements()){
	        	StatisticsResult sr = (StatisticsResult)result.nextElement();
	        	int tuple = Node.createElement("shop_by_company", tupleParent);
	        	Node.createTextElement("shop_number", String.valueOf(sr.getINT_RESULT()), tuple);
	        	Node.createTextElement("shop_month", String.valueOf(sr.getSTR_RESULT()), tuple);
	        }
	        if(!result.hasMoreElements()){
	        	int tuple = Node.createElement("shop_by_company", tupleParent);
	        	Node.createTextElement("shop_number", "", tuple);
	        	Node.createTextElement("shop_month", "", tuple);
	        }
        }
        
        return tupleParent;
    }
    
    /*
     * 流程发起驳回率（TOP5）
     */
    public static int getStatisticsProcessRejectTop5()
    {
    	String queryText = ""; 
    	QueryObject query = null;
    	tupleParent = document.createElement("result");
    	
    	//APPROVAL_HISTORY表APP_RESULT字段表示被驳回的发起人工号
    	//oracle此语言无法执行多表group，Mysql正确，所以分拆统计
    	//queryText = "select count(h.APP_RESULT) as INT_RESULT, e.GIVENNAME as STR_RESULT from APPROVAL_HISTORY h, EMPLOYEE_INFO e " +
    	//		" where h.APP_RESULT = e.EMPLOYEEID and rownum < 6 group by h.APP_RESULT order by INT_RESULT desc ";
    	
    	
    	queryText = "select * from EMPLOYEE_INFO";
    	query = new QueryObject(queryText);
        query.setResultClass(EMPLOYEE_INFO.class);
        BusObjectIterator<EMPLOYEE_INFO> employees = query.getObjects();
        Map<String, EMPLOYEE_INFO> employeeMap = new HashMap<String, EMPLOYEE_INFO>();
        while(employees.hasMoreElements()){
        	EMPLOYEE_INFO em = (EMPLOYEE_INFO)employees.nextElement();
        	employeeMap.put(em.getEMPLOYEEID(), em);
        }
    	
    	//queryText = "select count(h.APP_RESULT) as INT_RESULT, h.APP_RESULT as STR_RESULT from APPROVAL_HISTORY h, EMPLOYEE_INFO e where h.APP_RESULT = e.EMPLOYEEID and rownum < 6 group by h.APP_RESULT order by INT_RESULT desc ";
        StringBuffer querySql = new StringBuffer();
        querySql.append("select INT_RESULT, STR_RESULT ")
        	.append(" from (select count(h.APP_RESULT) as INT_RESULT, h.APP_RESULT as STR_RESULT ")
        	.append(" from APPROVAL_HISTORY h, EMPLOYEE_INFO e where h.APP_RESULT = e.EMPLOYEEID group by h.APP_RESULT order by INT_RESULT desc) ")
        	.append(" where rownum < 6 ");
        query = new QueryObject(querySql.toString());
        query.setResultClass(StatisticsResult.class);

        BusObjectIterator<StatisticsResult> result = query.getObjects();
        if(null != result){
	        while(result.hasMoreElements()){
	        	StatisticsResult sr = (StatisticsResult)result.nextElement();
	        	int tuple = Node.createElement("process_reject", tupleParent);
	        	Node.createTextElement("reject_number", String.valueOf(sr.getINT_RESULT()), tuple);
	        	Node.createTextElement("commit_name", employeeMap.get(sr.getSTR_RESULT()).getSN() + employeeMap.get(sr.getSTR_RESULT()).getGIVENNAME(), tuple);
	        }
        }
        
        return tupleParent;
    }
    
    /*
     * 某公司某部门流程告警问题月度变化趋势图
     */
    public static int getStatisticsLogInfoByCompanyAndDepartment(String company, String department){
    	
        tupleParent = document.createElement("result");
        
        String sqlCondition = "";
    	if(company != null && !"".equals(company.trim()) && !"1000".equals(company)){
    		sqlCondition += " and p.company_code = '" + company + "' ";
    	}
    	
        StringBuffer sb = new StringBuffer();
        if(department != null){
        	String[] depts = department.split(";");
        	for(String dept : depts){
        		sb.append("'").append(dept).append("'").append(",");
        	}
        	department = sb.toString().substring(0,sb.toString().length()-1);
        }
    	
        //根据月份统计超时记录（流程执行效率告警使用系统NOTF_TASK_INSTANCE表）
    	String nameSpace = "http://schemas.cordys.com/bpm/monitoring/1.0";
		String methodName = "QueryAdminData";
		//String dataset = "<dataset><constructor language=\"DBSQL\"><query>select count(*) as INT_RESULT, to_char(t.start_date, 'yyyy-mm') as STR_RESULT from NOTF_TASK_INSTANCE t, PARTICIPANT_INFOS p where t.task_owner = p.participant_id and ((t.completion_date > t.due_date and t.completed_by is not NULL) or (sysdate > t.due_date and t.completed_by is NULL)) and (t.start_date between add_months(sysdate,-12) and sysdate) and p.dept_id in (" + department + ") and p.company_code = '" + company + "' group by to_char(t.start_date, 'yyyy-mm') order by to_char(t.start_date, 'yyyy-mm') asc</query><parameters/></constructor></dataset>";
		String dataset = "<dataset><constructor language=\"DBSQL\"><query>select count(*) as INT_RESULT, to_char(t.start_date, 'yyyy-mm') as STR_RESULT from NOTF_TASK_INSTANCE t, PARTICIPANT_INFOS p where t.task_owner = p.participant_id and ((t.completion_date > t.due_date and t.completed_by is not NULL) or (sysdate > t.due_date and t.completed_by is NULL)) and (t.start_date between add_months(sysdate,-12) and sysdate) " + sqlCondition + " group by to_char(t.start_date, 'yyyy-mm') order by to_char(t.start_date, 'yyyy-mm') asc</query><parameters/></constructor></dataset>";
    	
		SOAPRequestObject sro = new SOAPRequestObject(nameSpace, methodName, null, null);
    	
    	BusObjectIterator<StatisticsResult> resultPro = null;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(dataset));
    		sro.setResultClass(StatisticsResult.class);
			resultPro = sro.getObjects();
		} catch (Exception e) {
			e.printStackTrace();
		}
        
		
        if(null != resultPro){
	        while(resultPro.hasMoreElements()){
	        	StatisticsResult srProAlarm = (StatisticsResult) resultPro.nextElement();
	        	int tuple = Node.createElement("log_by_month", tupleParent);
	         	Node.createTextElement("log_month", String.valueOf(srProAlarm.getSTR_RESULT()), tuple);
	         	Node.createTextElement("流程执行效率告警问题总数", String.valueOf(srProAlarm.getINT_RESULT()), tuple);
	        }
	        if(!resultPro.hasMoreElements()){
	        	int tuple = Node.createElement("log_by_month", tupleParent);
	         	Node.createTextElement("log_month", "", tuple);
	         	Node.createTextElement("流程执行效率告警问题总数", "", tuple);
	        }
        }
        return tupleParent;
    }
    
    /*
     * 新开店流程告警问题月度变化趋势图
     */
    public static int getStatisticsLogInfoByCompanyAndShopType(String company, String shopType){
    	
        tupleParent = document.createElement("result");
        
        String sqlCondition = "";
    	if(company != null && !"".equals(company.trim()) && !"1000".equals(company)){
    		sqlCondition += " and p.company_code = '" + company + "' ";
    	}
    	
        //根据月份统计超时记录（流程执行效率告警使用系统NOTF_TASK_INSTANCE表）
    	String nameSpace = "http://schemas.cordys.com/bpm/monitoring/1.0";
		String methodName = "QueryAdminData";
		String dataset = "<dataset><constructor language=\"DBSQL\"><query>select count(*) as INT_RESULT, to_char(t.start_date, 'yyyy-mm') as STR_RESULT from NOTF_TASK_INSTANCE t, PARTICIPANT_INFOS p where t.task_owner = p.participant_id and ((t.completion_date > t.due_date and t.completed_by is not NULL) or (sysdate > t.due_date and t.completed_by is NULL)) and (t.start_date between add_months(sysdate,-12) and sysdate) " + sqlCondition + " and t.source_instance_id in (select INSTANCE_ID from business_identifier_string where identifier_id in (select identifier_id from business_identifier_revision where identifier_description = '流程类别') and identifier_value = '" + shopType + "') group by to_char(t.start_date, 'yyyy-mm') order by to_char(t.start_date, 'yyyy-mm') asc</query><parameters/></constructor></dataset>";
    	
		SOAPRequestObject sro = new SOAPRequestObject(nameSpace, methodName, null, null);
    	
    	BusObjectIterator<StatisticsResult> resultPro = null;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(dataset));
    		sro.setResultClass(StatisticsResult.class);
			resultPro = sro.getObjects();
		} catch (Exception e) {
			e.printStackTrace();
		}
        
		int timeoutTask = 0;
        if(null != resultPro){
	        while(resultPro.hasMoreElements()){
	        	StatisticsResult srProAlarm = (StatisticsResult) resultPro.nextElement();
	        	timeoutTask += srProAlarm.getINT_RESULT();
	        	int tuple = Node.createElement("log_by_month", tupleParent);
	         	Node.createTextElement("log_month", String.valueOf(srProAlarm.getSTR_RESULT()), tuple);
	         	Node.createTextElement("流程执行效率告警问题总数", String.valueOf(srProAlarm.getINT_RESULT()), tuple);
	        }
	        if(!resultPro.hasMoreElements()){
	        	int tuple = Node.createElement("log_by_month", tupleParent);
	         	Node.createTextElement("log_month", "", tuple);
	         	Node.createTextElement("流程执行效率告警问题总数", "", tuple);
	        }
        }
        
        Node.createTextElement("timeoutTask", String.valueOf(timeoutTask), tupleParent);
        
        return tupleParent;
    }
    
    /*
     * 个人流程（业务超时）告警问题月度变化趋势图
     */
	public static int getStatisticsTimeoutLogInfoByUser(String userDn)
    {
		tupleParent = document.createElement("result");
    	
        //根据月份统计超时记录（流程执行效率告警使用系统NOTF_TASK_INSTANCE表）
    	String nameSpace = "http://schemas.cordys.com/bpm/monitoring/1.0";
		String methodName = "QueryAdminData";
		String dataset = "<dataset><constructor language=\"DBSQL\"><query>select count(*) as INT_RESULT, to_char(t.start_date, 'yyyy-mm') as STR_RESULT from NOTF_TASK_INSTANCE t, PARTICIPANT_INFOS p where t.task_owner = p.participant_id and ((t.completion_date > t.due_date and t.completed_by is not NULL) or (sysdate > t.due_date and t.completed_by is NULL)) and (t.start_date between add_months(sysdate,-12) and sysdate) and p.distinct_name = '" + userDn + "' group by to_char(t.start_date, 'yyyy-mm') order by to_char(t.start_date, 'yyyy-mm') asc</query><parameters/></constructor></dataset>";
    	SOAPRequestObject sro = new SOAPRequestObject(nameSpace, methodName, null, null);
    	
    	BusObjectIterator<StatisticsResult> resultPro = null;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(dataset));
    		sro.setResultClass(StatisticsResult.class);
			resultPro = sro.getObjects();
		} catch (Exception e) {
			e.printStackTrace();
		}
        
		
        if(null != resultPro){
	        while(resultPro.hasMoreElements()){
	        	StatisticsResult srProAlarm = (StatisticsResult) resultPro.nextElement();
	        	int tuple = Node.createElement("log_by_month", tupleParent);
	         	Node.createTextElement("log_month", String.valueOf(srProAlarm.getSTR_RESULT()), tuple);
	         	Node.createTextElement("流程执行效率告警问题总数", String.valueOf(srProAlarm.getINT_RESULT()), tuple);
	        }
        }
        return tupleParent;
    }
	
	public static BusObjectIterator<com.cordys.cpc.bsf.busobject.BusObject> getStatisticsTimeoutTasksByCompanyAndDepartmentAndYmdate(String companyCode, String deptCode, String ymDate)
    {
		StringBuffer sb = new StringBuffer();
        if(deptCode != null){
        	String[] depts = deptCode.split(";");
        	for(String dept : depts){
        		sb.append("'").append(dept).append("'").append(",");
        	}
        	deptCode = sb.toString().substring(0,sb.toString().length()-1);
        }
        
		String sqlCondition = "";
    	if(companyCode != null && !"".equals(companyCode.trim()) && !"1000".equals(companyCode)){
    		sqlCondition += " and p.company_code = '" + companyCode + "' ";
    	}
    	if(deptCode != null && !"".equals(deptCode.trim()) && !"''".equals(deptCode.trim())){
    		sqlCondition += " and p.dept_id in (" + deptCode + ") ";
    	}
    	if(ymDate != null && !"".equals(ymDate.trim())){
    		sqlCondition += " and to_char(t.start_date, 'yyyy-mm') = '" + ymDate + "' ";
    	}
        
		//根据月份统计超时记录（流程执行效率告警使用系统NOTF_TASK_INSTANCE表）
    	String nameSpace = "http://schemas.cordys.com/bpm/monitoring/1.0";
		String methodName = "QueryAdminData";
		String dataset = "<dataset><constructor language=\"DBSQL\"><query>select t.TASK_INSTANCE_ID,t.SUBJECT,t.COMPLETION_DATE,t.DUE_DATE,t.SOURCE_NAME,t.DELIVERY_DATE,p.EMPLOYEE_NAME from NOTF_TASK_INSTANCE t, PARTICIPANT_INFOS p where t.task_owner = p.participant_id and ((t.completion_date > t.due_date and t.completed_by is not NULL) or (sysdate > t.due_date and t.completed_by is NULL)) " + sqlCondition + " </query><parameters/></constructor></dataset>";
		
		SOAPRequestObject sro = new SOAPRequestObject(nameSpace, methodName, null, null);
    	BusObjectIterator rst = null;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(dataset));
    		rst = sro.getObjects();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return rst;
    }
	
	public static BusObjectIterator<com.cordys.cpc.bsf.busobject.BusObject> getStatisticsTimeoutTasksByCompanyAndShopTypeAndYmdate(String companyCode, String shopType, String ymDate)
    {
		String sqlCondition = "";
    	if(companyCode != null && !"".equals(companyCode.trim()) && !"1000".equals(companyCode)){
    		sqlCondition += " and p.company_code = '" + companyCode + "' ";
    	}
    	if(ymDate != null && !"".equals(ymDate.trim())){
    		sqlCondition += " and to_char(t.start_date, 'yyyy-mm') = '" + ymDate + "' ";
    	}
    	
		//根据月份统计超时记录（流程执行效率告警使用系统NOTF_TASK_INSTANCE表）
    	String nameSpace = "http://schemas.cordys.com/bpm/monitoring/1.0";
		String methodName = "QueryAdminData";
		String dataset = "<dataset><constructor language=\"DBSQL\"><query>select t.TASK_INSTANCE_ID,t.SUBJECT,t.COMPLETION_DATE,t.DUE_DATE,t.SOURCE_NAME,t.DELIVERY_DATE,p.EMPLOYEE_NAME from NOTF_TASK_INSTANCE t, PARTICIPANT_INFOS p where t.task_owner = p.participant_id and ((t.completion_date > t.due_date and t.completed_by is not NULL) or (sysdate > t.due_date and t.completed_by is NULL)) " + sqlCondition + " and t.source_instance_id in (select INSTANCE_ID from business_identifier_string where identifier_id in (select identifier_id from business_identifier_revision where identifier_description = '流程类别') and identifier_value = '" + shopType + "')</query><parameters/></constructor></dataset>";
		
		SOAPRequestObject sro = new SOAPRequestObject(nameSpace, methodName, null, null);
    	
    	BusObjectIterator rst = null;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(dataset));
    		rst = sro.getObjects();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return rst;
    }
	
	public static BusObjectIterator<com.cordys.cpc.bsf.busobject.BusObject> getStatisticsTimeoutProcess()
    {        
		//根据流程维度统计超时记录（流程执行效率告警使用系统NOTF_TASK_INSTANCE表）
    	String nameSpace = "http://schemas.cordys.com/bpm/monitoring/1.0";
		String methodName = "QueryAdminData";
		String dataset = "";
		dataset = "<dataset><constructor language=\"DBSQL\"><query>select DISTINCT t.SOURCE_INSTANCE_ID,t.SOURCE_NAME,p.DESCRIPTION,p.START_TIME,p.END_TIME,p.USER_NAME,p1.EMPLOYEE_NAME from NOTF_TASK_INSTANCE t, PROCESS_INSTANCE p, PARTICIPANT_INFOS p1 where t.SOURCE_INSTANCE_ID = p.INSTANCE_ID and p.USER_NAME = p1.DISTINCT_NAME and ((t.completion_date > t.due_date and t.completed_by is not NULL) or (sysdate > t.due_date and t.completed_by is NULL)) order by p.START_TIME</query><parameters/></constructor></dataset>";
		
		SOAPRequestObject sro = new SOAPRequestObject(nameSpace, methodName, null, null);
    	
    	BusObjectIterator rst = null;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(dataset));
    		rst = sro.getObjects();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return rst;
    }
	
	public static BusObjectIterator<com.cordys.cpc.bsf.busobject.BusObject> getStatisticsTimeoutTasksByProcess(String instanceId)
    {
        
		//根据流程实例统计超时记录（流程执行效率告警使用系统NOTF_TASK_INSTANCE表）
    	String nameSpace = "http://schemas.cordys.com/bpm/monitoring/1.0";
		String methodName = "QueryAdminData";
		String dataset = "";
		dataset = "<dataset><constructor language=\"DBSQL\"><query>select t.TASK_INSTANCE_ID,t.SUBJECT,t.COMPLETION_DATE,t.DUE_DATE,t.SOURCE_NAME,t.DELIVERY_DATE,p.EMPLOYEE_NAME from NOTF_TASK_INSTANCE t, PARTICIPANT_INFOS p where t.task_owner = p.participant_id and t.SOURCE_INSTANCE_ID = '" +instanceId+ "' and ((t.completion_date > t.due_date and t.completed_by is not NULL) or (sysdate > t.due_date and t.completed_by is NULL))</query><parameters/></constructor></dataset>";

		SOAPRequestObject sro = new SOAPRequestObject(nameSpace, methodName, null, null);
    	
    	BusObjectIterator rst = null;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(dataset));
    		rst = sro.getObjects();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return rst;
    }
    
    public void onInsert()
    {
    }

    public void onUpdate()
    {
    }

    public void onDelete()
    {
    }
    
    public static void main(String[] args) {
		
		//sendSoap();
		
		try {
			invokeSoapRequest();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
    
    /*
     * WS-App调用复杂XML参数Web Service的通用方法示例1
     * Author：徐新宇
     */
    public static void sendSoap() {
		
		/*
		<SOAP:Envelope xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
			<SOAP:Body>
				<QueryAdminData xmlns="http://schemas.cordys.com/bpm/monitoring/1.0">
					<dataset>
						<classname>PARAMETER</classname>
						<constructor language="">
							<cursor id="0" position="0" numRows="5" maxRows="99999" sameConnection="false" connId="">PARAMETER</cursor>
							<parameters>PARAMETER</parameters>
							<query defaultQuery="">PARAMETER</query>
						</constructor>
						<query>
							<table>PARAMETER</table>
							<condition>PARAMETER</condition>
						</query>
					</dataset>
				</QueryAdminData>
			</SOAP:Body>
		</SOAP:Envelope>
		
		//demo
		<SOAP:Envelope xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/">
			<SOAP:Body>
				<QueryAdminData xmlns="http://schemas.cordys.com/bpm/monitoring/1.0">
					<dataset>
						<constructor language="DBSQL">
							<query>SELECT INSTANCE_ID,RUNTIME_DOCUMENT_ID,WORKSPACE_ID FROM PROCESS_INSTANCE WHERE INSTANCE_ID =:P1</query>
							<parameters>
								<P1 xmlns="" dd="PROCESS_INSTANCE.INSTANCE_ID">96d7840c-3b1d-42c9-960b-4ac7013b3de2</P1>
							</parameters>
						</constructor>
					</dataset>
				</QueryAdminData>
			</SOAP:Body>
		</SOAP:Envelope>
		*/
		
		String nameSpace = "http://schemas.cordys.com/bpm/monitoring/1.0";
		String methodName = "QueryAdminData";
		
		//String dataset = "<dataset><constructor language=\"DBSQL\"><Query>SELECT INSTANCE_ID,RUNTIME_DOCUMENT_ID,WORKSPACE_ID FROM PROCESS_INSTANCE WHERE INSTANCE_ID =:P1</Query>"
		//	+ "<Parameters>"
		//	+ "<P1 xmlns=\"\" dd=\"PROCESS_INSTANCE.INSTANCE_ID\">96d7840c-3b1d-42c9-960b-4ac7013b3de2</P1>"
		//	+ "</Parameters></constructor></dataset>";
		
		String dataset = "<dataset><constructor language=\"DBSQL\"><query>SELECT INSTANCE_ID,RUNTIME_DOCUMENT_ID,WORKSPACE_ID FROM PROCESS_INSTANCE</query><parameters/></constructor></dataset>";
    	
    	SOAPRequestObject sro = new SOAPRequestObject(nameSpace, methodName, null, null);
    	
    	int response = 0;
    	try {
    		//sro.addParameterAsXml(BSF.getXMLDocument().parseString(dataset));
    		sro.addParameterAsXml(new Document().parseString(dataset));
			response = sro.execute();
			System.out.println(Node.writeToString(response,true));
			response = 0;
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			if(response != 0){
				Node.delete(response);
				response = 0;
			}
		}
	}
    
    /*
     * WS-App调用复杂XML参数Web Service的通用方法示例2
     * Author：徐新宇
     */
    public static void invokeSoapRequest()throws Exception
	{
	    int envRequest = 0;
	    int responseNode = 0;
	    
	    Connector con = Connector.getInstance("Anonymous Connector");
	
	    if (!con.isOpen())
	    {
	        con.open();
	    }
	
	    String namespace = "http://schemas.cordys.com/bpm/monitoring/1.0";
	    String methodName = "QueryAdminData";
	    String dataset = "<dataset><constructor language=\"DBSQL\"><query>SELECT * FROM PROCESS_INSTANCE</query><parameters/></constructor></dataset>";
    	
	    try
	    {
	        //build the soap method
	    	final int methodNode = con.createSOAPMethod(namespace, methodName);    
	    	
	    	//add parameters
	        Node.appendToChildren(new Document().parseString(dataset), methodNode);
	
	        envRequest = Node.getRoot(methodNode);
	        
	        responseNode = con.sendAndWait(envRequest);
	        
	        System.out.println(Node.writeToString(responseNode, true));
	    }
	    catch (Exception e)
	    {
	        throw e;
	    }
	    finally
	    {
	    	Node.delete(envRequest);
	    	Node.delete(responseNode);
	    }
	}
    
    /*
     * 查询自定义字段而返回集合的通用方法示例
     * 任何QueryObject对象的查询都可以返回BusObject对象或者AnonymousBusObject对象的集合和单条记录，只需接口定义成返回类型为BusObject对象即可
     * Author：徐新宇
     */
    public static BusObjectIterator<com.cordys.cpc.bsf.busobject.BusObject> getCustomData()
    {
    	//例如此处返回带count统计的自定义字段和自定义名称的字段
    	String queryText = "select \"SHOP_AREA\" as ShopArea, count(*) as ShopCount from \"SHOP_MASTER\" t group by \"SHOP_AREA\" ";
    	
    	QueryObject query = new QueryObject(queryText);
    	
    	//定义返回类型为BusObject或者AnonymousBusObject通用对象，或者根本不指定返回对象，使用默认的query.getObjects()对象类型
        //query.setResultClass(com.cordys.cpc.bsf.busobject.BusObject.class);
        //query.setResultClass(com.cordys.cpc.bsf.busobject.AnonymousBusObject.class);
        
        return query.getObjects();
    }
	
    /*
     * 按年统计1-12月新开门店数
     */
	public static int statisticsOfShopByYear(String year)
    {
		tupleParent = document.createElement("result");
    
    	StringBuffer querySql = new StringBuffer();
        querySql.append("select count(*) as INT_RESULT, to_char(\"SUC_OPEN_DATE\",'yyyy-mm') as STR_RESULT from \"SHOP_MASTER\" ")
        	.append(" where to_char(\"SUC_OPEN_DATE\",'yyyy') = '")
        	.append(year)
        	.append("' and SHOP_STATUS in ('0','1') group by to_char(\"SUC_OPEN_DATE\",'yyyy-mm') order by to_char(\"SUC_OPEN_DATE\",'yyyy-mm') asc");
        QueryObject query = new QueryObject(querySql.toString());
        query.setResultClass(StatisticsResult.class);

        BusObjectIterator<StatisticsResult> result = query.getObjects();
        if(null != result){
	        while(result.hasMoreElements()){
	        	StatisticsResult sr = (StatisticsResult)result.nextElement();
	        	int tuple = Node.createElement("shop_by_area_year_month", tupleParent);
	        	Node.createTextElement("shop_number", String.valueOf(sr.getINT_RESULT()), tuple);
	        	Node.createTextElement("shop_month", sr.getSTR_RESULT().split("-")[1] + "月", tuple);
	        }
	        if(!result.hasMoreElements()){
	        	int tuple = Node.createElement("shop_by_area_year_month", tupleParent);
	        	Node.createTextElement("shop_number", "", tuple);
	        	Node.createTextElement("shop_month", "", tuple);
	        }
        }
        
        return tupleParent;
    }
	
	/*
     * 按年月统计各地区新开门店数
     */
	public static int statisticsOfShopByYearAndMonth(String year, String month)
    {
		tupleParent = document.createElement("result");
    	
    	String ymDate = year + "-" + (month.length() < 2 ? "0" + month : month);
    	
    	StringBuffer querySql = new StringBuffer();
        querySql.append("select \"SHOP_AREA\" as STR_RESULT, count(*) as INT_RESULT from \"SHOP_MASTER\" t where to_char(\"SUC_OPEN_DATE\",'yyyy-mm') = '")
        	.append(ymDate)
        	.append("' and SHOP_STATUS in ('0','1') group by \"SHOP_AREA\" ");
        QueryObject query = new QueryObject(querySql.toString());
        query.setResultClass(StatisticsResult.class);

        BusObjectIterator<StatisticsResult> result = query.getObjects();
        if(null != result){
	        while(result.hasMoreElements()){
	        	StatisticsResult sr = (StatisticsResult)result.nextElement();
	        	int tuple = Node.createElement("shop_by_area", tupleParent);
	        	Node.createTextElement("shop_number", String.valueOf(sr.getINT_RESULT()), tuple);
	        	Node.createTextElement("shop_area", String.valueOf(sr.getSTR_RESULT()), tuple);
	        }
	        if(!result.hasMoreElements()){
	        	int tuple = Node.createElement("shop_by_area", tupleParent);
	        	Node.createTextElement("shop_number", "", tuple);
	        	Node.createTextElement("shop_area", "", tuple);
	        }
        }
        
        return tupleParent;
    }

	/*
     * 按年月、地区、店员统计门店地址
     */
	public static int statisticsOfShopAddressByYearAndMonthAndAreaAndClerk(String year, String month, String area, String clerkName)
    {
		tupleParent = document.createElement("result");
    	
    	String ymDate = year + "-" + (month.length() < 2 ? "0" + month : month);
    	
    	StringBuffer querySql = new StringBuffer();
    	if(clerkName != null && !"".equals(clerkName.trim())){
    		querySql.append("select m.SHOP_ADDR as STR_RESULT, m.SHOP_DETAIL_ADDR as STR_EXT1 from SHOP_MASTER m, SHOP_TARGET_INFO t where  m.SHOP_ID = t.SHOP_ID and m.SHOP_AREA like '")
        		.append(area)
        		.append("%' and to_char(m.SUC_OPEN_DATE, 'yyyy-mm') = '")
        		.append(ymDate)
        		.append("' and t.USER_NAME = '")
        		.append(clerkName)
        		.append("'")
            	.append(" and m.SHOP_STATUS in ('0','1')");
    	}else{
    		querySql.append("select \"SHOP_ADDR\" as STR_RESULT, \"SHOP_DETAIL_ADDR\" as STR_EXT1 from \"SHOP_MASTER\" where \"SHOP_AREA\" like '")
    			.append(area)
    			.append("%' and to_char(SUC_OPEN_DATE, 'yyyy-mm') = '")
    			.append(ymDate)
    			.append("'")
            	.append(" and SHOP_STATUS in ('0','1')");
    	}
    	QueryObject query = new QueryObject(querySql.toString());
        query.setResultClass(StatisticsResult.class);

        BusObjectIterator<StatisticsResult> result = query.getObjects();
        if(null != result){
	        while(result.hasMoreElements()){
	        	StatisticsResult sr = (StatisticsResult)result.nextElement();
	        	int tuple = Node.createElement("shop_address_area_month", tupleParent);
	        	Node.createTextElement("shop_address", String.valueOf(sr.getSTR_RESULT()), tuple);
	        	Node.createTextElement("shop_detail_address", String.valueOf(sr.getSTR_EXT1()), tuple);
	        }
        }
        
        return tupleParent;
    }

	/*
     * 按年月、地区、店员分组统计门店
     */
	public static int statisticsOfShopByYearAndMonthAndAreaGroupClerk(String year, String month, String area)
    {
		tupleParent = document.createElement("result");
    	
    	String ymDate = year + "-" + (month.length() < 2 ? "0" + month : month);
    	
    	StringBuffer querySql = new StringBuffer();    
    	querySql.append("select count(*) as INT_RESULT, USER_NAME as STR_RESULT from ")
    		.append("(select t.SHOP_ID, t.USER_NAME from \"SHOP_MASTER\" m, SHOP_TARGET_INFO t where m.SHOP_ID = t.SHOP_ID and to_char(m.SUC_OPEN_DATE,'yyyy-mm') = '")
    		.append(ymDate)
    		.append("' and m.SHOP_AREA like '")
    		.append(area)
    		.append("%' and m.SHOP_STATUS in ('0','1')) group by USER_NAME");
    	
    	QueryObject query = new QueryObject(querySql.toString());
        query.setResultClass(StatisticsResult.class);

        BusObjectIterator<StatisticsResult> result = query.getObjects();
        if(null != result){
	        while(result.hasMoreElements()){
	        	StatisticsResult sr = (StatisticsResult)result.nextElement();
	        	int tuple = Node.createElement("shop_by_area", tupleParent);
	        	Node.createTextElement("shop_number", String.valueOf(sr.getINT_RESULT()), tuple);
	        	Node.createTextElement("shop_clerk", String.valueOf(sr.getSTR_RESULT()), tuple);
	        }
        }
        
        return tupleParent;
    }
	
	/*
     * 按年月、地区、店员分组统计门店
     */
    public static BusObjectIterator<com.laiyifen.shop.SHOP_MASTER> statisticsOfShopByYearMonthAreaClerk(String year, String month, String area, String clerkName)
    {
    	String ymDate = year + "-" + (month.length() < 2 ? "0" + month : month);
    	
    	StringBuffer querySql = new StringBuffer();       
    	if(clerkName != null && !"".equals(clerkName.trim())){
    		querySql.append("select m.* from SHOP_MASTER m, SHOP_TARGET_INFO t where  m.SHOP_ID = t.SHOP_ID and m.SHOP_AREA like '")
        		.append(area)
        		.append("%' and to_char(m.SUC_OPEN_DATE, 'yyyy-mm') = '")
        		.append(ymDate)
        		.append("' and t.USER_NAME = '")
        		.append(clerkName)
        		.append("'")
            	.append(" and m.SHOP_STATUS in ('0','1')");
    	}else{
    		querySql.append("select * from \"SHOP_MASTER\" where \"SHOP_AREA\" like '")
        		.append(area)
        		.append("%' and to_char(\"SUC_OPEN_DATE\", 'yyyy-mm') = '")
        		.append(ymDate)
        		.append("'")
            	.append(" and SHOP_STATUS in ('0','1')");
    	}
    	
        QueryObject query = new QueryObject(querySql.toString());
        query.setResultClass(SHOP_MASTER.class);
        
        return query.getObjects();
    }

    public static int statisticsOfShopPlanByYearAndMonthAndArea(String year, String month, String area)
    {
    	QueryObject query = null;
    	StatisticsResultBase result = null;
    	tupleParent = document.createElement("result");
    	
    	String ymDate = year + "-" + (month.length() < 2 ? "0" + month : month);
    	
    	StringBuffer querySql = new StringBuffer();
        querySql.append("select count(*) as INT_RESULT from \"SHOP_MASTER\" where SHOP_AREA like '")
        	.append(area)
        	.append("%' and to_char(\"SUC_OPEN_DATE\",'yyyy-mm') = '")
        	.append(ymDate)
        	.append("'")
        	.append(" and SHOP_STATUS in ('0','1')");
        query = new QueryObject(querySql.toString());
        query.setResultClass(StatisticsResult.class);
        result = (StatisticsResult)query.getObject();
        
        int tuple = Node.createElement("shop_by_area", tupleParent);
        long shopOpenTotal = result.getINT_RESULT();
    	Node.createTextElement("shop_number", String.valueOf(shopOpenTotal), tuple);
    	Node.createTextElement("shop_area", "实际开店", tuple);
        
        querySql = new StringBuffer();
        querySql.append("select SUM(p.MONTH")
        	.append(month)
        	.append(") as DBL_RESULT from \"SHOP_MONTHLY_PLAN\" p, SHOP_MASTER m where m.CORP_CODE = p.SUBCOMPANY_CODE and m.SHOP_AREA like '")
        	.append(area)
        	.append("%' and p.YEAR = ")
        	.append(year);
        query = new QueryObject(querySql.toString());
        query.setResultClass(StatisticsResult.class);
        result = (StatisticsResult)query.getObject();
        tuple = Node.createElement("shop_by_area", tupleParent);
        double shopPlanTotal = result.getDBL_RESULT();
    	Node.createTextElement("shop_number", String.valueOf(shopPlanTotal), tuple);
    	Node.createTextElement("shop_area", "计划开店", tuple);
    	
    	DecimalFormat df = new DecimalFormat("#.00");
    	if(0 == shopPlanTotal){
        	Node.createTextElement("shop_plan_rate", "0%", tupleParent);
        } else {
        	double f = shopOpenTotal * 100 / shopPlanTotal;
        	Node.createTextElement("shop_plan_rate", String.valueOf(df.format(f)) + "%", tupleParent);
        }
    	
        return tupleParent;
    }
	
	public static int statisticsOfBasicInfoByYearMonthOrQuarter(String year, String month, String byMonth)
    {
		String queryText1 = ""; 
		String queryText2 = "";
    	QueryObject query = null;
    	StatisticsResultBase result = null;
    	tupleParent = document.createElement("result");
    	
    	DecimalFormat df = new DecimalFormat("#.00"); 
    	
    	if("Y".equals(byMonth)){//按年统计
    		queryText1 = "select count(*) as INT_RESULT from \"SHOP_MASTER\" where to_char(\"SUC_OPEN_DATE\",'yyyy') = '" + year + "' and SHOP_STATUS in ('0','1')";
    		queryText2 = "select SUM(MONTH1)+SUM(MONTH2)+SUM(MONTH3)+SUM(MONTH4)+SUM(MONTH5)+SUM(MONTH6)+SUM(MONTH7)+SUM(MONTH8)+SUM(MONTH9)+SUM(MONTH10)+SUM(MONTH11)+SUM(MONTH12) as DBL_RESULT from \"SHOP_MONTHLY_PLAN\" where YEAR = " + year;
    	}else if("M".equals(byMonth)){//按年月统计
    		String ymDate = year + "-" + (month.length() < 2 ? "0" + month : month);
    		queryText1 = "select count(*) as INT_RESULT from \"SHOP_MASTER\" where to_char(\"SUC_OPEN_DATE\",'yyyy-mm') = '" + ymDate + "' and SHOP_STATUS in ('0','1')";
    		queryText2 = "select SUM(MONTH" + month + ") as DBL_RESULT from \"SHOP_MONTHLY_PLAN\" where YEAR = " + year;
    	}else if("Q".equals(byMonth)){//按季度统计
    		if("1".equals(month)){
    			String startDate = year + "-01";
        		String endDate = year + "-03";
    			queryText1 = "select count(*) as INT_RESULT from \"SHOP_MASTER\" where to_char(\"SUC_OPEN_DATE\",'yyyy-mm') between '" + startDate + "' and '" + endDate + "' and SHOP_STATUS in ('0','1')";
    			queryText2 = "select SUM(MONTH1)+SUM(MONTH2)+SUM(MONTH3) as DBL_RESULT from \"SHOP_MONTHLY_PLAN\" where YEAR = " + year;
    		}else if ("2".equals(month)){
    			String startDate = year + "-04";
        		String endDate = year + "-06";
    			queryText1 = "select count(*) as INT_RESULT from \"SHOP_MASTER\" where to_char(\"SUC_OPEN_DATE\",'yyyy-mm') between '" + startDate + "' and '" + endDate + "' and SHOP_STATUS in ('0','1')";
    			queryText2 = "select SUM(MONTH4)+SUM(MONTH5)+SUM(MONTH6) as DBL_RESULT from \"SHOP_MONTHLY_PLAN\" where YEAR = " + year;
    		}else if ("3".equals(month)){
    			String startDate = year + "-07";
        		String endDate = year + "-09";
    			queryText1 = "select count(*) as INT_RESULT from \"SHOP_MASTER\" where to_char(\"SUC_OPEN_DATE\",'yyyy-mm') between '" + startDate + "' and '" + endDate + "' and SHOP_STATUS in ('0','1')";
    			queryText2 = "select SUM(MONTH7)+SUM(MONTH8)+SUM(MONTH9) as DBL_RESULT from \"SHOP_MONTHLY_PLAN\" where YEAR = " + year;	
    		}else if ("4".equals(month)){
    			String startDate = year + "-10";
        		String endDate = year + "-12";
    			queryText1 = "select count(*) as INT_RESULT from \"SHOP_MASTER\" where to_char(\"SUC_OPEN_DATE\",'yyyy-mm') between '" + startDate + "' and '" + endDate + "' and SHOP_STATUS in ('0','1')";
    			queryText2 = "select SUM(MONTH10)+SUM(MONTH11)+SUM(MONTH12) as DBL_RESULT from \"SHOP_MONTHLY_PLAN\" where YEAR = " + year;
    		}else{
    			String startDate = year + "-01";
        		String endDate = year + "-03";
    			queryText1 = "select count(*) as INT_RESULT from \"SHOP_MASTER\" where to_char(\"SUC_OPEN_DATE\",'yyyy-mm') between '" + startDate + "' and '" + endDate + "' and SHOP_STATUS in ('0','1')";
    			queryText2 = "select SUM(MONTH1)+SUM(MONTH2)+SUM(MONTH3) as DBL_RESULT from \"SHOP_MONTHLY_PLAN\" where YEAR = " + year;
    		}
    	}else{
    		return tupleParent;
    	}
    	
    	//时间段开店数
    	query = new QueryObject(queryText1);
        query.setResultClass(StatisticsResult.class);
        result = (StatisticsResult)query.getObject();
        long shopOpenTotal = result.getINT_RESULT();
        Node.createTextElement("shop_open_total", String.valueOf(result.getINT_RESULT()), tupleParent);
        
        //时间段计划总数
        query = new QueryObject(queryText2);
        query.setResultClass(StatisticsResult.class);
        result = (StatisticsResult)query.getObject();
        double shopPlanTotal = result.getDBL_RESULT();
        Node.createTextElement("shop_plan_total", String.valueOf(shopPlanTotal), tupleParent);
        
        //时间段开店完成率
        if(0 == shopPlanTotal){
        	Node.createTextElement("shop_plan_rate", "0%", tupleParent);
        } else {
        	double f = shopOpenTotal * 100 / shopPlanTotal;
        	Node.createTextElement("shop_plan_rate", String.valueOf(df.format(f)) + "%", tupleParent);
        }
    	
        return tupleParent;
    }
	
	/*
     * 统计总体流程数,在执行流程数,已完成流程数,超时流程数和问题流程数
     *  @param 无
     *  @return	以XML形式返回顶级流程实例信息
     */
    @SuppressWarnings("unchecked")
	public static int getStatisticsProcessInfo(){
    	tupleParent = document.createElement("result");
    	String nameSpace = "http://schemas.cordys.com/bpm/monitoring/1.0";
		String methodName = "QueryAdminData";
		
		String datasetTaskCount = "<dataset><constructor language=\"DBSQL\"><query>select count(DISTINCT pi.INSTANCE_ID) as INT_RESULT from PROCESS_INSTANCE pi where pi.PARENT_ID='0'</query><parameters/></constructor></dataset>";
    	SOAPRequestObject sro = new SOAPRequestObject(nameSpace, methodName, null, null);
    	BusObjectIterator<StatisticsResult> resultTaskCount = null;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(datasetTaskCount));
    		sro.setResultClass(StatisticsResult.class);
    		resultTaskCount = sro.getObjects();
		} catch (Exception e) {
			e.printStackTrace();
		}
    	if(null != resultTaskCount){
	        while(resultTaskCount.hasMoreElements()){
	        	StatisticsResult srProAlarm = (StatisticsResult) resultTaskCount.nextElement();
	        	Node.createTextElement("TaskCount", String.valueOf(srProAlarm.getINT_RESULT()), tupleParent);
	        }
        }
    	
    	String datasetExecuteCount = "<dataset><constructor language=\"DBSQL\"><query>select count(DISTINCT pi.INSTANCE_ID) as INT_RESULT from PROCESS_INSTANCE pi where pi.PARENT_ID='0' and pi.STATUS='WAITING' </query><parameters/></constructor></dataset>";
    	BusObjectIterator<StatisticsResult> resultExecuteCount = null;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(datasetExecuteCount));
    		sro.setResultClass(StatisticsResult.class);
    		resultExecuteCount = sro.getObjects();
		} catch (Exception e) {
			e.printStackTrace();
		}
    	if(null != resultExecuteCount){
	        while(resultExecuteCount.hasMoreElements()){
	        	StatisticsResult srProAlarm = (StatisticsResult) resultExecuteCount.nextElement();
	        	Node.createTextElement("ExecuteCount", String.valueOf(srProAlarm.getINT_RESULT()), tupleParent);
	        }
        }
    	
        String datasetCompleteCount = "<dataset><constructor language=\"DBSQL\"><query>select count(DISTINCT pi.INSTANCE_ID) as INT_RESULT from PROCESS_INSTANCE pi where pi.PARENT_ID='0' and pi.STATUS='COMPLETE'</query><parameters/></constructor></dataset>";
    	BusObjectIterator<StatisticsResult> resultCompleteCount = null;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(datasetCompleteCount));
    		sro.setResultClass(StatisticsResult.class);
    		resultCompleteCount = sro.getObjects();
		} catch (Exception e) {
			e.printStackTrace();
		}
    	if(null != resultCompleteCount){
	        while(resultCompleteCount.hasMoreElements()){
	        	StatisticsResult srProAlarm = (StatisticsResult) resultCompleteCount.nextElement();
	        	Node.createTextElement("CompleteCount", String.valueOf(srProAlarm.getINT_RESULT()), tupleParent);
	        }
        }
    	
    	String datasetProblemCount = "<dataset><constructor language=\"DBSQL\"><query>select count(DISTINCT pi.INSTANCE_ID) as INT_RESULT from PROCESS_INSTANCE pi where pi.PARENT_ID='0' and pi.STATUS='ABORTED'</query><parameters/></constructor></dataset>";
    	BusObjectIterator<StatisticsResult> resultProblemCount = null;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(datasetProblemCount));
    		sro.setResultClass(StatisticsResult.class);
    		resultProblemCount = sro.getObjects();
		} catch (Exception e) {
			e.printStackTrace();
		}
    	if(null != resultProblemCount){
	        while(resultProblemCount.hasMoreElements()){
	        	StatisticsResult srProAlarm = (StatisticsResult) resultProblemCount.nextElement();
	        	Node.createTextElement("ProblemCount", String.valueOf(srProAlarm.getINT_RESULT()), tupleParent);
	        }
        }
    	
    	String datasetTimeOutCount = "<dataset><constructor language=\"DBSQL\"><query>select count(DISTINCT t.SOURCE_INSTANCE_ID) as INT_RESULT from NOTF_TASK_INSTANCE t where ((t.completion_date > t.due_date and t.completed_by is not NULL) or (sysdate > t.due_date and t.completed_by is NULL))</query><parameters/></constructor></dataset>";
    	sro = new SOAPRequestObject(nameSpace, methodName, null, null);
    	//超时数
    	long taskTimeoutTotal = 0;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(datasetTimeOutCount));
    		sro.setResultClass(StatisticsResult.class);
    		taskTimeoutTotal = ((StatisticsResult)sro.getObject()).getINT_RESULT();
		} catch (Exception e) {
			e.printStackTrace();
		}
    	
	    Node.createTextElement("TimeOutCount",String.valueOf(taskTimeoutTotal), tupleParent);
    	
        return tupleParent;
    }
    
    /*
     * 返回所有下一层子流程
     *  @param processInstanceId 
     *  @return	以数组形式返回所有流程实例
     */
    @SuppressWarnings("unchecked")
	public static BusObjectIterator<StatisticsResult> getAllSubProcessInstance(String processInstanceId)
    {  
    	String nameSpace = "http://schemas.cordys.com/bpm/monitoring/1.0";
		String methodName = "QueryAdminData";
    	String datasetProblemCount = "<dataset><constructor language=\"DBSQL\"><query>select INSTANCE_ID as STR_RESULT  from PROCESS_INSTANCE where PARENT_ID='"+processInstanceId+"'</query><parameters/></constructor></dataset>";
    	SOAPRequestObject sro = new SOAPRequestObject(nameSpace, methodName, null, null);
    	BusObjectIterator<StatisticsResult> resultProblemCount = null;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(datasetProblemCount));
    		sro.setResultClass(StatisticsResult.class);
    		resultProblemCount = sro.getObjects();
		} catch (Exception e) {
			e.printStackTrace();
		}
        return resultProblemCount;
    }
    /*
     * 递归遍历获取所有子流程实例
     *  @param processInstanceId 
     *  @return	以数组形式返回所有流程实例
     */
    public static List<String> getRecursiveAllProcessInstance(String processInstanceId){
    	BusObjectIterator<StatisticsResult> subProcessInstanceObj=getAllSubProcessInstance(processInstanceId);
    	if(null != subProcessInstanceObj){
	        while(subProcessInstanceObj.hasMoreElements()){
	        	StatisticsResult srProAlarm = (StatisticsResult) subProcessInstanceObj.nextElement();
	        	String processInstance=String.valueOf(srProAlarm.getSTR_RESULT());
	        	resultProcessInstance.add(processInstance);
	        	getRecursiveAllProcessInstance(processInstance);
	        }
        }
    	return resultProcessInstance;
    }
    /*
     * 递归遍历获取所有子流程实例
     *  @param 无
     *  @return	以数组形式返回所有流程实例
     */
    @SuppressWarnings("unused")
    public static BusObjectIterator<Process_Instance> getAllProcess()
    {
    	String nameSpace = "http://schemas.cordys.com/bpm/monitoring/1.0";
		String methodName = "QueryAdminData";
		String dataset = "";
		dataset = "<dataset><constructor language=\"DBSQL\"><query>select DESCRIPTION as DESCRIPTION,USER_NAME as USER_NAME,STATUS as STATUS,INSTANCE_ID as INSTANCE_ID from PROCESS_INSTANCE where PARENT_ID='0'</query><parameters/></constructor></dataset>";

		SOAPRequestObject sro = new SOAPRequestObject(nameSpace, methodName, null, null);
		BusObjectIterator<Process_Instance> resultInfoObj = null;
    	try {
    		sro.addParameterAsXml(BSF.getXMLDocument().parseString(dataset));
    		sro.setResultClass(Process_Instance.class);
    		resultInfoObj = sro.getObjects();
		} catch (Exception e) {
			e.printStackTrace();
		}
    	if(null != resultInfoObj){
	        while(resultInfoObj.hasMoreElements()){
	        	List<String> result = new ArrayList<String>();
	        	Process_Instance srProAlarm = (Process_Instance) resultInfoObj.nextElement();
	        	String processInstance=String.valueOf(srProAlarm.getINSTANCE_ID());
	        	result=getRecursiveAllProcessInstance(processInstance);
		        for(int i=0;i<result.size();i++){
					String procInstanceValue=result.get(i);
		        }
		        resultProcessInstance.clear();
	        }
        }
		return resultInfoObj;
    }
    
}
