/*
  This class has been generated by the Code Generator
*/

package com.laiyifen.shop;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import java.util.Vector;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.event.AfterCommitObjectEvent;
import com.cordys.cpc.bsf.util.ObjectHelper;
import com.laiyifen.common.core.APPROVAL_HISTORY;
import com.laiyifen.common.core.ATTACHMENT;
import com.laiyifen.common.util.BusObjectHelper;
import com.laiyifen.shop.util.ShopUtil;
/*
 * 复合对象增加，修改，删除和提交后处理操作.
 * @Author Jiang
 */

public class CompositeShopTargetInfo extends CompositeShopTargetInfoBase
{
	private SHOP_TARGET_INFO shopTargetInfoObject = null;
	private SHOP_TARGET_CIRCLE_INFO shopTargetCircleInfoObject = null;
	private SHOP_MASTER shopMasterObject=null;
	private SHOP_TARGET_CHECK shopTargetCheckObject = null;
	private SHOP_TARGET_ASSESMENT shopTargetAssesmentObject =null;
	private Vector<SHOP_TARGET_ESTIMATION> shopTargetEstimations = new Vector<SHOP_TARGET_ESTIMATION>();
	private APPROVAL_HISTORY approvalHistoryObject = null;
	private Vector<APPROVAL_HISTORY> approvalHistorys = new Vector<APPROVAL_HISTORY>();
	private ATTACHMENT attachment = null;
	private Vector<ATTACHMENT> attachments = new Vector<ATTACHMENT>();
	
    public CompositeShopTargetInfo()
    {
        this((BusObjectConfig)null);
    }

    public CompositeShopTargetInfo(BusObjectConfig config)
    {
        super(config);
    }
    /*
     * 通过Form_ID获取复合对象
     * @param Form_ID
     */
    public static com.laiyifen.shop.CompositeShopTargetInfo getCompositeShopTargetInfoObject(String form_ID,String shop_ID)
    {
    	CompositeShopTargetInfo compositeTargetShopObject = new CompositeShopTargetInfo();

		SHOP_TARGET_INFO shopTargetInfo = SHOP_TARGET_INFO
				.getShopTargetInfoObject(form_ID);
		compositeTargetShopObject.setSHOP_TARGET_INFOObject(shopTargetInfo);

		SHOP_TARGET_CHECK shopTargetCheckInfo = SHOP_TARGET_CHECK
				.getShopTargetCheckObjectForFormId(form_ID);
		compositeTargetShopObject
				.setSHOP_TARGET_CHECKObject(shopTargetCheckInfo);
		
		SHOP_MASTER shopMasterInfo = SHOP_MASTER.getShopMasterObject(shop_ID);
		compositeTargetShopObject.setSHOP_MASTERObject(shopMasterInfo);

		SHOP_TARGET_CIRCLE_INFO shopTargetCircleInfo = SHOP_TARGET_CIRCLE_INFO
				.getShopTargetCircleInfoObjectForFormId(form_ID);
		compositeTargetShopObject
				.setSHOP_TARGET_CIRCLE_INFOObject(shopTargetCircleInfo);
		
		SHOP_TARGET_ASSESMENT shopTargetAssesmentInfo = SHOP_TARGET_ASSESMENT.getShopTargetAssesmentObjectForFormId(form_ID);
		compositeTargetShopObject.setSHOP_TARGET_ASSESMENTObject(shopTargetAssesmentInfo);
		
		BusObjectIterator<SHOP_TARGET_ESTIMATION> shopTargetEstimationObj = SHOP_TARGET_ESTIMATION.getShopTargetEstimationObjectsForFormId(form_ID);

		if (shopTargetEstimationObj != null) {
			while (shopTargetEstimationObj.hasMoreElements()) {
				SHOP_TARGET_ESTIMATION shopTargetEstimationInfo = (SHOP_TARGET_ESTIMATION) shopTargetEstimationObj
						.nextElement();
				compositeTargetShopObject.addSHOP_TARGET_ESTIMATIONObject(shopTargetEstimationInfo);
			}
		}

		BusObjectIterator<ATTACHMENT> attachmentObj = ATTACHMENT
				.getAttachment(form_ID);
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj
						.nextElement();
				compositeTargetShopObject.addATTACHMENTObject(attachmentInfo);
			}
		}

		BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = APPROVAL_HISTORY
				.getApprovalHistory(form_ID);
		if (approvalHistoryObj != null) {
			while (approvalHistoryObj.hasMoreElements()) {
				APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj
						.nextElement();
				compositeTargetShopObject
						.addAPPROVAL_HISTORYObject(approvalHistoryInfo);
			}
		}
		
		compositeTargetShopObject.makeTransient();
		return compositeTargetShopObject;
    }
    /*
     * 插入复合对象
     * @see com.cordys.cpc.bsf.busobject.BusObject#onInsert()
     */
    public void onInsert()
    {
    	// Removing the unnecessary objects from the parent object.
		BusObjectHelper.removeEmptyChildren(this);
		ShopUtil _formIDGenerator = new ShopUtil();
		String formID = _formIDGenerator.setFormID(null);

		ShopUtil _shopIDGenerator = new ShopUtil();
		String shopID = _shopIDGenerator.setShopID(null);
		
		SHOP_TARGET_INFO shopTargetInfo =this.getSHOP_TARGET_INFOObject();
		if (shopTargetInfo != null) {
			shopTargetInfo.setFORM_ID(formID);
			shopTargetInfo.setSHOP_ID(shopID);
			shopTargetInfoObject = (SHOP_TARGET_INFO) ObjectHelper
					.createObjectForInsert(shopTargetInfo,
							com.laiyifen.shop.SHOP_TARGET_INFO.class, false);
			shopTargetInfoObject.insert();
		}
		
		SHOP_MASTER  shopMasterInfo = this.getSHOP_MASTERObject();
		if(shopMasterInfo!=null){
		  if(shopTargetInfo!=null){
			if(shopTargetInfo.getPROVINCE_CODE()!=null){
				shopMasterInfo.setSHOP_AREACODE(shopTargetInfo.getPROVINCE_CODE());
			}
			if(shopTargetInfo.getHOUSE_PROPERTY_CODE()!=null){
				shopMasterInfo.setSHOP_ATTR(shopTargetInfo.getHOUSE_PROPERTY_CODE());
			}
			if(shopTargetInfo.getLANDLORD_CODE()!=null){
				shopMasterInfo.setHOUSE_ATTR(shopTargetInfo.getLANDLORD_CODE());
			}
		  }
			shopMasterObject = (SHOP_MASTER) ObjectHelper
			.createObjectForInsert(shopMasterInfo,
					com.laiyifen.shop.SHOP_MASTER.class,
					false);
			shopMasterObject.insert();
		}

		SHOP_TARGET_CIRCLE_INFO shopTargetCircleInfo = this.getSHOP_TARGET_CIRCLE_INFOObject();
		if (shopTargetCircleInfo != null) {
			shopTargetCircleInfoObject = (SHOP_TARGET_CIRCLE_INFO) ObjectHelper
					.createObjectForInsert(shopTargetCircleInfo,
							com.laiyifen.shop.SHOP_TARGET_CIRCLE_INFO.class,
							false);
			shopTargetCircleInfoObject.insert();
		}

		SHOP_TARGET_CHECK shopTargetCheckInfo = this.getSHOP_TARGET_CHECKObject();
		if (shopTargetCheckInfo != null) {
			shopTargetCheckObject = (SHOP_TARGET_CHECK) ObjectHelper
					.createObjectForInsert(shopTargetCheckInfo,
							com.laiyifen.shop.SHOP_TARGET_CHECK.class, false);
			shopTargetCheckObject.insert();
		}
		
		SHOP_TARGET_ASSESMENT shopTargetAssesmentInfo = this.getSHOP_TARGET_ASSESMENTObject();
		if(shopTargetAssesmentInfo !=null){
			shopTargetAssesmentObject = (SHOP_TARGET_ASSESMENT) ObjectHelper
			.createObjectForInsert(shopTargetAssesmentInfo,
					com.laiyifen.shop.SHOP_TARGET_ASSESMENT.class, false);
			shopTargetAssesmentObject.insert();
		}
		
		BusObjectIterator<SHOP_TARGET_ESTIMATION> shopTargetEstimationObj = this.getSHOP_TARGET_ESTIMATIONObjects();
		if (shopTargetEstimationObj != null || !shopTargetEstimationObj.equals("")) {
			while (shopTargetEstimationObj.hasMoreElements()) {
				SHOP_TARGET_ESTIMATION shopTargetEstimationInfo = (SHOP_TARGET_ESTIMATION) shopTargetEstimationObj
						.nextElement();
				SHOP_TARGET_ESTIMATION shopTargetEstimationObject = (SHOP_TARGET_ESTIMATION) ObjectHelper
						.createObjectForInsert(shopTargetEstimationInfo,
								com.laiyifen.shop.SHOP_TARGET_ESTIMATION.class,
								false);
				shopTargetEstimationObject.insert();
				shopTargetEstimations.add(shopTargetEstimationObject);
			}
		}

		BusObjectHelper.unlinkChildren(this, SHOP_TARGET_ESTIMATION.class);

		BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this
				.getAPPROVAL_HISTORYObjects();
		if (approvalHistoryObj != null) {
			while (approvalHistoryObj.hasMoreElements()) {
				APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj
						.nextElement();
				approvalHistoryObject = (APPROVAL_HISTORY) ObjectHelper
						.createObjectForInsert(
								approvalHistoryInfo,
								com.laiyifen.common.core.APPROVAL_HISTORY.class,
								false);
				approvalHistoryObject.insert();
				approvalHistorys.add(approvalHistoryObject);
			}
		}

		BusObjectHelper.unlinkChildren(this, APPROVAL_HISTORY.class);

		BusObjectIterator<ATTACHMENT> attachmentObj = this
				.getATTACHMENTObjects();
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj
						.nextElement();
				attachment = (ATTACHMENT) ObjectHelper.createObjectForInsert(
						attachmentInfo,
						com.laiyifen.common.core.ATTACHMENT.class, false);
				attachment.insert();
				attachments.add(attachment);
			}
		}
		BusObjectHelper.unlinkChildren(this, ATTACHMENT.class);
    }
    
    /*
	 * 更新复合对象
	 * @see com.cordys.cpc.bsf.busobject.BusObject#onUpdate()
	 */
    public void onUpdate()
    {
    	BusObjectHelper.removeEmptyChildren(this);
		SHOP_TARGET_INFO shopTargetInfo =this.getSHOP_TARGET_INFOObject();
		
		if (shopTargetInfo != null) {
			shopTargetInfoObject = (SHOP_TARGET_INFO) ObjectHelper
					.createObjectForUpdate(shopTargetInfo,
							com.laiyifen.shop.SHOP_TARGET_INFO.class, false);
			shopTargetInfoObject.update();
		}

		SHOP_TARGET_CIRCLE_INFO shopTargetCircleInfo = this.getSHOP_TARGET_CIRCLE_INFOObject();
		if (shopTargetCircleInfo != null) {
			shopTargetCircleInfoObject = (SHOP_TARGET_CIRCLE_INFO) ObjectHelper
					.createObjectForUpdate(shopTargetCircleInfo,
							com.laiyifen.shop.SHOP_TARGET_CIRCLE_INFO.class,
							false);
			shopTargetCircleInfoObject.update();
		}
		
		SHOP_MASTER  shopMasterInfo = this.getSHOP_MASTERObject();
		if(shopMasterInfo!=null){
			if(shopTargetInfo != null){
				if(shopTargetInfo.getPROVINCE_CODE()!=null){
					shopMasterInfo.setSHOP_AREACODE(shopTargetInfo.getPROVINCE_CODE());
				}
				if(shopTargetInfo.getHOUSE_PROPERTY_CODE()!=null){
					shopMasterInfo.setSHOP_ATTR(shopTargetInfo.getHOUSE_PROPERTY_CODE());
				}
				if(shopTargetInfo.getLANDLORD_CODE()!=null){
					shopMasterInfo.setHOUSE_ATTR(shopTargetInfo.getLANDLORD_CODE());
				}
			}
			shopMasterObject = (SHOP_MASTER) ObjectHelper
			.createObjectForUpdate(shopMasterInfo,
					com.laiyifen.shop.SHOP_MASTER.class,
					false);
			shopMasterObject.update();
		}

		SHOP_TARGET_CHECK shopTargetCheckInfo = this.getSHOP_TARGET_CHECKObject();
		if (shopTargetCheckInfo != null) {
			shopTargetCheckObject = (SHOP_TARGET_CHECK) ObjectHelper
					.createObjectForUpdate(shopTargetCheckInfo,
							com.laiyifen.shop.SHOP_TARGET_CHECK.class, false);
			shopTargetCheckObject.update();
		}
		
		SHOP_TARGET_ASSESMENT shopTargetAssesmentInfo = this.getSHOP_TARGET_ASSESMENTObject();
		if(shopTargetAssesmentInfo !=null){
			shopTargetAssesmentObject = (SHOP_TARGET_ASSESMENT) ObjectHelper
			.createObjectForUpdate(shopTargetAssesmentInfo,
					com.laiyifen.shop.SHOP_TARGET_ASSESMENT.class, false);
			shopTargetAssesmentObject.update();
		}

		BusObjectIterator<SHOP_TARGET_ESTIMATION> shopTargetEstimationObj = this.getSHOP_TARGET_ESTIMATIONObjects();
		if (shopTargetEstimationObj != null) {
			while (shopTargetEstimationObj.hasMoreElements()) {
				SHOP_TARGET_ESTIMATION shopTargetEstimationInfo = (SHOP_TARGET_ESTIMATION) shopTargetEstimationObj
						.nextElement();
				SHOP_TARGET_ESTIMATION shopTargetEstimationObject = (SHOP_TARGET_ESTIMATION) ObjectHelper
						.createObjectForUpdate(shopTargetEstimationInfo,
								com.laiyifen.shop.SHOP_TARGET_ESTIMATION.class,
								false);
				shopTargetEstimationObject.update();
				shopTargetEstimations.add(shopTargetEstimationObject);
			}
		}

		BusObjectHelper.unlinkChildren(this, SHOP_TARGET_ESTIMATION.class);

		BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this
				.getAPPROVAL_HISTORYObjects();
		if (approvalHistoryObj != null) {
			while (approvalHistoryObj.hasMoreElements()) {
				APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj
						.nextElement();
				approvalHistoryObject = (APPROVAL_HISTORY) ObjectHelper
						.createObjectForUpdate(
								approvalHistoryInfo,
								com.laiyifen.common.core.APPROVAL_HISTORY.class,
								false);
				approvalHistoryObject.update();
				approvalHistorys.add(approvalHistoryObject);
			}
		}

		BusObjectHelper.unlinkChildren(this, APPROVAL_HISTORY.class);

		BusObjectIterator<ATTACHMENT> attachmentObj = this
				.getATTACHMENTObjects();
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj
						.nextElement();
				attachment = (ATTACHMENT) ObjectHelper.createObjectForUpdate(
						attachmentInfo,
						com.laiyifen.common.core.ATTACHMENT.class, false);
				attachment.update();
				attachments.add(attachment);
			}
		}

		BusObjectHelper.unlinkChildren(this, ATTACHMENT.class);
    }
    /*
	 * 删除复合对象
	 * @see com.cordys.cpc.bsf.busobject.BusObject#onDelete()
	 */
    public void onDelete()
    {
    	BusObjectHelper.removeEmptyChildren(this);
		SHOP_TARGET_INFO shopTargetInfo = this.getSHOP_TARGET_INFOObject();
		if (shopTargetInfo != null) {
			shopTargetInfoObject=(SHOP_TARGET_INFO)ObjectHelper.createObjectForDelete(shopTargetInfo,
					com.laiyifen.shop.SHOP_TARGET_INFO.class, true);
			shopTargetInfoObject.delete();
		}

		SHOP_TARGET_CIRCLE_INFO shopTargetCircleInfo = this.getSHOP_TARGET_CIRCLE_INFOObject();
		if (shopTargetCircleInfo != null) {
			shopTargetCircleInfoObject=(SHOP_TARGET_CIRCLE_INFO)ObjectHelper.createObjectForDelete(shopTargetCircleInfo,
					com.laiyifen.shop.SHOP_TARGET_CIRCLE_INFO.class, true);
			shopTargetCircleInfoObject.delete();
		}

		SHOP_TARGET_CHECK shopTargetCheckInfo = this.getSHOP_TARGET_CHECKObject();
		if (shopTargetCheckInfo != null) {
			shopTargetCheckObject=(SHOP_TARGET_CHECK)ObjectHelper.createObjectForDelete(shopTargetCheckInfo,
					com.laiyifen.shop.SHOP_TARGET_CHECK.class, true);
			shopTargetCheckObject.delete();
		} 
		
		SHOP_TARGET_ASSESMENT shopTargetAssesmentInfo = this.getSHOP_TARGET_ASSESMENTObject();
		if(shopTargetAssesmentInfo !=null){
			shopTargetAssesmentObject = (SHOP_TARGET_ASSESMENT) ObjectHelper
			.createObjectForDelete(shopTargetAssesmentInfo,
					com.laiyifen.shop.SHOP_TARGET_ASSESMENT.class, false);
			shopTargetAssesmentObject.delete();
		}

		BusObjectIterator<SHOP_TARGET_ESTIMATION> shopTargetEstimationObj = this.getSHOP_TARGET_ESTIMATIONObjects();
		if (shopTargetEstimationObj != null) {
			while (shopTargetEstimationObj.hasMoreElements()) {
				SHOP_TARGET_ESTIMATION shopTargetEstimationInfo = (SHOP_TARGET_ESTIMATION) shopTargetEstimationObj
						.nextElement();
				ObjectHelper.createObjectForDelete(shopTargetEstimationInfo,
						com.laiyifen.shop.SHOP_TARGET_ESTIMATION.class, true);
				shopTargetEstimationInfo.delete();
			}
		}

		BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = this
				.getAPPROVAL_HISTORYObjects();
		if (approvalHistoryObj != null) {
			while (approvalHistoryObj.hasMoreElements()) {
				APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj
						.nextElement();
				ObjectHelper.createObjectForDelete(approvalHistoryInfo,
						com.laiyifen.common.core.APPROVAL_HISTORY.class, true);
				approvalHistoryInfo.delete();
			}
		}

		BusObjectIterator<ATTACHMENT> attachmentObj = this
				.getATTACHMENTObjects();
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj
						.nextElement();
				ObjectHelper.createObjectForDelete(attachmentInfo,
						com.laiyifen.common.core.ATTACHMENT.class, true);
				attachmentInfo.delete();
			}
		}
    }
    /*
     * 通过Form_ID,shop_ID删除复合对象
     * @param Form_ID
     * @param shop_ID
     */
    public static void deleteCompositeShopTargetInfo(String form_ID,String shop_ID){
    	SHOP_TARGET_INFO shopTargetInfo = SHOP_TARGET_INFO
				.getShopTargetInfoObject(form_ID);
    	if(shopTargetInfo!=null){
    		shopTargetInfo.delete();
    	}
    	
    	SHOP_TARGET_CHECK shopTargetCheckInfo = SHOP_TARGET_CHECK
				.getShopTargetCheckObjectForFormId(form_ID);
    	if(shopTargetCheckInfo!=null){
    		shopTargetCheckInfo.delete();
    	}
    	
    	SHOP_MASTER shopMasterInfo = SHOP_MASTER.getShopMasterObject(shop_ID);
    	if(shopMasterInfo!=null){
    		shopMasterInfo.delete();
    	}
    	
    	SHOP_TARGET_CIRCLE_INFO shopTargetCircleInfo = SHOP_TARGET_CIRCLE_INFO
				.getShopTargetCircleInfoObjectForFormId(form_ID);
    	if(shopTargetCircleInfo!=null){
    	  SHOP_TARGET_CIRCLE_INFO	shopTargetCircleInfoDeleteObject=(SHOP_TARGET_CIRCLE_INFO)ObjectHelper.createObjectForDelete(shopTargetCircleInfo,
					com.laiyifen.shop.SHOP_TARGET_CIRCLE_INFO.class, true);
    	  shopTargetCircleInfoDeleteObject.delete();
    	}
    	
    	SHOP_TARGET_ASSESMENT shopTargetAssesmentInfo = SHOP_TARGET_ASSESMENT.getShopTargetAssesmentObjectForFormId(form_ID);
    	if(shopTargetAssesmentInfo!=null){
    		shopTargetAssesmentInfo.delete();
    	}
    	
    	BusObjectIterator<SHOP_TARGET_ESTIMATION> shopTargetEstimationObj = SHOP_TARGET_ESTIMATION.getShopTargetEstimationObjectsForFormId(form_ID);
		if (shopTargetEstimationObj != null) {
			while (shopTargetEstimationObj.hasMoreElements()) {
				SHOP_TARGET_ESTIMATION shopTargetEstimationInfo = (SHOP_TARGET_ESTIMATION) shopTargetEstimationObj
						.nextElement();
				shopTargetEstimationInfo.delete();
			}
		}
		
		BusObjectIterator<ATTACHMENT> attachmentObj = ATTACHMENT.getAttachment(form_ID);
		if (attachmentObj != null) {
			while (attachmentObj.hasMoreElements()) {
				ATTACHMENT attachmentInfo = (ATTACHMENT) attachmentObj.nextElement();
				attachmentInfo.delete();
			}
		}
		
		BusObjectIterator<APPROVAL_HISTORY> approvalHistoryObj = APPROVAL_HISTORY
				.getApprovalHistory(form_ID);
		if (approvalHistoryObj != null) {
			while (approvalHistoryObj.hasMoreElements()) {
				APPROVAL_HISTORY approvalHistoryInfo = (APPROVAL_HISTORY) approvalHistoryObj
						.nextElement();
				approvalHistoryInfo.delete();
			}
		}
    	
    }
    
    /*
	 * 提交后把复合对象返回前端,并且清空变量
	 * @see com.cordys.cpc.bsf.busobject.BusObject#onAfterCommit(com.cordys.cpc.bsf.event.AfterCommitObjectEvent)
	 */
	@Override
	public void onAfterCommit(AfterCommitObjectEvent event) {
		// TODO Auto-generated method stub
		super.onAfterCommit(event);
		this.createResponseObject();
		this.clear();
	}

	/**
	 * Create the composite response object.
	 */
	private void createResponseObject() {
		// Persistable objects we can modify, so first make transient.
		this.makeTransient();

		if (shopTargetInfoObject != null) {
			this.setSHOP_TARGET_INFOObject(shopTargetInfoObject);
		}

		if (shopTargetCircleInfoObject != null) {
			this.setSHOP_TARGET_CIRCLE_INFOObject(shopTargetCircleInfoObject);
		}

		if (shopTargetCheckObject != null) {
			this.setSHOP_TARGET_CHECKObject(shopTargetCheckObject);
		}
		
		if(shopMasterObject !=null){
			this.setSHOP_MASTERObject(shopMasterObject);
		}

		for (SHOP_TARGET_ESTIMATION shopTargetEstimation : shopTargetEstimations) {
			this.addSHOP_TARGET_ESTIMATIONObject(shopTargetEstimation);
		}

		for (APPROVAL_HISTORY approvalHistory : approvalHistorys) {
			this.addAPPROVAL_HISTORYObject(approvalHistory);
		}

		for (ATTACHMENT attachment : attachments) {
			this.addATTACHMENTObject(attachment);
		}
	}

	/**
	 * Clears the local variables.
	 */
	private void clear() {
		shopTargetInfoObject = null;
		shopTargetCircleInfoObject = null;
		shopMasterObject = null;
		shopTargetCheckObject = null;
		shopTargetEstimations.clear();
		approvalHistorys.clear();
		attachments.clear();
	}

}
