/*
  This class has been generated by the Code Generator
 */

package com.laiyifen.common.core;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.cordys.cpc.bsf.busobject.exception.WSAppServerRunTimeException;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.NodeSet;
import com.eibus.xml.xpath.ResultNode;
import com.eibus.xml.xpath.XPath;
import com.eibus.xml.xpath.XPathMetaInfo;
import com.laiyifen.common.ConnectorManager;
import com.laiyifen.common.util.LaiYiFenCommunicationFailure;

public class ORG_TEAMDEP_MAPPING extends ORG_TEAMDEP_MAPPINGBase {
	public ORG_TEAMDEP_MAPPING() {
		this((BusObjectConfig) null);
	}

	public ORG_TEAMDEP_MAPPING(BusObjectConfig config) {
		super(config);
	}

	/**
	 * 同步运行时的Orgnizational Mode的UnitID，UnitName，UnitDescription到DB
	 * 
	 * @param deptCode
	 *            deptId，not null
	 * @return null
	 * @throws LaiYiFenCommunicationFailure
	 */
	public static void syncUnits(String deptCode)
			throws LaiYiFenCommunicationFailure {
		// 根据teamname(deptCode)获取teamid
		if ("*".equals(deptCode)) {
			syncAllTeams();
			return;
		}
		String teamids = getTeamidByTeamname(deptCode);
		// 同步当前Unit
		syncCurrentUnit(teamids);
		// 同步当前Unit的所有Child Units
		syncChildUnits(teamids);
	}

	public static ORG_TEAMDEP_MAPPING getMappingByDeptid(String deptid) {
		String queryText = "SELECT * FROM \"ORG_TEAMDEP_MAPPING\" WHERE \"DEPT_ID\" =:DEPT_ID ";
		QueryObject query = new QueryObject(queryText);
		query.addParameter("DEPT_ID", "ORG_TEAMDEP_MAPPING.DEPT_ID",
				QueryObject.PARAM_STRING, deptid);
		query.setResultClass(ORG_TEAMDEP_MAPPING.class);
		return (ORG_TEAMDEP_MAPPING) query.getObject();
	}

	private static String getTeamidByTeamname(String teamname) {
		int response = 0;
		try {
			SOAPRequestObject sroGetUnits = new SOAPRequestObject(
					BSF.getOrganization(),
					"http://schemas.cordys.com/userassignment/UserAssignmentService/1.0",
					"GetUnits", new String[] { "WorkspaceID", "Filter",
							"UseRegEx" }, new Object[] {
							"__Organization Staging__", "", "false" });
			response = sroGetUnits.execute();
			if (XPath.getXPathInstance(".//Unit[Name=" + teamname + "]")
					.firstMatch(response, null) == 0) {
				throw new WSAppServerRunTimeException("teamname对应的Unit不存在！");
			}
			return Node.getData(XPath.getXPathInstance(
					".//Unit[Name=" + teamname + "]/ID").firstMatch(response,
					null));
		} catch (Exception e) {
			throw new WSAppServerRunTimeException(e.getMessage());
		} finally {
			if (response != 0) {
				Node.delete(response);
				response = 0;
			}
		}
	}

	private static void syncMappingObject(String TEAM_ID, String DEPT_ID,
			String DEPT_NAME, String EXT1) {
		ORG_TEAMDEP_MAPPING otm = getMappingByDeptid(DEPT_ID);
		if (otm == null) {
			otm = new ORG_TEAMDEP_MAPPING();
			otm.setTEAM_ID(TEAM_ID);
			otm.setDEPT_ID(DEPT_ID);
			otm.setDEPT_NAME(DEPT_NAME);
			otm.setEXT1(EXT1);
			otm.insert();
		} else {
			otm.setTEAM_ID(TEAM_ID);
			otm.setDEPT_NAME(DEPT_NAME);
			otm.setEXT1(EXT1);
			otm.update();
		}
	}

	private static void syncCurrentUnit(String teamid) {
		int response = 0;
		try {
			SOAPRequestObject sroGetUnit = new SOAPRequestObject(
					BSF.getOrganization(),
					"http://schemas.cordys.com/orgmodel/runtime/OrgModel/1.0",
					"getUnitDetails", new String[] { "unitId" },
					new Object[] { teamid });
			response = sroGetUnit.execute();
			if (XPath.getXPathInstance(".//UnitInfo")
					.firstMatch(response, null) == 0) {
				throw new WSAppServerRunTimeException("teamid对应的Unit不存在！");
			}
			syncMappingObject(teamid, Node.getData(XPath.getXPathInstance(
					".//UnitInfo/UnitName").firstMatch(response, null)),
					Node.getData(XPath.getXPathInstance(
							".//UnitInfo/UnitDescription").firstMatch(response,
							null)), "");
		} catch (Exception e) {
			throw new WSAppServerRunTimeException(e.getMessage());
		} finally {
			if (response != 0) {
				Node.delete(response);
				response = 0;
			}
		}
	}

	private static void syncChildUnits(String teamid) {
		// 最大遍历深度
		String hierarchyDepth = "10000";
		int response = 0;
		try {
			SOAPRequestObject sroGetChildUnits = new SOAPRequestObject(
					BSF.getOrganization(),
					"http://schemas.cordys.com/orgmodel/runtime/OrgModel/1.0",
					"getChildUnits", new String[] { "unitName",
							"hierarchyDepth", "includeRoles" }, new Object[] {
							teamid, hierarchyDepth, "false" });
			response = sroGetChildUnits.execute();
			int[] unitNodes = XPath.getMatchingNodes(".//UnitInfo", null,
					response);
			for (int i = 0; i < unitNodes.length; i++) {
				String deptname = getDeptName(Node.getData(XPath
						.getXPathInstance(".//UnitQName").firstMatch(
								unitNodes[i], null)));
				syncMappingObject(Node.getData(XPath.getXPathInstance(
						".//UnitID").firstMatch(unitNodes[i], null)), deptname,
						Node.getData(XPath.getXPathInstance(
								".//UnitDescription").firstMatch(unitNodes[i],
								null)), "");
			}
		} catch (Exception e) {
			throw new WSAppServerRunTimeException(e.getMessage());
		} finally {
			if (response != 0) {
				Node.delete(response);
				response = 0;
			}
		}
	}

	// get "011" from "org models/011", which is UnitQName
	private static String getDeptName(String UnitQName) {
		String tmp[] = UnitQName.split("/");
		return tmp[tmp.length - 1];
	}

	public static void syncAllTeams() throws LaiYiFenCommunicationFailure {
		String um_namespace = "http://schemas.cordys.com/userassignment/UserAssignmentService/1.0";
		String org = ConnectorManager.getDefaultOrg();// BSF.getOrganization();
		int result = ConnectorManager._callSoapMethod(org, um_namespace,
				"GetUnits", null, null);

		XPathMetaInfo info = new XPathMetaInfo();
		info.addNamespaceBinding("", um_namespace);
		XPath opath = XPath.getXPathInstance(".//Unit");
		NodeSet oNodeSet = opath.selectNodeSet(result, info);
		if (oNodeSet != null) {

			while (oNodeSet.hasNext()) {

				// this is a handle to theXmlResultNode object in the native
				// layer
				long iResultNode = oNodeSet.next();
				int iNode = ResultNode.getElementNode(iResultNode);
				String id = Node.getDataElement(iNode, "ID", "");
				String deptname = Node.getDataElement(iNode, "Name", "");
				String desc = Node.getDataElement(iNode, "Description", "");
				syncMappingObject(id, deptname, desc, null);
				Node.delete(iNode);
				iNode = 0;

			}
		}
		if (Node.isValidNode(result)) {
			Node.delete(result);
			result = 0;
		}
	}

}
