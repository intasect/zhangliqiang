/*
  This class has been generated by the Code Generator
*/

package com.laiyifen.common.core;

import com.cordys.cpc.bsf.busobject.BsfContext;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.Config;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;

import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.XPath;
import com.laiyifen.common.util.AssignmentUtils;

public class INTERFACE_ACL extends INTERFACE_ACLBase
{
	public static final String ORG_LAIYIFEN = "o=laiyifen,cn=cordys,cn=defaultInst,o=laiyifen";
	
    public INTERFACE_ACL()
    {
        this((BusObjectConfig)null);
    }

    public INTERFACE_ACL(BusObjectConfig config)
    {
        super(config);
    }

    public static String getActiveInterfacesByBpmType(String bpmType)
    {
    	String queryText = "select * from INTERFACE_ACL where BPM_TYPE = :bpmType and STATUS = '1'";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("bpmType", "INTERFACE_ACL.BPM_TYPE", QueryObject.PARAM_STRING, bpmType);
        query.setResultClass(INTERFACE_ACL.class);

        BusObjectIterator<INTERFACE_ACL> interfaces =  query.getObjects();
        
        StringBuffer sb = new StringBuffer("");
        while(interfaces.hasMoreElements()){
        	INTERFACE_ACL acl = interfaces.nextElement();
        	sb.append(acl.getINTERFACE_KEY()).append(";");
        }
        
        return sb.toString();
    }
    
    public static String getActiveInterfacesByBpmTypeJavaCall(String bpmType)
    {
    	String[] paramNames = {"bpmType"};
    	Object[] paramValues = {bpmType};

    	SOAPRequestObject sro = new SOAPRequestObject(ORG_LAIYIFEN,
    			"http://schemas.cordys.com/tbpm/common", 
    			"GetActiveInterfacesByBpmType", 
    			paramNames, 
    			paramValues);
    	
    	int response = 0;
    	int rstNode = 0;
    	try {
			response = sro.execute();
			
			rstNode = XPath.getFirstMatch(".//*[local-name()='getActiveInterfacesByBpmType']/*[local-name()='getActiveInterfacesByBpmType']", null, response);
			String rst = Node.getDataWithDefault(rstNode, "");
			
			return rst;
		} catch (Exception e) {
			//e.printStackTrace();
			return "";
		} finally{
			Node.delete(rstNode);
			rstNode = 0;
			Node.delete(response);
			response = 0;
		}
    }
    
    public static String getActiveInterfacesByBpmTypeStaticCall(String bpmType)
    {
    	BsfContext mycontext = AssignmentUtils.initBSF();
    	
    	try {
    		String queryText = "select * from INTERFACE_ACL where BPM_TYPE = :bpmType and STATUS = '1'";
            QueryObject query = new QueryObject(queryText);
            query.addParameter("bpmType", "INTERFACE_ACL.BPM_TYPE", QueryObject.PARAM_STRING, bpmType);
            query.setResultClass(INTERFACE_ACL.class);

            BusObjectIterator<INTERFACE_ACL> interfaces =  query.getObjects();
            
            StringBuffer sb = new StringBuffer("");
            while(interfaces.hasMoreElements()){
            	INTERFACE_ACL acl = interfaces.nextElement();
            	sb.append(acl.getINTERFACE_KEY()).append(";");
            }
            
            return sb.toString();
		} catch (Exception e) {
			//e.printStackTrace();
			return "";
		} finally{
			AssignmentUtils.release(mycontext);
		}
    }

}
