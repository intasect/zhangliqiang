/*
  This class has been generated by the Code Generator
 */

package com.laiyifen.common.core;

import java.util.HashMap;
import java.util.Map;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.XPath;
import com.eibus.xml.xpath.XPathMetaInfo;
/*
 * 获取用户基本信息
 * @Author Jiang
 */
public class User extends UserBase {
	public static final String UM_NAMESPACE = "http://schemas.cordys.com/1.0/ldap";
	public static final String ASSIGNMENT_NAMESPACE = "http://schemas.cordys.com/userassignment/UserAssignmentService/1.0";
	public static final String TEAM_NAMESPACE = "http://schemas.cordys.com/orgmodel/runtime/OrgModel/1.0";
	public static final String EMPLOYEE_NAMESPACE="http://schemas.cordys.com/tbpm/common";

	public User() {
		this((BusObjectConfig) null);
	}

	public User(BusObjectConfig config) {
		super(config);
	}
    /*
     * 获取用户信息
     * return 用户对象,包括用户名，用户编码，部门编码和部门名称。
     */
	public static com.laiyifen.common.core.User getUserInfo() {
		String userDN = BSF.getUser();
		String employeeID = userDN.substring(3, userDN.indexOf(","));
		return getEmployeeBasicInfo(employeeID,userDN);
	}

	/*
     * 获取部门信息
     * return 部门编码和部门名称。
     */
	public static Map<String,String> getUserDeptInfo() {
		String organization = BSF.getOrganization();
		String userDN = BSF.getUser();
		String workspaceID = "__Organization Staging__";
		String[] paramNamesIAR = { "WorkspaceID", "AssignmentRoot", "UserDN" };
		Object[] paramValuesIAR = { workspaceID, getInitializeAssignmentRoot(),
				userDN };
		SOAPRequestObject sroIAR = new SOAPRequestObject(organization,
				ASSIGNMENT_NAMESPACE, "GetAssignments", paramNamesIAR,
				paramValuesIAR);
		int response = sroIAR.execute();
		try {
			int teamIDNode = 0;
			if (response > 0) {
				XPathMetaInfo metaInfo = new XPathMetaInfo();
				metaInfo.addNamespaceBinding("", ASSIGNMENT_NAMESPACE);
				teamIDNode = XPath.getFirstMatch(".//Assignment/UnitID",
						metaInfo, response);
			}
			String teamID=Node.getDataWithDefault(teamIDNode, null);
			String teamName = "";
			Map<String,String> map = new HashMap<String,String>();
			if(teamID!=null) {
				teamName = getTeamNameForTeamID(teamID);
				map.put("teamID", teamID);
				map.put("teamName", teamName);
			}
			return map;
		} finally {
			Node.delete(response);
			response = 0;
		}
	}
	/*
     * 获取AssignmentRoot
     * return AssignmentRoot。
     */
	public static String getInitializeAssignmentRoot() {
		String organization = BSF.getOrganization();
		String workspaceID = "__Organization Staging__";
		String assignmentRoot = "CIUIRoot";
		String create = "true";
		String[] paramNamesIAR = { "WorkspaceID", "AssignmentRoot", "Create" };
		Object[] paramValuesIAR = { workspaceID, assignmentRoot, create };
		SOAPRequestObject sroIAR = new SOAPRequestObject(organization,
				ASSIGNMENT_NAMESPACE, "InitializeAssignmentRoot",
				paramNamesIAR, paramValuesIAR);
		int response = sroIAR.execute();
		try {
			int initializeRootNode = 0;
			if (response > 0) {
				XPathMetaInfo metaInfo = new XPathMetaInfo();
				metaInfo.addNamespaceBinding("", ASSIGNMENT_NAMESPACE);
				initializeRootNode = XPath.getFirstMatch(
						".//InitializeAssignmentRoot", metaInfo, response);
			}
			String assignmentRootValue = Node.getDataWithDefault(
					initializeRootNode, null);
			return assignmentRootValue;
		} finally {
			Node.delete(response);
			response = 0;
		}
	}
	/*
     * 获取部门名称
     * @param teamId
     *        部门ID
     * return 部门名称
     */
	public static String getTeamNameForTeamID(String teamId) {
		String organization = BSF.getOrganization();
		String[] paramNamesIAR = { "unitId" };
		Object[] paramValuesIAR = { teamId };
		SOAPRequestObject sroIAR = new SOAPRequestObject(organization,
				TEAM_NAMESPACE, "getUnitName", paramNamesIAR, paramValuesIAR);
		int response = sroIAR.execute();
		try {
			int teamNameNode = 0;
			if (response > 0) {
				XPathMetaInfo metaInfo = new XPathMetaInfo();
				metaInfo.addNamespaceBinding("", TEAM_NAMESPACE);
				teamNameNode = XPath.getFirstMatch(".//getUnitName", metaInfo,
						response);
			}
			String teamName = Node.getDataWithDefault(teamNameNode, null);
			return teamName;
		} finally {
			Node.delete(response);
			response = 0;
		}
	}
	/*
     * 获取部门编码，角色编码,公司编码,角色名称
     * @param loginId
     *        用户ID
     * return 部门编码，角色编码,公司编码,角色名称
     */
	public static Map<String,String> getEmployInfo(String loginId){
		String organization =BSF.getOrganization();
		String[] paramNamesIAR ={"EMPLOYEEID"};
		Object[] paramValuesIAR ={loginId};
		SOAPRequestObject sroIAR = new SOAPRequestObject(organization,
				EMPLOYEE_NAMESPACE, "GetEmployeeInfoObject", paramNamesIAR,
				paramValuesIAR);
		int response = sroIAR.execute();
		try {
			int deptCodeNode = 0;
			int roleCodeNode=0;
			int roleNameNode=0;
			int deptNameNode =0;
			int companyCodeNode =0;
			int personalStatusNode =0;
			int mobileNode=0;
			int costcenterNode=0;
			if (response > 0) {
				XPathMetaInfo metaInfo = new XPathMetaInfo();
				metaInfo.addNamespaceBinding("",EMPLOYEE_NAMESPACE);
				deptCodeNode = XPath.getFirstMatch(".//EMPLOYEE_INFO/DEPTID",
						metaInfo, response);
				roleNameNode =XPath.getFirstMatch(".//EMPLOYEE_INFO/STATION",
						metaInfo, response);
				roleCodeNode=XPath.getFirstMatch(".//EMPLOYEE_INFO/STATIONCODE",
						metaInfo, response);
				deptNameNode=XPath.getFirstMatch(".//EMPLOYEE_INFO/DEPTNAME",
						metaInfo, response);
				companyCodeNode=XPath.getFirstMatch(".//EMPLOYEE_INFO/COMPANYCODE",
						metaInfo, response);
				personalStatusNode=XPath.getFirstMatch(".//EMPLOYEE_INFO/PERSONALSTATUS",
						metaInfo, response);
				mobileNode=XPath.getFirstMatch(".//EMPLOYEE_INFO/MOBILE",
						metaInfo, response);
				costcenterNode=XPath.getFirstMatch(".//EMPLOYEE_INFO/COSTCENTER",
						metaInfo, response);
			}
			String deptCode =Node.getDataWithDefault(deptCodeNode, null);
			String roleCode=Node.getDataWithDefault(roleCodeNode, null);
			String roleName=Node.getDataWithDefault(roleNameNode, null);
			String deptName=Node.getDataWithDefault(deptNameNode, null);
			String companyCode = Node.getDataWithDefault(companyCodeNode,null);
			String personalStatus = Node.getDataWithDefault(personalStatusNode,null);
			String mobile= Node.getDataWithDefault(mobileNode,null);
			String costCenter= Node.getDataWithDefault(costcenterNode,null);
			Map<String,String> map = new HashMap<String,String>();
			if (deptCode!=null&&!deptCode.equals("")) {
				map.put("deptCode", deptCode);
			}
			if(roleCode!=null&&!roleCode.equals("")){
			    map.put("roleCode",roleCode);
			}
			if(roleName!=null&&!roleName.equals("")){
				map.put("roleName",roleName);
			}
			if(deptName!=null&&!deptName.equals("")){
			    map.put("deptName",deptName);
			}
			if(companyCode!=null&&!companyCode.equals("")){
				map.put("companyCode",companyCode);
			}
			if(personalStatus!=null&&!personalStatus.equals("")){
			    map.put("personalStatus",personalStatus);
			}
			if(mobile!=null&&!mobile.equals("")){
				map.put("mobile",mobile);
			}
			if(costCenter!=null&&!costCenter.equals("")){
			    map.put("costCenter",costCenter);
			}
			return map;
		} finally {
			Node.delete(response);
			response = 0;
		}
	}
	
	/*
     * 获取部门编码，角色
     * @param teamId
     *        部门ID
     * return 部门名称
     */
	public static String getCompanyName(String companyCode){
		String organization = BSF.getOrganization();
		String[] paramNamesIAR = {"COMPANY_CODE"};
		Object[] paramValuesIAR = {companyCode};
		SOAPRequestObject sroIAR = new SOAPRequestObject(organization,
				EMPLOYEE_NAMESPACE, "GetOrgCompanyInfoObject", paramNamesIAR, paramValuesIAR);
		int response = sroIAR.execute();
		try {
			int companyNameNode = 0;
			if (response > 0) {
				XPathMetaInfo metaInfo = new XPathMetaInfo();
				metaInfo.addNamespaceBinding("", EMPLOYEE_NAMESPACE);
				companyNameNode = XPath.getFirstMatch(".//COMPANY_NAME", metaInfo,
						response);
			}
			String companyName = Node.getDataWithDefault(companyNameNode, null);
			return companyName;
		} finally {
			Node.delete(response);
			response = 0;
		}
	}
	
	/*
     * 获取当前用户的基本信息
     * @param employeeID
     * return user对象
     */
	public static User getEmployeeBasicInfo(String employeeID,String userDN)
    {
    	String queryText = "select e.employeeid,e.englishname,e.sn,e.givenname,e.birthday,e.homeplace,e.sex,e.hiredate,e.leavedate,e.deptname,"
    				+ "e.deptid,e.orgshort,e.worktime,e.lyfmail,e.postcode,e.employeetype,e.managernumber,e.workarea,e.costcenter,e.phonenumber,"
    				+ "e.webshort,e.personalmail,e.mobile,e.companycode,o.company_name chinesepinyin,e.station,e.stationcode,e.lyflevel,e.personalstatus "
    				+ "from EMPLOYEE_INFO e, ORG_COMPANY_INFO o where e.companycode = o.company_code and e.employeeid= :empid";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("empid", "EMPLOYEE_INFO.EMPLOYEEID", QueryObject.PARAM_STRING, employeeID);
        query.setResultClass(EMPLOYEE_INFO.class);
        EMPLOYEE_INFO empObject =  (EMPLOYEE_INFO)query.getObject();
        
        User user = new User();
        user.setUserName(empObject.getSN().concat(empObject.getGIVENNAME()));
		user.setUserDN(userDN);
		user.setUserCode(empObject.getEMPLOYEEID());
		user.setDeptCode(empObject.getDEPTID());
		user.setDeptName(empObject.getDEPTNAME());
		user.setRoleDNList(empObject.getSTATIONCODE());
		user.setRoleNameList(empObject.getSTATION());
		user.setCompanyCode(empObject.getCOMPANYCODE());
		user.setCompanyName(empObject.getCHINESEPINYIN());
		user.setLeaveFlag(empObject.getPERSONALSTATUS());
		user.setMobile(empObject.getMOBILE());
		user.setCostCenter(empObject.getCOSTCENTER());
		user.setLyfLevel(empObject.getLYFLEVEL());
    
        return user;
    }

	public void onInsert() {
	}

	public void onUpdate() {
	}

	public void onDelete() {
	}

}