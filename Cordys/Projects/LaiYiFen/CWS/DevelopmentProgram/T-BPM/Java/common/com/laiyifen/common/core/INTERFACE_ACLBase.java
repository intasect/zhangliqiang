/*
  This class has been generated by the Code Generator
*/

package com.laiyifen.common.core;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.busobject.QueryObject;
import com.cordys.cpc.bsf.classinfo.AttributeInfo;
import com.cordys.cpc.bsf.classinfo.ClassInfo;
import com.cordys.cpc.bsf.listeners.constraint.StringValidator;


public abstract class INTERFACE_ACLBase extends com.cordys.cpc.bsf.busobject.StateBusObject
{
    // tags used in the XML document
    public final static String ATTR_INTERFACE_KEY = "INTERFACE_KEY";
    public final static String ATTR_INTERFACE_DESC = "INTERFACE_DESC";
    public final static String ATTR_STATUS = "STATUS";
    public final static String ATTR_BPM_TYPE = "BPM_TYPE";
    public final static String ATTR_EXT_1 = "EXT_1";
    public final static String ATTR_EXT_2 = "EXT_2";
    public final static String ATTR_EXT_3 = "EXT_3";
    private static ClassInfo s_classInfo = null;
    public static ClassInfo _getClassInfo()//NOPMD framework ensures this is thread safe
    {
        if ( s_classInfo == null )//NOPMD
        {
            s_classInfo = newClassInfo(INTERFACE_ACL.class);
            s_classInfo.setTableName("INTERFACE_ACL");
            s_classInfo.setUIDElements(new String[]{ATTR_INTERFACE_KEY, ATTR_BPM_TYPE});
            {
                AttributeInfo ai = new AttributeInfo(ATTR_INTERFACE_KEY);
                ai.setJavaName(ATTR_INTERFACE_KEY);
                ai.setColumnName(ATTR_INTERFACE_KEY);
                ai.setAttributeClass(String.class);
                StringValidator v = new StringValidator(ATTR_INTERFACE_KEY);
                v.setMaxLength(50);
                ai.addConstraintHandler(v);
                s_classInfo.addAttributeInfo(ai);
            }
            {
                AttributeInfo ai = new AttributeInfo(ATTR_INTERFACE_DESC);
                ai.setJavaName(ATTR_INTERFACE_DESC);
                ai.setColumnName(ATTR_INTERFACE_DESC);
                ai.setAttributeClass(String.class);
                StringValidator v = new StringValidator(ATTR_INTERFACE_DESC);
                v.setMaxLength(255);
                ai.addConstraintHandler(v);
                s_classInfo.addAttributeInfo(ai);
            }
            {
                AttributeInfo ai = new AttributeInfo(ATTR_STATUS);
                ai.setJavaName(ATTR_STATUS);
                ai.setColumnName(ATTR_STATUS);
                ai.setAttributeClass(String.class);
                StringValidator v = new StringValidator(ATTR_STATUS);
                v.setMaxLength(1);
                ai.addConstraintHandler(v);
                s_classInfo.addAttributeInfo(ai);
            }
            {
                AttributeInfo ai = new AttributeInfo(ATTR_BPM_TYPE);
                ai.setJavaName(ATTR_BPM_TYPE);
                ai.setColumnName(ATTR_BPM_TYPE);
                ai.setAttributeClass(String.class);
                StringValidator v = new StringValidator(ATTR_BPM_TYPE);
                v.setMaxLength(255);
                ai.addConstraintHandler(v);
                s_classInfo.addAttributeInfo(ai);
            }
            {
                AttributeInfo ai = new AttributeInfo(ATTR_EXT_1);
                ai.setJavaName(ATTR_EXT_1);
                ai.setColumnName(ATTR_EXT_1);
                ai.setAttributeClass(String.class);
                StringValidator v = new StringValidator(ATTR_EXT_1);
                v.setMaxLength(255);
                ai.addConstraintHandler(v);
                s_classInfo.addAttributeInfo(ai);
            }
            {
                AttributeInfo ai = new AttributeInfo(ATTR_EXT_2);
                ai.setJavaName(ATTR_EXT_2);
                ai.setColumnName(ATTR_EXT_2);
                ai.setAttributeClass(String.class);
                StringValidator v = new StringValidator(ATTR_EXT_2);
                v.setMaxLength(255);
                ai.addConstraintHandler(v);
                s_classInfo.addAttributeInfo(ai);
            }
            {
                AttributeInfo ai = new AttributeInfo(ATTR_EXT_3);
                ai.setJavaName(ATTR_EXT_3);
                ai.setColumnName(ATTR_EXT_3);
                ai.setAttributeClass(String.class);
                StringValidator v = new StringValidator(ATTR_EXT_3);
                v.setMaxLength(255);
                ai.addConstraintHandler(v);
                s_classInfo.addAttributeInfo(ai);
            }
        }
        return s_classInfo;
    }

    public INTERFACE_ACLBase(BusObjectConfig config)
    {
        super(config);
    }

    public String getINTERFACE_KEY()
    {
        return getStringProperty(ATTR_INTERFACE_KEY);
    }

    public void setINTERFACE_KEY(String value)
    {
        setProperty(ATTR_INTERFACE_KEY, value, 0);
    }

    public String getINTERFACE_DESC()
    {
        return getStringProperty(ATTR_INTERFACE_DESC);
    }

    public void setINTERFACE_DESC(String value)
    {
        setProperty(ATTR_INTERFACE_DESC, value, 0);
    }

    public String getSTATUS()
    {
        return getStringProperty(ATTR_STATUS);
    }

    public void setSTATUS(String value)
    {
        setProperty(ATTR_STATUS, value, 0);
    }

    public String getBPM_TYPE()
    {
        return getStringProperty(ATTR_BPM_TYPE);
    }

    public void setBPM_TYPE(String value)
    {
        setProperty(ATTR_BPM_TYPE, value, 0);
    }

    public String getEXT_1()
    {
        return getStringProperty(ATTR_EXT_1);
    }

    public void setEXT_1(String value)
    {
        setProperty(ATTR_EXT_1, value, 0);
    }

    public String getEXT_2()
    {
        return getStringProperty(ATTR_EXT_2);
    }

    public void setEXT_2(String value)
    {
        setProperty(ATTR_EXT_2, value, 0);
    }

    public String getEXT_3()
    {
        return getStringProperty(ATTR_EXT_3);
    }

    public void setEXT_3(String value)
    {
        setProperty(ATTR_EXT_3, value, 0);
    }


    public static com.laiyifen.common.core.INTERFACE_ACL getInterfaceAclObject(String INTERFACE_KEY, String BPM_TYPE)
    {
        String queryText = "select * from \"INTERFACE_ACL\" where \"INTERFACE_KEY\" = :INTERFACE_KEY and \"BPM_TYPE\" = :BPM_TYPE";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("INTERFACE_KEY", "INTERFACE_ACL.INTERFACE_KEY", QueryObject.PARAM_STRING, INTERFACE_KEY);//NOPMD
        query.addParameter("BPM_TYPE", "INTERFACE_ACL.BPM_TYPE", QueryObject.PARAM_STRING, BPM_TYPE);//NOPMD
        query.setResultClass(INTERFACE_ACL.class);
        return (INTERFACE_ACL)query.getObject();
    }

    public static BusObjectIterator<com.laiyifen.common.core.INTERFACE_ACL> getInterfaceAclObjects(String fromINTERFACE_KEY, String toINTERFACE_KEY, String fromBPM_TYPE, String toBPM_TYPE, com.cordys.cpc.bsf.query.Cursor cursor)
    {
        String queryText = "select * from \"INTERFACE_ACL\" where \"INTERFACE_KEY\" between :fromINTERFACE_KEY and :toINTERFACE_KEY and \"BPM_TYPE\" between :fromBPM_TYPE and :toBPM_TYPE";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("fromINTERFACE_KEY", "INTERFACE_ACL.INTERFACE_KEY", QueryObject.PARAM_STRING, fromINTERFACE_KEY);
        query.addParameter("toINTERFACE_KEY", "INTERFACE_ACL.INTERFACE_KEY", QueryObject.PARAM_STRING, toINTERFACE_KEY);
        query.addParameter("fromBPM_TYPE", "INTERFACE_ACL.BPM_TYPE", QueryObject.PARAM_STRING, fromBPM_TYPE);
        query.addParameter("toBPM_TYPE", "INTERFACE_ACL.BPM_TYPE", QueryObject.PARAM_STRING, toBPM_TYPE);
        query.setResultClass(INTERFACE_ACL.class);
        query.setCursor(cursor);
        return query.getObjects();
    }

    public static BusObjectIterator<com.laiyifen.common.core.INTERFACE_ACL> getInterfaceAclObjects(String fromINTERFACE_KEY, String toINTERFACE_KEY, String fromBPM_TYPE, String toBPM_TYPE)
    {
        String queryText = "select * from \"INTERFACE_ACL\" where \"INTERFACE_KEY\" between :fromINTERFACE_KEY and :toINTERFACE_KEY and \"BPM_TYPE\" between :fromBPM_TYPE and :toBPM_TYPE";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("fromINTERFACE_KEY", "INTERFACE_ACL.INTERFACE_KEY", QueryObject.PARAM_STRING, fromINTERFACE_KEY);
        query.addParameter("toINTERFACE_KEY", "INTERFACE_ACL.INTERFACE_KEY", QueryObject.PARAM_STRING, toINTERFACE_KEY);
        query.addParameter("fromBPM_TYPE", "INTERFACE_ACL.BPM_TYPE", QueryObject.PARAM_STRING, fromBPM_TYPE);
        query.addParameter("toBPM_TYPE", "INTERFACE_ACL.BPM_TYPE", QueryObject.PARAM_STRING, toBPM_TYPE);
        query.setResultClass(INTERFACE_ACL.class);
        return query.getObjects();
    }

    public static BusObjectIterator<com.laiyifen.common.core.INTERFACE_ACL> getNextInterfaceAclObjects(String INTERFACE_KEY, String BPM_TYPE, com.cordys.cpc.bsf.query.Cursor cursor)
    {
        String queryText = "select * from \"INTERFACE_ACL\" where (\"INTERFACE_KEY\" > :INTERFACE_KEY) or (\"INTERFACE_KEY\" = :INTERFACE_KEY and \"BPM_TYPE\" > :BPM_TYPE) order by \"INTERFACE_KEY\" asc, \"BPM_TYPE\" asc";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("INTERFACE_KEY", "INTERFACE_ACL.INTERFACE_KEY", QueryObject.PARAM_STRING, INTERFACE_KEY);//NOPMD
        query.addParameter("BPM_TYPE", "INTERFACE_ACL.BPM_TYPE", QueryObject.PARAM_STRING, BPM_TYPE);//NOPMD
        query.setResultClass(INTERFACE_ACL.class);
        query.setCursor(cursor);
        return query.getObjects();
    }

    public static BusObjectIterator<com.laiyifen.common.core.INTERFACE_ACL> getPreviousInterfaceAclObjects(String INTERFACE_KEY, String BPM_TYPE, com.cordys.cpc.bsf.query.Cursor cursor)
    {
        String queryText = "select * from \"INTERFACE_ACL\" where (\"INTERFACE_KEY\" < :INTERFACE_KEY) or (\"INTERFACE_KEY\" = :INTERFACE_KEY and \"BPM_TYPE\" < :BPM_TYPE) order by \"INTERFACE_KEY\" desc, \"BPM_TYPE\" desc";
        QueryObject query = new QueryObject(queryText);
        query.addParameter("INTERFACE_KEY", "INTERFACE_ACL.INTERFACE_KEY", QueryObject.PARAM_STRING, INTERFACE_KEY);//NOPMD
        query.addParameter("BPM_TYPE", "INTERFACE_ACL.BPM_TYPE", QueryObject.PARAM_STRING, BPM_TYPE);//NOPMD
        query.setResultClass(INTERFACE_ACL.class);
        query.setCursor(cursor);
        return query.getObjects();
    }

}
